const TelegramBot = require('node-telegram-bot-api');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ (–±–µ–∑ polling –¥–ª—è webhook)
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });

exports.handler = async function(event, context) {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: 'Method Not Allowed'
    };
  }

  try {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram:', event.body);
    
    const update = JSON.parse(event.body);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (update.message && update.message.text) {
      const chatId = update.message.chat.id;
      const text = update.message.text;
      const userId = update.message.from.id;
      const userName = update.message.from.first_name || '–î—Ä—É–≥';

      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (${userId}): ${text}`);

      // –ö–æ–º–∞–Ω–¥–∞ /start
      if (text === '/start') {
        const welcomeMessage = `üßô‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç, ${userName}! 

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **–ì–Ω–æ–º–∏–π –ì–æ—Ä–æ—Å–∫–æ–ø** - –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–∏—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –¥—Ä–µ–≤–Ω–∏—Ö –≥–Ω–æ–º–æ–≤!

üîÆ –ß—Ç–æ —É–º–µ–µ—Ç –Ω–∞—à –±–æ—Ç:
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ —Ñ–∞–∑—ã –ª—É–Ω—ã  
‚Ä¢ –ö–∞—Ä—Ç—ã –¥–Ω—è —Å –º—É–¥—Ä–æ—Å—Ç—å—é –≥–Ω–æ–º–æ–≤
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ú–µ—Ä–∫—É—Ä–∏—è —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!`;

        // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ Web App
        const keyboard = {
          inline_keyboard: [[
            {
              text: 'üåü –û—Ç–∫—Ä—ã—Ç—å –ì–æ—Ä–æ—Å–∫–æ–ø',
              web_app: { 
                url: 'https://gilded-blancmange-ecc392.netlify.app/' // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® URL
              }
            }
          ]]
        };

        await bot.sendMessage(chatId, welcomeMessage, {
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ /help
      else if (text === '/help') {
        const helpMessage = `üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ì–Ω–æ–º—å–µ–º—É –ì–æ—Ä–æ—Å–∫–æ–ø—É**

üîÆ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /horoscope - –ë—ã—Å—Ç—Ä—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
‚Ä¢ /card - –ö–∞—Ä—Ç–∞ –¥–Ω—è
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!`;

        await bot.sendMessage(chatId, helpMessage, {
          parse_mode: 'Markdown'
        });
      }
      
      // –ë—ã—Å—Ç—Ä—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
      else if (text === '/horoscope') {
        await bot.sendMessage(chatId, 'üîÆ –ü–æ–ª—É—á–∞—é –≤–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø...');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –≤–∞—à–∏–º API
        const horoscopeText = `üåü **–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è**

–ì–Ω–æ–º –ú—É–¥—Ä—ã–π –≤–∏–¥–∏—Ç –æ—Å–æ–±—É—é —ç–Ω–µ—Ä–≥–∏—é –≤–æ–∫—Ä—É–≥ –≤–∞—Å! –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

‚ú® *–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!*`;

        await bot.sendMessage(chatId, horoscopeText, {
          parse_mode: 'Markdown'
        });
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      else {
        await bot.sendMessage(chatId, `ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É "${text}"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!`);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ ok: true })
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
    
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        ok: false, 
        error: error.message 
      })
    };
  }
};
