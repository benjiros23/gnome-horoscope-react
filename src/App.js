import React, { useState, useEffect } from 'react';
import { ThemeProvider, injectGlobalStyles } from './contexts/ThemeContext';

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import Header from './components/Header';
import ModernBurgerMenu from './components/ModernBurgerMenu'; // ‚úÖ –ö–†–ê–°–ò–í–û–ï –ë–£–†–ì–ï–†-–ú–ï–ù–Æ
import LoadingScreen from './components/LoadingScreen';
import ZodiacCardsSelector from './components/ZodiacCardsSelector';
import HoroscopeView from './components/HoroscopeView';
import MoonView from './components/MoonView';
import LunarView from './components/LunarView'; // üåô –ù–û–í–´–ô –õ–£–ù–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢
import CompatibilityView from './components/CompatibilityView';
import NumerologyView from './components/NumerologyView';
import AstroEventsView from './components/AstroEventsView';
import DayCardView from './components/DayCardView';
import MercuryView from './components/MercuryView';
import FavoritesView from './components/FavoritesView';
import UserSettingsView from './components/UserSettingsView'; // üßô‚Äç‚ôÇÔ∏è –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢
import GnomeMentorView from './components/GnomeMentorView'; // üßô‚Äç‚ôÇÔ∏è –ù–û–í–´–ï –ì–ù–û–ú–´-–ù–ê–°–¢–ê–í–ù–ò–ö–ò
import GnomeQuestsView from './components/GnomeQuestsView'; // üéØ –ù–û–í–´–ï –ö–í–ï–°–¢–´ –û–¢ –ì–ù–û–ú–û–í
import ServerStatus from './components/ServerStatus'; // üì∂ –ò–ù–î–ò–ö–ê–¢–û–† –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–ê
import StarryBackground from './components/StarryBackground';
import serverTester from './utils/serverTest'; // üîß –¢–ï–°–¢–ï–† –°–ï–†–í–ï–†–ê
import telegramBot from './services/telegramBot'; // ü§ñ TELEGRAM BOT SERVICE

const App = () => {
  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [isLoading, setIsLoading] = useState(true);
  const [currentView, setCurrentView] = useState('zodiac-selector');
  const [selectedSign, setSelectedSign] = useState(null);
  const [telegramUser, setTelegramUser] = useState(null);
  const [favorites, setFavorites] = useState([]);

  // Telegram WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä—Å–∏–∏
  useEffect(() => {
    const initializeTelegramApp = () => {
      try {
        if (window.Telegram?.WebApp) {
          const tg = window.Telegram.WebApp;
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          tg.ready();
          tg.expand();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º –º–µ—Ç–æ–¥–æ–≤
          const versionOk = (min) => {
            if (!tg?.version) return false;
            const [maj, minr] = tg.version.split('.').map(n => parseInt(n, 10));
            const [reqMaj, reqMin] = String(min).split('.').map(n => parseInt(n, 10));
            return (maj > reqMaj) || (maj === reqMaj && minr >= reqMin);
          };

          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
          try {
            if (versionOk('6.1') && typeof tg.setHeaderColor === 'function') {
              tg.setHeaderColor('#1a1a2e');
            }
            if (versionOk('6.2') && typeof tg.setBackgroundColor === 'function') {
              tg.setBackgroundColor('#1a1a2e');
            }
          } catch (e) {
            console.log('üîµ –¶–≤–µ—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Telegram');
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = tg.initDataUnsafe?.user;
          if (user) {
            setTelegramUser(user);
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', user);
          }
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
          try {
            if (versionOk('6.1') && tg.BackButton && typeof tg.BackButton.onClick === 'function') {
              tg.BackButton.onClick(() => {
                handleBack();
              });
            }
          } catch (e) {
            console.log('üîµ BackButton –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏');
          }
          
          console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      }
    };

    initializeTelegramApp();
  }, []);

  // Add error handling
  useEffect(() => {
    const handleGlobalError = (event) => {
      console.error('üî¥ Global error:', event.error);
      
      // Send to Telegram
      if (window.Telegram?.WebApp?.showAlert) {
        window.Telegram.WebApp.showAlert('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    };

    const handlePromiseRejection = (event) => {
      console.error('üî¥ Unhandled promise rejection:', event.reason);
    };

    window.addEventListener('error', handleGlobalError);
    window.addEventListener('unhandledrejection', handlePromiseRejection);

    return () => {
      window.removeEventListener('error', handleGlobalError);
      window.removeEventListener('unhandledrejection', handlePromiseRejection);
    };
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
        injectGlobalStyles();
        
        // üîß –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.testServer = () => serverTester.runFullTest();
        window.checkEndpoints = () => serverTester.checkEndpoints();
        window.testBot = () => telegramBot.testBotConnection(); // ü§ñ –¢–ï–°–¢ –ë–û–¢–ê
        console.log('üßô‚Äç‚ôÇÔ∏è –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: testServer() –∏–ª–∏ checkEndpoints()');
        console.log('ü§ñ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: testBot()');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const savedSign = localStorage.getItem('gnome-selected-sign');
        const savedView = localStorage.getItem('gnome-current-view');
        const savedFavorites = localStorage.getItem('gnome-favorites');
        
        if (savedSign) {
          try {
            const sign = JSON.parse(savedSign);
            setSelectedSign(sign);
          } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:', e);
          }
        }
        
        if (savedView && savedSign) {
          setCurrentView(savedView);
        }
        
        if (savedFavorites) {
          try {
            const parsedFavorites = JSON.parse(savedFavorites);
            setFavorites(parsedFavorites);
          } catch (e) {
            console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', e);
          }
        }
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Bot
        const botInitialized = await telegramBot.initialize();
        if (botInitialized) {
          console.log('‚úÖ Telegram Bot —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initializeApp();
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞
  const getHeaderTitle = () => {
    const titles = {
      'zodiac-selector': 'üîÆ –ê—Å—Ç—Ä–æ –ì–Ω–æ–º',
      'horoscope': selectedSign ? `üîÆ ${selectedSign.sign}` : 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø',
      'moon': 'üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
      'lunar': 'üåô –õ—É–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã', // üåô –ù–û–í–û–ï
      'compatibility': 'üíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
      'numerology': 'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è',
      'cards': 'üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è',
      'events': 'üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è',
      'mercury': 'ü™ê –ú–µ—Ä–∫—É—Ä–∏–π',
      'favorites': '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
      'settings': 'üßô‚Äç‚ôÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', // üßô‚Äç‚ôÇÔ∏è –ù–û–í–û–ï
      'mentor': 'üßô‚Äç‚ôÇÔ∏è –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏', // üßô‚Äç‚ôÇÔ∏è –ù–û–í–û–ï
      'quests': 'üéØ –ö–≤–µ—Å—Ç—ã –ì–Ω–æ–º–æ–≤' // üéØ –ù–û–í–û–ï
    };
    return titles[currentView] || 'üîÆ –ê—Å—Ç—Ä–æ –ì–Ω–æ–º';
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
  const handleNavigate = (view, options = {}) => {
    console.log(`üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è: ${currentView} -> ${view}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    setCurrentView(view);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω
    localStorage.setItem('gnome-current-view', view);
    
    // Safe Telegram API calls —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ—Ä—Å–∏–∏
    const tg = window.Telegram?.WebApp;
    if (tg && tg.BackButton) {
      try {
        if (view === 'zodiac-selector') {
          if (typeof tg.BackButton.hide === 'function') {
            tg.BackButton.hide();
          }
        } else {
          if (typeof tg.BackButton.show === 'function') {
            tg.BackButton.show();
          }
        }
      } catch (e) {
        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–µ—Ä—Å–∏–∏
      }
    }
    
    // Safe Haptic feedback
    if (tg?.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        const version = tg.version ? parseFloat(tg.version) : 0;
        if (version >= 6.1) {
          tg.HapticFeedback.impactOccurred('light');
        }
      } catch (e) {
        // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–µ—Ä—Å–∏–∏
      }
    }
  };

  // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
  const handleBack = () => {
    if (currentView === 'horoscope' && selectedSign) {
      handleNavigate('zodiac-selector');
    } else {
      handleNavigate('zodiac-selector');
    }
  };

  // –í—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
  const handleSignSelect = (sign) => {
    console.log('üîÆ –í—ã–±—Ä–∞–Ω –∑–Ω–∞–∫:', sign);
    setSelectedSign(sign);
    localStorage.setItem('gnome-selected-sign', JSON.stringify(sign));
    handleNavigate('horoscope');
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const handleAddToFavorites = (item) => {
    try {
      const newItem = {
        ...item,
        id: item.id || `${item.type}_${Date.now()}`,
        addedAt: new Date().toISOString()
      };
      
      const updatedFavorites = [...favorites, newItem];
      setFavorites(updatedFavorites);
      localStorage.setItem('gnome-favorites', JSON.stringify(updatedFavorites));
      
      console.log('‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', newItem);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      if (window.Telegram?.WebApp?.showAlert) {
        window.Telegram.WebApp.showAlert('‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
      }
      
      // Safe Haptic feedback
      const tg = window.Telegram?.WebApp;
      if (tg?.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
        try {
          tg.HapticFeedback.notificationOccurred('success');
        } catch (e) {
          // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–µ—Ä—Å–∏–∏
        }
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
    }
  };

  // –°–º–µ–Ω–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
  const handleSignChange = () => {
    handleNavigate('zodiac-selector');
  };

  // –†–µ–Ω–¥–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const renderMainContent = () => {
    switch (currentView) {
      case 'zodiac-selector':
        return (
          <ZodiacCardsSelector
            onSignSelect={handleSignSelect}
            selectedSign={selectedSign}
            showTitle={true}
            compact={false}
          />
        );

      case 'horoscope':
        return (
          <HoroscopeView
            onBack={handleBack}
            selectedSign={selectedSign}
            onSignChange={handleSignChange}
            onAddToFavorites={handleAddToFavorites}
          />
        );

      case 'moon':
        return (
          <MoonView
            onBack={handleBack}
            onAddToFavorites={handleAddToFavorites}
            selectedSign={selectedSign}
          />
        );

      case 'lunar': // üåô –ù–û–í–´–ô –õ–£–ù–ù–´–ô –†–ê–ó–î–ï–õ
        return (
          <LunarView
            onBack={handleBack}
            onAddToFavorites={handleAddToFavorites}
          />
        );

      case 'compatibility':
        return (
          <CompatibilityView
            onBack={handleBack}
            onAddToFavorites={handleAddToFavorites}
            selectedSign={selectedSign}
          />
        );

      case 'numerology':
        return (
          <NumerologyView
            onBack={handleBack}
            onAddToFavorites={handleAddToFavorites}
            selectedSign={selectedSign}
          />
        );

      case 'events':
        return (
          <AstroEventsView
            onBack={handleBack}
            onAddToFavorites={handleAddToFavorites}
            selectedSign={selectedSign}
          />
        );

      case 'cards':
        return (
          <DayCardView
            onBack={handleBack}
            onAddToFavorites={handleAddToFavorites}
            selectedSign={selectedSign}
          />
        );

      case 'mercury':
        return (
          <MercuryView
            onBack={handleBack}
            onAddToFavorites={handleAddToFavorites}
            selectedSign={selectedSign}
          />
        );

      case 'favorites':
        return (
          <FavoritesView
            onBack={handleBack}
            onNavigate={handleNavigate}
          />
        );

      case 'settings': // üßô‚Äç‚ôÇÔ∏è –ù–û–í–´–ô –≠–ö–†–ê–ù –ù–ê–°–¢–†–û–ï–ö
        return (
          <UserSettingsView
            onBack={handleBack}
          />
        );

      case 'mentor': // üßô‚Äç‚ôÇÔ∏è –ù–û–í–´–ï –ì–ù–û–ú–´-–ù–ê–°–¢–ê–í–ù–ò–ö–ò
        return (
          <GnomeMentorView
            onBack={handleBack}
            selectedSign={selectedSign}
            onAddToFavorites={handleAddToFavorites}
          />
        );

      case 'quests': // üéØ –ù–û–í–´–ï –ö–í–ï–°–¢–´ –û–¢ –ì–ù–û–ú–û–í
        return (
          <GnomeQuestsView
            onBack={handleBack}
            selectedSign={selectedSign}
            onAddToFavorites={handleAddToFavorites}
          />
        );

      default:
        return (
          <ZodiacCardsSelector
            onSignSelect={handleSignSelect}
            selectedSign={selectedSign}
            showTitle={true}
            compact={false}
          />
        );
    }
  };

  return (
    <ThemeProvider>
      <div className="App">
        {/* –ó–í–ï–ó–î–ù–´–ô –§–û–ù */}
        <StarryBackground />
        
        {/* –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isLoading && (
          <LoadingScreen 
            message="üîÆ –ì–Ω–æ–º—ã –≥–æ—Ç–æ–≤—è—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø..."
            showProgress={true}
          />
        )}
        
        {/* –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ */}
        {!isLoading && (
          <>
            {/* üì∂ –ò–ù–î–ò–ö–ê–¢–û–† –°–¢–ê–¢–£–°–ê –°–ï–†–í–ï–†–ê */}
            <ServerStatus />
            
            {/* ‚úÖ –•–ï–î–ï–† –ë–ï–ó –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ */}
            <Header 
              title={getHeaderTitle()}
              showMenuButton={false}
              showBackButton={currentView !== 'zodiac-selector'}
              onBack={handleBack}
            />

            {/* ‚úÖ –ö–†–ê–°–ò–í–û–ï –ë–£–†–ì–ï–†-–ú–ï–ù–Æ –° –í–ê–®–ò–ú–ò PNG –ò–ö–û–ù–ö–ê–ú–ò */}
            <ModernBurgerMenu 
              currentView={currentView}
              onNavigate={handleNavigate}
            />

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
            <main style={{ 
              marginTop: '60px', 
              minHeight: 'calc(100vh - 60px)', 
              position: 'relative',
              zIndex: 1,
              overflowX: 'hidden',
              paddingBottom: '20px'
            }}>
              {renderMainContent()}
            </main>
          </>
        )}
      </div>
    </ThemeProvider>
  );
};

export default App;