import React, { useState, useEffect } from 'react';
import { ThemeProvider, useTheme } from './contexts/ThemeContext';
import ThemeSelector from './components/UI/ThemeSelector';
import Card from './components/UI/Card';
import Button from './components/UI/Button';
import HoroscopeView from './components/HoroscopeView';
import ZodiacCarousel from './components/ZodiacCarousel';
import MoonView from './components/MoonView';
import CompatibilityView from './components/CompatibilityView';
import NumerologyView from './components/NumerologyView';
import AstroEventsView from './components/AstroEventsView';
import DayCardView from './components/DayCardView';
import MercuryView from './components/MercuryView';
import ButtonGrid from './components/ButtonGrid';

const ZODIAC_SIGNS = [
  { sign: '–û–≤–µ–Ω', emoji: '‚ôà', dates: '21.03-20.04' },
  { sign: '–¢–µ–ª–µ—Ü', emoji: '‚ôâ', dates: '21.04-20.05' },
  { sign: '–ë–ª–∏–∑–Ω–µ—Ü—ã', emoji: '‚ôä', dates: '21.05-21.06' },
  { sign: '–†–∞–∫', emoji: '‚ôã', dates: '22.06-22.07' },
  { sign: '–õ–µ–≤', emoji: '‚ôå', dates: '23.07-22.08' },
  { sign: '–î–µ–≤–∞', emoji: '‚ôç', dates: '23.08-22.09' },
  { sign: '–í–µ—Å—ã', emoji: '‚ôé', dates: '23.09-22.10' },
  { sign: '–°–∫–æ—Ä–ø–∏–æ–Ω', emoji: '‚ôè', dates: '23.10-22.11' },
  { sign: '–°—Ç—Ä–µ–ª–µ—Ü', emoji: '‚ôê', dates: '23.11-21.12' },
  { sign: '–ö–æ–∑–µ—Ä–æ–≥', emoji: '‚ôë', dates: '22.12-20.01' },
  { sign: '–í–æ–¥–æ–ª–µ–π', emoji: '‚ôí', dates: '21.01-19.02' },
  { sign: '–†—ã–±—ã', emoji: '‚ôì', dates: '20.02-20.03' }
];

const GNOME_PROFILES = {
  '–û–≤–µ–Ω': { name: '–ì–Ω–æ–º –û–≥–Ω–µ–±–æ—Ä–æ–¥', title: '–ë–æ–µ–≤–æ–π –∫—É–∑–Ω–µ—Ü', desc: '–°–º–µ–ª—ã–π, –∞–∫—Ç–∏–≤–Ω—ã–π, –ª—é–±–∏—Ç –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è' },
  '–¢–µ–ª–µ—Ü': { name: '–ì–Ω–æ–º –ó–ª–∞—Ç–æ—Ä—É–¥', title: '–ú–∞—Å—Ç–µ—Ä —Å–æ–∫—Ä–æ–≤–∏—â', desc: '–£–ø–æ—Ä–Ω—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π, —Ü–µ–Ω–∏—Ç –∫–æ–º—Ñ–æ—Ä—Ç' },
  '–ë–ª–∏–∑–Ω–µ—Ü—ã': { name: '–ì–Ω–æ–º –î–≤–æ–π–Ω—è—à–∫–∞', title: '–ú—É–¥—Ä—ã–π –ª–µ—Ç–æ–ø–∏—Å–µ—Ü', desc: '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π' },
  '–†–∞–∫': { name: '–ì–Ω–æ–º –î–æ–º–æ–≤–æ–π', title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –æ—á–∞–≥–∞', desc: '–ó–∞–±–æ—Ç–ª–∏–≤—ã–π, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π' },
  '–õ–µ–≤': { name: '–ì–Ω–æ–º –ó–ª–∞—Ç–æ–≥—Ä–∏–≤', title: '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–æ–≤–µ—Ç–Ω–∏–∫', desc: '–ì–æ—Ä–¥—ã–π, —â–µ–¥—Ä—ã–π, –ª—é–±–∏—Ç –≤–Ω–∏–º–∞–Ω–∏–µ' },
  '–î–µ–≤–∞': { name: '–ì–Ω–æ–º –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π', title: '–ú–∞—Å—Ç–µ—Ä —Ç–æ—á–Ω–æ—Å—Ç–∏', desc: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∫ –¥–µ—Ç–∞–ª—è–º' },
  '–í–µ—Å—ã': { name: '–ì–Ω–æ–º –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π', title: '–ú–∏—Ä–Ω—ã–π —Å—É–¥—å—è', desc: '–î–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω—ã–π, –∏—â–µ—Ç –±–∞–ª–∞–Ω—Å' },
  '–°–∫–æ—Ä–ø–∏–æ–Ω': { name: '–ì–Ω–æ–º –¢–∞–π–Ω–æ–≤–µ–¥', title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–æ–≤', desc: '–ì–ª—É–±–æ–∫–∏–π, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π' },
  '–°—Ç—Ä–µ–ª–µ—Ü': { name: '–ì–Ω–æ–º –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', title: '–ò—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π', desc: '–°–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–π, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π' },
  '–ö–æ–∑–µ—Ä–æ–≥': { name: '–ì–Ω–æ–º –ì–æ—Ä–æ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª—å', title: '–ú–∞—Å—Ç–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', desc: '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π, —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π' },
  '–í–æ–¥–æ–ª–µ–π': { name: '–ì–Ω–æ–º –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å', title: '–ù–æ–≤–∞—Ç–æ—Ä –±—É–¥—É—â–µ–≥–æ', desc: '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π' },
  '–†—ã–±—ã': { name: '–ì–Ω–æ–º –ú–µ—á—Ç–∞—Ç–µ–ª—å', title: '–ú–æ—Ä—Å–∫–æ–π –≤–æ–ª—à–µ–±–Ω–∏–∫', desc: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π' }
};

function AppContent() {
  const { theme, currentTheme } = useTheme(); // ‚Üê –î–û–ë–ê–í–ò–õ–ò currentTheme –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const [currentView, setCurrentView] = useState('home');
  const [selectedSign, setSelectedSign] = useState('–õ–µ–≤');
  const [telegramApp, setTelegramApp] = useState(null);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [forceUpdate, setForceUpdate] = useState(0); // ‚Üê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  
  const [favorites, setFavorites] = useState(() => {
    try {
      const saved = localStorage.getItem('gnome-favorites');
      return saved ? JSON.parse(saved) : [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      return [];
    }
  });

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã
  useEffect(() => {
    console.log('üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞:', currentTheme);
    setForceUpdate(prev => prev + 1);
  }, [currentTheme]);

  // Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    const tg = window.Telegram?.WebApp;
    if (tg) {
      setTelegramApp(tg);
      tg.ready();
      tg.expand();
      
      try {
        if (tg.MainButton) {
          tg.MainButton.setText('üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è');
          tg.MainButton.color = theme.colors.primary;
          tg.MainButton.show();
          tg.MainButton.onClick(() => setCurrentView('cards'));
        }
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ MainButton:', error);
      }
      
      console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
  }, [theme.colors.primary]);

  const silentTelegramAction = (action) => {
    try {
      const tg = window.Telegram?.WebApp;
      if (tg && parseFloat(tg.version) >= 6.1) {
        action(tg);
      }
    } catch (error) {
      console.log('Telegram action error:', error);
    }
  };

  const safeHapticFeedback = (type) => {
    silentTelegramAction((tg) => {
      if (type === 'impact') {
        tg.HapticFeedback.impactOccurred('light');
      } else if (type === 'selection') {
        tg.HapticFeedback.selectionChanged();
      }
    });
  };

  useEffect(() => {
    silentTelegramAction((tg) => {
      if (currentView !== 'home') {
        tg.BackButton.show();
        tg.BackButton.onClick(() => setCurrentView('home'));
      } else {
        tg.BackButton.hide();
      }
    });
  }, [currentView]);

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  useEffect(() => {
    try {
      localStorage.setItem('gnome-favorites', JSON.stringify(favorites));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
    }
  }, [favorites]);

  const handleButtonClick = (buttonId) => {
    console.log('üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞:', buttonId);
    setCurrentView(buttonId);
    safeHapticFeedback('selection');
  };

  const handleBackToHome = () => {
    setCurrentView('home');
  };

  const handleSignSelect = (sign) => {
    setSelectedSign(sign);
    safeHapticFeedback('impact');
  };

  const handleAddToFavorites = (item) => {
    try {
      const exists = favorites.some(fav => 
        fav.type === item.type && 
        fav.title === item.title && 
        fav.date === item.date
      );
      
      if (exists) {
        if (telegramApp) {
          telegramApp.showAlert('–≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!');
        } else {
          alert('–≠—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!');
        }
        return;
      }
      
      const newItem = {
        ...item,
        id: Date.now() + Math.random(),
        addedAt: new Date().toISOString()
      };
      
      setFavorites(prev => {
        const updated = [newItem, ...prev];
        return updated.length > 50 ? updated.slice(0, 50) : updated;
      });
      
      safeHapticFeedback('impact');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
    }
  };

  const renderCurrentView = () => {
    const viewProps = {
      onAddToFavorites: handleAddToFavorites,
      telegramApp,
      key: `${currentView}-${forceUpdate}` // ‚Üê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    };

    switch (currentView) {
      case 'horoscope':
        return (
          <HoroscopeView
            selectedSign={selectedSign}
            onSignSelect={handleSignSelect}
            {...viewProps}
          />
        );
      
      case 'moon':
        return <MoonView {...viewProps} />;
      
      case 'numerology':
        return <NumerologyView {...viewProps} />;
      
      case 'compatibility':
        return <CompatibilityView {...viewProps} />;
      
      case 'cards':
        return <DayCardView {...viewProps} />;
      
      case 'events':
        return <AstroEventsView {...viewProps} />;
      
      case 'mercury':
        return <MercuryView {...viewProps} />;
      
      case 'favorites':
        return (
          <div style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}>
            <Card title="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ" key={`favorites-${forceUpdate}`}>
              {favorites.length === 0 ? (
                <div style={{ textAlign: 'center', padding: '40px 20px' }}>
                  <div style={{ fontSize: '48px', marginBottom: '16px' }}>üìù</div>
                  <h4>–ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ</h4>
                  <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!</p>
                </div>
              ) : (
                <div>
                  <p>–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: <strong>{favorites.length}</strong></p>
                  {favorites.map((item) => (
                    <Card 
                      key={`${item.id}-${forceUpdate}`}
                      title={item.title}
                      style={{ margin: '8px 0' }}
                    >
                      <p style={{ fontSize: '12px', opacity: 0.7, margin: '0 0 8px 0' }}>
                        {item.date}
                      </p>
                      <p style={{ margin: 0 }}>{item.content}</p>
                    </Card>
                  ))}
                </div>
              )}
            </Card>
          </div>
        );
      
      default:
        return (
          <div key={`home-${forceUpdate}`}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <Card 
              title="üßô‚Äç‚ôÇÔ∏è –ì–Ω–æ–º–∏–π –ì–æ—Ä–æ—Å–∫–æ–ø" 
              subtitle="–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –¥—Ä–µ–≤–Ω–∏—Ö –≥–Ω–æ–º–æ–≤"
              key={`header-${forceUpdate}`}
            >
              {!isOnline && (
                <div style={{
                  background: theme.colors.states.warning + '20',
                  color: theme.colors.states.warning,
                  padding: '8px 16px',
                  borderRadius: '16px',
                  fontSize: '12px',
                  marginTop: '10px',
                  display: 'inline-block',
                  border: `1px solid ${theme.colors.states.warning}40`
                }}>
                  üìµ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
                </div>
              )}
            </Card>

            {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
            <Card 
              title={GNOME_PROFILES[selectedSign]?.name || '–ì–Ω–æ–º –ú—É–¥—Ä—ã–π'}
              subtitle={GNOME_PROFILES[selectedSign]?.title || '–ú–∞—Å—Ç–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π'}
              key={`profile-${forceUpdate}`}
            >
              <p style={{ ...theme.typography.body, marginBottom: '12px' }}>
                {GNOME_PROFILES[selectedSign]?.desc || '–î—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –≥–Ω–æ–º–æ–≤'}
              </p>
              <div style={{
                background: theme.colors.primary + '20',
                color: theme.name === 'wooden' ? theme.colors.primary : theme.colors.primary,
                padding: '8px 16px',
                borderRadius: '20px',
                fontSize: '14px',
                fontWeight: 'bold',
                display: 'inline-block',
                border: `1px solid ${theme.colors.primary}40`
              }}>
                {selectedSign} ({ZODIAC_SIGNS.find(s => s.sign === selectedSign)?.dates})
              </div>
            </Card>

            {/* –ö–∞—Ä—É—Å–µ–ª—å –∑–Ω–∞–∫–æ–≤ */}
            <ZodiacCarousel
              selectedSign={selectedSign}
              onSignChange={handleSignSelect}
              telegramApp={telegramApp}
              key={`zodiac-${forceUpdate}`}
            />

            {/* –°–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ */}
            <ButtonGrid 
              onButtonClick={handleButtonClick} 
              key={`buttons-${forceUpdate}`}
            />
          </div>
        );
    }
  };

  const showFallbackBackButton = currentView !== 'home' && 
    (!telegramApp || !telegramApp.BackButton || parseFloat(telegramApp.version) < 6.1);

  console.log('üé® App —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å —Ç–µ–º–æ–π:', currentTheme, 'forceUpdate:', forceUpdate);

  return (
    <div style={{...theme.container, transition: 'all 0.5s ease'}} key={`app-${forceUpdate}`}>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º */}
      <ThemeSelector key={`theme-selector-${forceUpdate}`} />

      {showFallbackBackButton && (
        <Button
          variant="ghost"
          onClick={handleBackToHome}
          style={{
            position: 'fixed',
            top: '70px',
            left: '20px',
            zIndex: 1000
          }}
          key={`back-button-${forceUpdate}`}
        >
          ‚Üê –ù–∞–∑–∞–¥
        </Button>
      )}
      
      {renderCurrentView()}

      {/* CSS –∞–Ω–∏–º–∞—Ü–∏–∏ */}
      <style key={`styles-${forceUpdate}`}>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideUp {
          from { transform: translateY(100px); opacity: 0; }
          to { transform: translateY(0); opacity: 1; }
        }
        @keyframes pulse {
          0%, 100% { opacity: 0.5; transform: scale(1); }
          50% { opacity: 1; transform: scale(1.05); }
        }
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        ${theme.name === 'wooden' ? `
          @keyframes wobble {
            0%, 100% { transform: rotate(-1deg); }
            50% { transform: rotate(1deg); }
          }
          @keyframes carve {
            0% { transform: scale(0.8) rotate(-5deg); opacity: 0; }
            50% { transform: scale(1.1) rotate(2deg); opacity: 1; }
            100% { transform: scale(1) rotate(0deg); opacity: 1; }
          }
        ` : ''}
      `}</style>
    </div>
  );
}

function App() {
  return (
    <ThemeProvider>
      <AppContent />
    </ThemeProvider>
  );
}

export default App;
