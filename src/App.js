import React, { useState, useEffect, useCallback, useMemo } from 'react';
import './App.css';

// Contexts
import { ThemeProvider } from './contexts/ThemeContext';

// Components
import Header from './components/Header';
import MainMenu from './components/MainMenu';
import MoonView from './components/MoonView';
import HoroscopeView from './components/HoroscopeView';
import CompatibilityView from './components/CompatibilityView';
import DayCardView from './components/DayCardView';
import NumerologyView from './components/NumerologyView';
import BackButton from './components/BackButton';
import FavoritesView from './components/FavoritesView';

// Hooks and Utils
import useAstrologyData from './hooks/useAstrologyData';
import ErrorBoundary from './components/ErrorBoundary';

// Error Boundary –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
class AppErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    console.log('üìç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          height: '100vh',
          padding: '20px',
          textAlign: 'center',
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: '#ffffff'
        }}>
          <h1>üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h1>
          <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>
          <button 
            onClick={() => window.location.reload()}
            style={{
              backgroundColor: '#ffffff',
              color: '#667eea',
              border: 'none',
              borderRadius: '8px',
              padding: '12px 24px',
              marginTop: '20px',
              cursor: 'pointer',
              fontSize: '16px',
              fontWeight: '600'
            }}
          >
            üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

function App() {
  // –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê
  const [selectedSign, setSelectedSign] = useState(() => {
    try {
      const saved = localStorage.getItem('gnome-selected-sign');
      if (saved) {
        // –ü–†–û–í–ï–†–Ø–ï–ú –§–û–†–ú–ê–¢ –î–ê–ù–ù–´–•
        if (saved.startsWith('"') && saved.endsWith('"')) {
          // –≠—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞ - –ø–∞—Ä—Å–∏–º
          return JSON.parse(saved);
        } else {
          // –≠—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
          return saved;
        }
      }
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞:', error);
      // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem('gnome-selected-sign');
      return null;
    }
  });

  const [currentView, setCurrentView] = useState('main');
  const [telegramApp, setTelegramApp] = useState(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
  useEffect(() => {
    try {
      if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        setTelegramApp(tg);
        console.log('üì± Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }
    } catch (error) {
      console.log('üì± Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    }
  }, []);

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const astrologyConfig = useMemo(() => ({
    autoUpdate: true,
    updateInterval: 6 * 60 * 60 * 1000, // 6 —á–∞—Å–æ–≤
    coordinates: { lat: 55.7558, lng: 37.6173 }, // –ú–æ—Å–∫–≤–∞
    zodiacSign: selectedSign,
    enableMoon: true,
    enableHoroscope: !!selectedSign
  }), [selectedSign]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const {
    moonData,
    horoscopeData,
    loading: dataLoading,
    lastUpdated,
    updateCount,
    updateMoonData,
    updateHoroscopeData
  } = useAstrologyData(astrologyConfig);

  // –ò–°–ü–†–ê–í–õ–Ø–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê
  const handleSignSelect = useCallback((sign) => {
    console.log('üåü –í—ã–±—Ä–∞–Ω –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:', sign);
    setSelectedSign(sign);
    // –°–û–•–†–ê–ù–Ø–ï–ú –ö–ê–ö –ü–†–û–°–¢–£–Æ –°–¢–†–û–ö–£
    localStorage.setItem('gnome-selected-sign', sign);
  }, []);

  const handleNavigate = useCallback((view) => {
    setCurrentView(view);
    
    // Haptic feedback –¥–ª—è Telegram
    try {
      telegramApp?.HapticFeedback?.impactOccurred('light');
    } catch (error) {
      console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }, [telegramApp]);

  const handleAddToFavorites = useCallback((item) => {
    try {
      const favorites = JSON.parse(localStorage.getItem('gnome-favorites') || '[]');
      const newItem = {
        ...item,
        id: `${item.type}_${Date.now()}_${Math.random()}`,
        addedAt: new Date().toISOString()
      };
      
      favorites.push(newItem);
      localStorage.setItem('gnome-favorites', JSON.stringify(favorites));
      
      console.log('‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', newItem);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (telegramApp) {
        telegramApp.showAlert('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
    }
  }, [telegramApp]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (moonData) {
      console.log('üåô –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
        phase: moonData.phase,
        source: moonData.source || 'unknown',
        lastUpdated: lastUpdated
      });
    }
  }, [moonData, lastUpdated]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SunCalc –∏ Enhanced MoonPhase
  useEffect(() => {
    const checkLibraries = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SunCalc
        if (window.SunCalc) {
          console.log('‚úÖ SunCalc –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Enhanced MoonPhase
        const { getMoonPhaseData } = await import('./enhanced_moonPhase');
        if (getMoonPhaseData) {
          const status = await getMoonPhaseData();
          console.log('üåô Enhanced MoonPhase status:', status);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫:', error);
      }
    };
    
    checkLibraries();
  }, []);

  const renderCurrentView = () => {
    const commonProps = {
      telegramApp,
      onNavigate: handleNavigate,
      onAddToFavorites: handleAddToFavorites
    };

    switch (currentView) {
      case 'moon':
        return (
          <MoonView 
            {...commonProps}
            moonData={moonData}
            loading={dataLoading}
            onRefresh={updateMoonData}
          />
        );
        
      case 'horoscope':
        return (
          <HoroscopeView 
            {...commonProps}
            selectedSign={selectedSign}
            onSignSelect={handleSignSelect}
            horoscopeData={horoscopeData}
            loading={dataLoading}
            onRefresh={updateHoroscopeData}
          />
        );
        
      case 'compatibility':
        return (
          <CompatibilityView 
            {...commonProps}
            selectedSign={selectedSign}
            onSignSelect={handleSignSelect}
          />
        );
        
      case 'cards':
        return <DayCardView {...commonProps} />;
        
      case 'numerology':
        return <NumerologyView {...commonProps} />;
        
      case 'favorites':
        return <FavoritesView {...commonProps} />;
        
      default:
        return (
          <MainMenu 
            {...commonProps}
            selectedSign={selectedSign}
            moonData={moonData}
            dataLoading={dataLoading}
            lastUpdated={lastUpdated}
            updateCount={updateCount}
          />
        );
    }
  };

  return (
    <AppErrorBoundary>
      <ThemeProvider>
        <ErrorBoundary>
          <div className="App">
            <Header 
              currentView={currentView}
              selectedSign={selectedSign}
              onNavigate={handleNavigate}
            />
            
            <main className="app-content">
              {renderCurrentView()}
            </main>
            
            <BackButton
              onClick={() => handleNavigate('main')}
              show={currentView !== 'main'}
              telegramApp={telegramApp}
            />
          </div>
        </ErrorBoundary>
      </ThemeProvider>
    </AppErrorBoundary>
  );
}

export default App;
