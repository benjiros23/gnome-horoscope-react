import React, { createContext, useContext, useState, useEffect } from 'react';
import themes from '../styles/themes';

const ThemeContext = createContext();

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

export const ThemeProvider = ({ children }) => {
  const [currentTheme, setCurrentTheme] = useState('light');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
  useEffect(() => {
    const savedTheme = localStorage.getItem('gnome-theme');
    console.log('üé® –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É:', savedTheme);
    if (savedTheme && themes[savedTheme]) {
      setCurrentTheme(savedTheme);
      console.log('‚úÖ –¢–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', savedTheme);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('gnome-theme', currentTheme);
    console.log('üíæ –¢–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', currentTheme);
  }, [currentTheme]);

  const switchTheme = (themeName) => {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É —Å', currentTheme, '–Ω–∞', themeName);
    if (themes[themeName]) {
      setCurrentTheme(themeName);
    } else {
      console.error('‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', themeName);
    }
  };

  const getTheme = () => {
    const theme = themes[currentTheme];
    if (!theme) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–º—É:', currentTheme);
      return themes.light; // fallback
    }
    return theme;
  };

  const value = {
    currentTheme,
    theme: getTheme(),
    switchTheme,
    availableThemes: Object.keys(themes)
  };

  console.log('üé® ThemeContext —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞:', currentTheme);

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};

export default ThemeContext;
