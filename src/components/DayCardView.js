import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';
import { useTheme } from '../contexts/ThemeContext';
import Card from './UI/Card';
import Button from './UI/Button';
import useAPI from '../hooks/useAPI';
import { saveDayCard, loadDayCard } from '../enhanced_cache';

// ===== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ö–û–õ–û–î–ê –ö–ê–†–¢ =====
const TAROT_DECK = [
  {
    id: 'fool',
    name: '–®—É—Ç',
    emoji: 'üÉè',
    element: '–í–æ–∑–¥—É—Ö',
    energy: 'positive',
    meaning: '–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–≤–æ–±–æ–¥–∞ –≤—ã–±–æ—Ä–∞.',
    advice: '–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥. –í—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π.',
    keywords: ['–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ', '—Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å', '—Å–≤–æ–±–æ–¥–∞', '—Ä–∏—Å–∫'],
    numerology: 0,
    colors: ['#FFD700', '#FF69B4']
  },
  {
    id: 'magician',
    name: '–ú–∞–≥',
    emoji: 'üßô‚Äç‚ôÇÔ∏è',
    element: '–û–≥–æ–Ω—å',
    energy: 'positive',
    meaning: '–°–∏–ª–∞ –≤–æ–ª–∏, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–æ–ø–ª–æ—â–∞—Ç—å –∏–¥–µ–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.',
    advice: '–£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. –î–µ–π—Å—Ç–≤—É–π—Ç–µ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ.',
    keywords: ['–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ', '–≤–æ–ª—è', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–¥–µ–π—Å—Ç–≤–∏–µ'],
    numerology: 1,
    colors: ['#FF0000', '#FFA500']
  },
  {
    id: 'high_priestess',
    name: '–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞',
    emoji: 'üîÆ',
    element: '–í–æ–¥–∞',
    energy: 'positive',
    meaning: '–ò–Ω—Ç—É–∏—Ü–∏—è, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, —Å–∫—Ä—ã—Ç—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å.',
    advice: '–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É. –û—Ç–≤–µ—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –≤–∞—Å.',
    keywords: ['–∏–Ω—Ç—É–∏—Ü–∏—è', '—Ç–∞–π–Ω—ã', '–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ', '–º—É–¥—Ä–æ—Å—Ç—å'],
    numerology: 2,
    colors: ['#4B0082', '#E6E6FA']
  },
  {
    id: 'empress',
    name: '–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞',
    emoji: 'üë∏',
    element: '–ó–µ–º–ª—è',
    energy: 'positive',
    meaning: '–ü–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –∏–∑–æ–±–∏–ª–∏–µ, –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –∑–∞–±–æ—Ç–∞ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è.',
    advice: '–í—Ä–µ–º—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –∑–∞–±–æ—Ç—ã –æ –±–ª–∏–∑–∫–∏—Ö. –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π.',
    keywords: ['–ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ', '–∏–∑–æ–±–∏–ª–∏–µ', '–∑–∞–±–æ—Ç–∞', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
    numerology: 3,
    colors: ['#228B22', '#FFB6C1']
  },
  {
    id: 'emperor',
    name: '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä',
    emoji: 'üëë',
    element: '–û–≥–æ–Ω—å',
    energy: 'positive',
    meaning: '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.',
    advice: '–ü—Ä–æ—è–≤–∏—Ç–µ –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –≤–æ–∑—å–º–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–∏—Ç—É–∞—Ü–∏—é.',
    keywords: ['–≤–ª–∞—Å—Ç—å', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–∫–æ–Ω—Ç—Ä–æ–ª—å', '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å'],
    numerology: 4,
    colors: ['#8B0000', '#FFD700']
  },
  {
    id: 'sun',
    name: '–°–æ–ª–Ω—Ü–µ',
    emoji: '‚òÄÔ∏è',
    element: '–û–≥–æ–Ω—å',
    energy: 'positive',
    meaning: '–†–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö, –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–º.',
    advice: '–í—Ä–µ–º—è —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è. –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —ç–Ω–µ—Ä–≥–∏–µ–π —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏.',
    keywords: ['—Ä–∞–¥–æ—Å—Ç—å', '—É—Å–ø–µ—Ö', '—ç–Ω–µ—Ä–≥–∏—è', '–æ–ø—Ç–∏–º–∏–∑–º'],
    numerology: 19,
    colors: ['#FFD700', '#FFA500']
  },
  {
    id: 'moon',
    name: '–õ—É–Ω–∞',
    emoji: 'üåô',
    element: '–í–æ–¥–∞',
    energy: 'neutral',
    meaning: '–ò–ª–ª—é–∑–∏–∏, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, —Ü–∏–∫–ª—ã –∏ —Å–∫—Ä—ã—Ç—ã–µ –≤–ª–∏—è–Ω–∏—è.',
    advice: '–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–Ω–∞–∫–∞–º –∏ —Å–∏–º–≤–æ–ª–∞–º. –ù–µ –≤—Å–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–º, —á–µ–º –∫–∞–∂–µ—Ç—Å—è.',
    keywords: ['–∏–ª–ª—é–∑–∏–∏', '—Ü–∏–∫–ª—ã', '–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ', '–∏–Ω—Ç—É–∏—Ü–∏—è'],
    numerology: 18,
    colors: ['#4169E1', '#E6E6FA']
  },
  {
    id: 'star',
    name: '–ó–≤–µ–∑–¥–∞',
    emoji: '‚≠ê',
    element: '–í–æ–∑–¥—É—Ö',
    energy: 'positive',
    meaning: '–ù–∞–¥–µ–∂–¥–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, –¥—É—Ö–æ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ.',
    advice: '–í–µ—Ä—å—Ç–µ –≤ –ª—É—á—à–µ–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ —Å–≤–æ–∏–º –º–µ—á—Ç–∞–º. –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—Å.',
    keywords: ['–Ω–∞–¥–µ–∂–¥–∞', '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–º–µ—á—Ç—ã', '–∏—Å—Ü–µ–ª–µ–Ω–∏–µ'],
    numerology: 17,
    colors: ['#00BFFF', '#FFD700']
  },
  {
    id: 'wheel_of_fortune',
    name: '–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã',
    emoji: 'üé°',
    element: '–û–≥–æ–Ω—å',
    energy: 'neutral',
    meaning: '–°—É–¥—å–±–∞, —Ü–∏–∫–ª—ã, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏.',
    advice: '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º. –¢–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å, –∏–º–µ–µ—Ç –≥–ª—É–±–æ–∫–∏–π —Å–º—ã—Å–ª.',
    keywords: ['—Å—É–¥—å–±–∞', '–∏–∑–º–µ–Ω–µ–Ω–∏—è', '—Ü–∏–∫–ª—ã', '–∫–∞—Ä–º–∞'],
    numerology: 10,
    colors: ['#800080', '#FFD700']
  },
  {
    id: 'death',
    name: '–°–º–µ—Ä—Ç—å',
    emoji: 'ü¶ã',
    element: '–í–æ–¥–∞',
    energy: 'neutral',
    meaning: '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ü–∏–∫–ª–∞, –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ.',
    advice: '–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ç–æ, —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ —Å–ª—É–∂–∏—Ç –≤–∞–º. –í—Ä–µ–º—è –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
    keywords: ['—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è', '–æ–∫–æ–Ω—á–∞–Ω–∏–µ', '–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ', '–ø–µ—Ä–µ–º–µ–Ω—ã'],
    numerology: 13,
    colors: ['#2F4F4F', '#9370DB']
  }
];

// ===== –ì–ï–ù–ï–†–ê–¢–û–† –ì–ù–û–ú–¨–ï–ô –ú–£–î–†–û–°–¢–ò =====
class GnomeWisdomGenerator {
  static wisdomTemplates = [
    '–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç –º—É–¥—Ä—ã–π –≥–Ω–æ–º {gnome}: "{wisdom}"',
    '–î—Ä–µ–≤–Ω—è—è –≥–Ω–æ–º—å—è –ø–æ—Å–ª–æ–≤–∏—Ü–∞ –≥–ª–∞—Å–∏—Ç: "{wisdom}"',
    '–ì–Ω–æ–º {gnome} –∏–∑ –•—Ä—É—Å—Ç–∞–ª—å–Ω—ã—Ö –ü–µ—â–µ—Ä —Å–æ–≤–µ—Ç—É–µ—Ç: "{wisdom}"',
    '–°–æ–≥–ª–∞—Å–Ω–æ —É—á–µ–Ω–∏—é –≥–Ω–æ–º–æ–≤-–∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤: "{wisdom}"',
    '–°—Ç–∞—Ä–µ–π—à–∏–Ω–∞ {gnome} –∑–∞–≤–µ—â–∞–ª: "{wisdom}"'
  ];

  static gnomeNames = [
    '–ë—Ä–∏–ª–ª–∏–∞–Ω –ó–≤–µ–∑–¥–æ—á–µ—Ç', '–ê–º–µ—Ç–∏—Å—Ç –ú—É–¥—Ä—ã–π', '–û–±—Å–∏–¥–∏–∞–Ω –¢–∞–π–Ω–æ–≤–µ–¥',
    '–ö–≤–∞—Ä—Ü –ü—Ä–æ–∑–æ—Ä–ª–∏–≤—ã–π', '–¢–æ–ø–∞–∑ –Ø—Å–Ω–æ–≤–∏–¥—è—â–∏–π', '–ò–∑—É–º—Ä—É–¥ –°–æ–≤–µ—Ç–Ω–∏–∫',
    '–†—É–±–∏–Ω –ü—Ä–æ—Ä–æ–∫', '–°–∞–ø—Ñ–∏—Ä –ú–µ–¥–∏—Ç–∞—Ç–æ—Ä', '–ì—Ä–∞–Ω–∞—Ç –¢–æ–ª–∫–æ–≤–∞—Ç–µ–ª—å'
  ];

  static wisdomByElement = {
    '–û–≥–æ–Ω—å': [
      '–ü–ª–∞–º—è —Å—Ç—Ä–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ –≥–æ—Ä–µ—Ç—å, –Ω–æ –Ω–µ —Å–∂–∏–≥–∞—Ç—å',
      '–ö—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–≤–æ–π –æ–≥–æ–Ω—å, —Ç–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–µ–π —Å—É–¥—å–±–æ–π',
      '–ò—Å–∫—Ä–∞ —Ä–µ—à–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –∑–∞–∂–µ—á—å –∫–æ—Å—Ç–µ—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π'
    ],
    '–í–æ–¥–∞': [
      '–í–æ–¥–∞ —Ç–æ—á–∏—Ç –∫–∞–º–µ–Ω—å –Ω–µ —Å–∏–ª–æ–π, –∞ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ–º',
      '–°–∞–º—ã–µ –≥–ª—É–±–æ–∫–∏–µ –≤–æ–¥—ã —Ç–µ–∫—É—Ç —Ç–∏—à–µ –≤—Å–µ–≥–æ',
      '–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Ç–µ—á–µ–Ω–∏—é - –æ–Ω–æ –∑–Ω–∞–µ—Ç –ø—É—Ç—å'
    ],
    '–í–æ–∑–¥—É—Ö': [
      '–ú—ã—Å–ª–∏ –ø–æ–¥–æ–±–Ω—ã –≤–µ—Ç—Ä—É - –Ω–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏—Ö –º—É–¥—Ä–æ',
      '–¢–æ—Ç, –∫—Ç–æ –≥–∏–±–æ–∫ –∫–∞–∫ –≤–µ—Ç–µ—Ä, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª–æ–º–∞–µ—Ç—Å—è',
      '–°–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö –∏–¥–µ–π –æ—Å–≤–µ–∂–∞–µ—Ç –∑–∞—Å—Ç–æ—è–≤—à—É—é—Å—è –∂–∏–∑–Ω—å'
    ],
    '–ó–µ–º–ª—è': [
      '–¢–µ—Ä–ø–µ–Ω–∏–µ –∏ —Ç—Ä—É–¥ –≤—Å–µ –ø–µ—Ä–µ—Ç—Ä—É—Ç, –∫–∞–∫ –≤–æ–¥–∞ –∫–∞–º–µ–Ω—å',
      '–ö—Ä–µ–ø–∫–∏–µ –∫–æ—Ä–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ—Ä–µ–≤—É –¥–æ—Å—Ç–∏—á—å –Ω–µ–±–µ—Å',
      '–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–∞–¥–∏ —Å–µ–º—è, –ø–æ—Ç–æ–º –∂–¥–∏ —É—Ä–æ–∂–∞—è'
    ]
  };

  static generate(card) {
    const template = this.wisdomTemplates[Math.floor(Math.random() * this.wisdomTemplates.length)];
    const gnome = this.gnomeNames[Math.floor(Math.random() * this.gnomeNames.length)];
    const wisdoms = this.wisdomByElement[card.element] || [];
    const wisdom = wisdoms[Math.floor(Math.random() * wisdoms.length)] || '–°–ª–µ–¥—É–π —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π —Ä–∞–∑—É–º';
    
    return template.replace('{gnome}', gnome).replace('{wisdom}', wisdom);
  }
}

// ===== –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–†–¢–ê–ú–ò =====
class DayCardManager {
  static getRandomCard() {
    const randomIndex = Math.floor(Math.random() * TAROT_DECK.length);
    const card = TAROT_DECK[randomIndex];
    
    return {
      ...card,
      drawnAt: new Date().toISOString(),
      id: `${card.id}_${Date.now()}`,
      personalizedMeaning: this.personalizeMeaning(card),
      personalizedAdvice: this.personalizeAdvice(card)
    };
  }

  static personalizeMeaning(card) {
    const personalizations = [
      `–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è, ${card.meaning.toLowerCase()}`,
      `–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å: ${card.meaning.toLowerCase()}`,
      `–≠–Ω–µ—Ä–≥–∏—è —ç—Ç–æ–≥–æ –¥–Ω—è –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ ${card.meaning.toLowerCase()}`
    ];
    
    return personalizations[Math.floor(Math.random() * personalizations.length)];
  }

  static personalizeAdvice(card) {
    const hour = new Date().getHours();
    let timeAdvice = '';
    
    if (hour < 12) {
      timeAdvice = '–° —É—Ç—Ä–∞ —Å—Ç–æ–∏—Ç ';
    } else if (hour < 17) {
      timeAdvice = '–í–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–Ω—è –≤–∞–∂–Ω–æ ';
    } else {
      timeAdvice = '–í–µ—á–µ—Ä–æ–º —Å–∞–º–æ–µ –≤—Ä–µ–º—è ';
    }
    
    return timeAdvice + card.advice.toLowerCase();
  }

  static getCachedCard() {
    const today = new Date().toISOString().split('T')[0];
    return loadDayCard(today);
  }

  static saveTodaysCard(cardData) {
    const today = new Date().toISOString().split('T')[0];
    saveDayCard(today, cardData);
  }
}

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢ –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ô –ö–ê–†–¢–´ =====
const AnimatedCard = React.memo(({ 
  card, 
  isRevealed, 
  isFlipping, 
  theme, 
  designTheme,
  onReveal 
}) => {
  const cardRef = useRef(null);

  const cardStyles = useMemo(() => {
    const elementColors = {
      '–û–≥–æ–Ω—å': ['#FF6B6B', '#FF8E53'],
      '–í–æ–¥–∞': ['#4ECDC4', '#44A08D'], 
      '–í–æ–∑–¥—É—Ö': ['#45B7D1', '#96C93D'],
      '–ó–µ–º–ª—è': ['#96CEB4', '#FFECD2']
    };

    const [color1, color2] = elementColors[card.element] || elementColors['–í–æ–∑–¥—É—Ö'];

    return {
      container: {
        position: 'relative',
        width: '100%',
        height: '400px',
        perspective: '1000px',
        cursor: !isRevealed ? 'pointer' : 'default'
      },

      card: {
        position: 'absolute',
        width: '100%',
        height: '100%',
        transformStyle: 'preserve-3d',
        transition: 'transform 0.8s cubic-bezier(0.4, 0, 0.2, 1)',
        transform: isFlipping ? 'rotateY(90deg)' : isRevealed ? 'rotateY(0deg)' : 'rotateY(0deg)'
      },

      cardBack: {
        position: 'absolute',
        width: '100%',
        height: '100%',
        borderRadius: '20px',
        background: designTheme === 'wooden' 
          ? 'linear-gradient(135deg, #8B4513, #CD853F, #D2B48C)'
          : `linear-gradient(135deg, ${color1}20, ${color2}10)`,
        backdropFilter: designTheme === 'glass' ? 'blur(16px)' : 'none',
        border: designTheme === 'wooden' 
          ? '3px solid #654321' 
          : `2px solid ${color1}40`,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        fontSize: '80px',
        color: designTheme === 'wooden' ? '#3E2723' : color1,
        backfaceVisibility: 'hidden',
        boxShadow: designTheme === 'wooden'
          ? 'inset 0 2px 0 0 rgba(255,255,255,0.3), 0 8px 24px rgba(0,0,0,0.25)'
          : `0 8px 32px ${color1}30`,
        transition: 'all 0.3s ease'
      },

      cardFront: {
        position: 'absolute',
        width: '100%',
        height: '100%',
        borderRadius: '20px',
        background: designTheme === 'wooden' 
          ? 'linear-gradient(135deg, #F5DEB3, #DDD8C7, #E6D7C3)'
          : `linear-gradient(135deg, ${color1}15, ${color2}05)`,
        backdropFilter: designTheme === 'glass' ? 'blur(16px)' : 'none',
        border: designTheme === 'wooden' 
          ? '3px solid #8B4513' 
          : `2px solid ${color1}40`,
        padding: '24px',
        transform: 'rotateY(180deg)',
        backfaceVisibility: 'hidden',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center',
        color: designTheme === 'wooden' ? '#3E2723' : theme.colors.text,
        boxShadow: designTheme === 'wooden'
          ? 'inset 0 2px 0 0 rgba(255,255,255,0.3), 0 8px 24px rgba(0,0,0,0.25)'
          : `0 8px 32px ${color1}30, inset 0 1px 0 rgba(255,255,255,0.2)`
      }
    };
  }, [card, isRevealed, isFlipping, theme, designTheme]);

  const handleCardClick = useCallback(() => {
    if (!isRevealed && !isFlipping && onReveal) {
      onReveal();
    }
  }, [isRevealed, isFlipping, onReveal]);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –º–∞—É–Ω—Ç–µ
  useEffect(() => {
    if (cardRef.current) {
      cardRef.current.style.opacity = '0';
      cardRef.current.style.transform = 'scale(0.8) rotateY(-180deg)';
      
      requestAnimationFrame(() => {
        cardRef.current.style.transition = 'all 0.8s cubic-bezier(0.4, 0, 0.2, 1)';
        cardRef.current.style.opacity = '1';
        cardRef.current.style.transform = 'scale(1) rotateY(0deg)';
      });
    }
  }, []);

  return (
    <div 
      ref={cardRef}
      style={cardStyles.container} 
      onClick={handleCardClick}
    >
      <div style={cardStyles.card}>
        {/* –ó–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫–∞—Ä—Ç—ã */}
        <div style={cardStyles.cardBack}>
          üÉè
        </div>

        {/* –ü–µ—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫–∞—Ä—Ç—ã */}
        <div style={cardStyles.cardFront}>
          <div style={{ 
            fontSize: '60px', 
            marginBottom: '16px',
            filter: `drop-shadow(0 0 20px ${card.colors[0]}80)`,
            animation: isRevealed ? 'cardGlow 2s ease-in-out infinite' : 'none'
          }}>
            {card.emoji}
          </div>

          <h3 style={{
            fontSize: '24px',
            fontWeight: '700',
            marginBottom: '8px',
            color: card.colors[0],
            textShadow: designTheme === 'wooden' ? '1px 1px 2px rgba(0,0,0,0.3)' : 'none'
          }}>
            {card.name}
          </h3>

          <div style={{
            display: 'flex',
            gap: '8px',
            marginBottom: '16px',
            flexWrap: 'wrap',
            justifyContent: 'center'
          }}>
            <span style={{
              background: `${card.colors[0]}20`,
              color: card.colors[0],
              padding: '4px 8px',
              borderRadius: '12px',
              fontSize: '11px',
              fontWeight: '600'
            }}>
              {card.element}
            </span>
            <span style={{
              background: card.energy === 'positive' ? '#4CAF5020' : '#FF980020',
              color: card.energy === 'positive' ? '#4CAF50' : '#FF9800',
              padding: '4px 8px',
              borderRadius: '12px',
              fontSize: '11px',
              fontWeight: '600'
            }}>
              {card.energy === 'positive' ? '–ü–æ–∑–∏—Ç–∏–≤' : '–ù–µ–π—Ç—Ä–∞–ª'}
            </span>
          </div>

          <p style={{
            fontSize: '12px',
            lineHeight: '1.4',
            maxHeight: '120px',
            overflow: 'hidden',
            margin: 0
          }}>
            {card.personalizedMeaning || card.meaning}
          </p>
        </div>
      </div>
    </div>
  );
});

AnimatedCard.displayName = 'AnimatedCard';

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====
const DayCardView = React.memo(({ 
  onAddToFavorites, 
  telegramApp, 
  designTheme = 'glass',
  autoReveal = true,
  cacheEnabled = true
}) => {
  const { theme } = useTheme();
  const { getDayCard } = useAPI();
  
  const [cardData, setCardData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isRevealed, setIsRevealed] = useState(false);
  const [isFlipping, setIsFlipping] = useState(false);
  const [shuffling, setShuffling] = useState(false);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
  const styles = useMemo(() => ({
    container: {
      padding: '20px',
      maxWidth: '500px',
      margin: '0 auto',
      fontFamily: designTheme === 'wooden' ? '"Times New Roman", Georgia, serif' : 'system-ui, sans-serif'
    },

    headerCard: {
      background: designTheme === 'wooden'
        ? 'linear-gradient(135deg, #8B4513, #CD853F)'
        : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: '#ffffff',
      textAlign: 'center',
      marginBottom: '20px',
      borderRadius: '16px',
      padding: '20px',
      position: 'relative',
      overflow: 'hidden'
    },

    loadingContainer: {
      textAlign: 'center',
      padding: '60px 20px'
    },

    errorContainer: {
      textAlign: 'center',
      padding: '40px 20px'
    },

    detailsCard: {
      marginTop: '20px',
      background: designTheme === 'wooden'
        ? 'rgba(139, 69, 19, 0.1)'
        : 'rgba(255, 255, 255, 0.1)',
      backdropFilter: 'blur(8px)',
      borderRadius: '16px',
      padding: '20px',
      border: designTheme === 'wooden'
        ? '1px solid rgba(139, 69, 19, 0.2)'
        : `1px solid ${theme.colors.border}`
    },

    buttonsContainer: {
      display: 'flex',
      gap: '12px',
      justifyContent: 'center',
      flexWrap: 'wrap',
      marginTop: '20px'
    }
  }), [theme, designTheme]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è
  const loadDayCard = useCallback(async () => {
    setLoading(true);
    setError(null);
    setIsRevealed(false);
    setShuffling(true);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
      if (cacheEnabled) {
        const cachedCard = DayCardManager.getCachedCard();
        if (cachedCard) {
          console.log('üì¶ –ö–∞—Ä—Ç–∞ –¥–Ω—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫–µ—à–∞');
          setCardData(cachedCard);
          setShuffling(false);
          
          if (autoReveal) {
            setTimeout(() => revealCard(), 1000);
          }
          setLoading(false);
          return;
        }
      }

      console.log('üÉè –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–Ω—è...');
      
      // –ò–º–∏—Ç–∞—Ü–∏—è "—Ç–∞—Å–æ–≤–∞–Ω–∏—è"
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å API –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      let card;
      try {
        const apiData = await getDayCard();
        card = apiData || DayCardManager.getRandomCard();
      } catch (apiError) {
        console.log('üé¥ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ');
        card = DayCardManager.getRandomCard();
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≥–Ω–æ–º—å—é –º—É–¥—Ä–æ—Å—Ç—å
      const enhancedCard = {
        ...card,
        gnomeWisdom: GnomeWisdomGenerator.generate(card),
        date: new Date().toLocaleDateString('ru-RU', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        })
      };

      setCardData(enhancedCard);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      if (cacheEnabled) {
        DayCardManager.saveTodaysCard(enhancedCard);
      }

      setShuffling(false);
      
      if (autoReveal) {
        setTimeout(() => revealCard(), 800);
      }

      console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è –≥–æ—Ç–æ–≤–∞:', enhancedCard.name);
      
    } catch (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è:', fetchError);
      setError(fetchError.message);
      setShuffling(false);
    } finally {
      setLoading(false);
    }
  }, [getDayCard, autoReveal, cacheEnabled]);

  // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
  const revealCard = useCallback(() => {
    if (isFlipping || isRevealed) return;
    
    setIsFlipping(true);
    
    // Haptic feedback
    try {
      telegramApp?.HapticFeedback?.impactOccurred('medium');
    } catch (error) {
      console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    setTimeout(() => {
      setIsRevealed(true);
      setIsFlipping(false);
    }, 400);
  }, [isFlipping, isRevealed, telegramApp]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const handleAddToFavorites = useCallback(() => {
    if (!cardData || !onAddToFavorites) return;
    
    const favoriteItem = {
      type: 'day_card',
      title: `–ö–∞—Ä—Ç–∞ –¥–Ω—è: ${cardData.name}`,
      content: cardData.personalizedMeaning || cardData.meaning,
      date: cardData.date,
      advice: cardData.personalizedAdvice || cardData.advice,
      cardData: cardData
    };
    
    onAddToFavorites(favoriteItem);
    
    // Haptic feedback
    try {
      telegramApp?.HapticFeedback?.notificationOccurred('success');
    } catch (error) {
      console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }, [cardData, onAddToFavorites, telegramApp]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    console.log('üÉè DayCardView: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω');
    loadDayCard();
  }, [loadDayCard]);

  // –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (loading || shuffling) {
    return (
      <div style={styles.container}>
        <div style={styles.headerCard}>
          <h1 style={{ margin: '0 0 8px 0', fontSize: '24px', fontWeight: '700' }}>
            üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è
          </h1>
          <p style={{ margin: 0, opacity: 0.9 }}>
            {shuffling ? '–¢–∞—Å—É–µ–º –∫–æ–ª–æ–¥—É...' : '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç...'}
          </p>
        </div>

        <div style={styles.loadingContainer}>
          <div style={{ 
            fontSize: '80px', 
            marginBottom: '20px',
            animation: 'cardSpin 2s linear infinite'
          }}>
            üÉè
          </div>
          <h3 style={{ marginBottom: '8px', color: theme.colors.text }}>
            {shuffling ? '–ì–Ω–æ–º—ã –≤—ã–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—É...' : '–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—É...'}
          </h3>
          <p style={{ color: theme.colors.textSecondary }}>
            –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –≤–æ–ø—Ä–æ—Å–µ
          </p>
        </div>
        
        <style>{`
          @keyframes cardSpin {
            from { transform: rotate(0deg) scale(1); }
            50% { transform: rotate(180deg) scale(1.1); }
            to { transform: rotate(360deg) scale(1); }
          }
        `}</style>
      </div>
    );
  }

  if (error) {
    return (
      <div style={styles.container}>
        <Card variant="error">
          <div style={styles.errorContainer}>
            <div style={{ fontSize: '64px', marginBottom: '20px' }}>‚ùå</div>
            <h3 style={{ color: theme.colors.error, marginBottom: '8px' }}>
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            </h3>
            <p style={{ marginBottom: '20px', textAlign: 'center', color: theme.colors.textSecondary }}>
              {error}
            </p>
            <Button onClick={loadDayCard}>
              üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  if (!cardData) {
    return (
      <div style={styles.container}>
        <Card>
          <div style={styles.loadingContainer}>
            <div style={{ fontSize: '64px', marginBottom: '20px' }}>üÉè</div>
            <h3>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç...</h3>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      {/* CSS –∞–Ω–∏–º–∞—Ü–∏–∏ */}
      <style>{`
        @keyframes cardGlow {
          0%, 100% { filter: drop-shadow(0 0 20px ${cardData.colors[0]}80); }
          50% { filter: drop-shadow(0 0 30px ${cardData.colors[0]}FF) brightness(1.2); }
        }
        
        @keyframes slideUp {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
      `}</style>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={styles.headerCard}>
        <h1 style={{ margin: '0 0 8px 0', fontSize: '24px', fontWeight: '700' }}>
          üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è
        </h1>
        <p style={{ margin: 0, opacity: 0.9, fontSize: '14px' }}>
          üìÖ {cardData.date}
        </p>
      </div>

      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ */}
      <AnimatedCard
        card={cardData}
        isRevealed={isRevealed}
        isFlipping={isFlipping}
        theme={theme}
        designTheme={designTheme}
        onReveal={revealCard}
      />

      {/* –î–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç—ã (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è) */}
      {isRevealed && (
        <div style={{
          ...styles.detailsCard,
          animation: 'slideUp 0.6s ease-out'
        }}>
          {/* –ó–Ω–∞—á–µ–Ω–∏–µ */}
          <div style={{ marginBottom: '16px' }}>
            <h4 style={{ 
              fontSize: '16px', 
              fontWeight: '700', 
              marginBottom: '8px',
              color: cardData.colors[0],
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              üîç –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            </h4>
            <p style={{ 
              fontSize: '14px', 
              lineHeight: '1.6',
              margin: 0,
              color: theme.colors.text
            }}>
              {cardData.personalizedMeaning}
            </p>
          </div>

          {/* –°–æ–≤–µ—Ç */}
          <div style={{ marginBottom: '16px' }}>
            <h4 style={{ 
              fontSize: '16px', 
              fontWeight: '700', 
              marginBottom: '8px',
              color: cardData.colors[1] || cardData.colors[0],
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              üí° –°–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å
            </h4>
            <p style={{ 
              fontSize: '14px', 
              lineHeight: '1.6',
              margin: 0,
              color: theme.colors.text
            }}>
              {cardData.personalizedAdvice}
            </p>
          </div>

          {/* –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ */}
          <div style={{ marginBottom: '16px' }}>
            <h4 style={{ 
              fontSize: '16px', 
              fontWeight: '700', 
              marginBottom: '8px',
              color: theme.colors.primary,
              display: 'flex',
              alignItems: 'center',
              gap: '8px'
            }}>
              üè∑Ô∏è –ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è
            </h4>
            <div style={{
              display: 'flex',
              flexWrap: 'wrap',
              gap: '6px'
            }}>
              {cardData.keywords.map((keyword, index) => (
                <span
                  key={index}
                  style={{
                    background: `${cardData.colors[0]}20`,
                    color: cardData.colors[0],
                    padding: '4px 8px',
                    borderRadius: '12px',
                    fontSize: '12px',
                    fontWeight: '600'
                  }}
                >
                  {keyword}
                </span>
              ))}
            </div>
          </div>

          {/* –ú—É–¥—Ä–æ—Å—Ç—å –≥–Ω–æ–º–æ–≤ */}
          {cardData.gnomeWisdom && (
            <div style={{
              background: 'linear-gradient(135deg, rgba(139, 195, 74, 0.2), rgba(139, 195, 74, 0.1))',
              borderRadius: '12px',
              padding: '16px',
              marginBottom: '16px',
              border: '1px solid rgba(139, 195, 74, 0.3)'
            }}>
              <h4 style={{ 
                fontSize: '16px', 
                fontWeight: '700', 
                marginBottom: '8px',
                color: '#2E7D0F',
                display: 'flex',
                alignItems: 'center',
                gap: '8px'
              }}>
                üßô‚Äç‚ôÇÔ∏è –ú—É–¥—Ä–æ—Å—Ç—å –≥–Ω–æ–º–æ–≤
              </h4>
              <p style={{ 
                fontSize: '14px', 
                lineHeight: '1.5',
                margin: 0,
                fontStyle: 'italic',
                color: theme.colors.textSecondary
              }}>
                {cardData.gnomeWisdom}
              </p>
            </div>
          )}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      {isRevealed && (
        <div style={styles.buttonsContainer}>
          <Button 
            variant="primary"
            onClick={loadDayCard}
          >
            üîÑ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞
          </Button>
          
          <Button 
            variant="secondary"
            onClick={handleAddToFavorites}
          >
            ‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
          </Button>
        </div>
      )}
    </div>
  );
});

DayCardView.displayName = 'DayCardView';

export default DayCardView;
