// src/components/DayCardView.js - –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ PNG –æ–±–ª–æ–∂–∫–∞
import React, { useState, useEffect } from 'react';
import { useTheme } from '../contexts/ThemeContext';
import { useAstrologyData } from '../hooks/useAstrologyData';
import Card from './UI/Card';
import Button from './UI/Button';
import telegramBot from '../services/telegramBot'; // ü§ñ TELEGRAM BOT INTEGRATION


const DayCardView = ({ onBack, onAddToFavorites, selectedSign = null }) => {
  const { theme, styles, createGradientStyle } = useTheme();
  const [cardData, setCardData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isRevealed, setIsRevealed] = useState(false);
  const [isFlipping, setIsFlipping] = useState(false);
  const [showCard, setShowCard] = useState(false);
  const [showDetails, setShowDetails] = useState(false);
  const [isSharing, setIsSharing] = useState(false); // üì≤ –°–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ—Ä–∏–Ω–≥–∞

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç —Ç–∞—Ä–æ
  const mockTarotCards = [
    {
      id: 1,
      name: '–ú–∞–≥',
      emoji: 'üßô‚Äç‚ôÇÔ∏è',
      element: '–í–æ–∑–¥—É—Ö',
      meaning: '–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏. –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!',
      advice: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –º—É–¥—Ä–æ. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏.',
      gnomeWisdom: '–ì–Ω–æ–º-–º—É–¥—Ä–µ—Ü –≥–æ–≤–æ—Ä–∏—Ç: "–ú–∞–≥–∏—è –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ - —Å –≤–µ–ª–∏–∫–æ–π —Å–∏–ª–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–µ–ª–∏–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å."',
      keywords: ['–°–∏–ª–∞ –≤–æ–ª–∏', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–ù–∞–≤—ã–∫–∏', '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'],
      colors: ['#667eea', '#764ba2']
    },
    {
      id: 2,
      name: '–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞',
      emoji: 'üîÆ',
      element: '–í–æ–¥–∞',
      meaning: '–î–µ–Ω—å –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –≥–ª—É–±–æ–∫–∏—Ö –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–π. –°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ "—è".',
      advice: '–ú–µ–¥–∏—Ç–∏—Ä—É–π—Ç–µ –∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç–∏. –û—Ç–≤–µ—Ç—ã —É–∂–µ –≤–Ω—É—Ç—Ä–∏ –≤–∞—Å.',
      gnomeWisdom: '–ì–Ω–æ–º-–ø—Ä–æ–≤–∏–¥–µ—Ü —à–µ–ø—á–µ—Ç: "–¢–∏—à–∏–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –≥—Ä–æ–º—á–µ —Å–ª–æ–≤. –í –ø–æ–∫–æ–µ –Ω–∞–π–¥–µ—Ç–µ –∏—Å—Ç–∏–Ω—É."',
      keywords: ['–ò–Ω—Ç—É–∏—Ü–∏—è', '–ú—É–¥—Ä–æ—Å—Ç—å', '–¢–∞–π–Ω—ã', '–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ'],
      colors: ['#4ecdc4', '#44a08d']
    },
    {
      id: 3,
      name: '–°–æ–ª–Ω—Ü–µ',
      emoji: '‚òÄÔ∏è',
      element: '–û–≥–æ–Ω—å',
      meaning: '–î–µ–Ω—å —Ä–∞–¥–æ—Å—Ç–∏, —É—Å–ø–µ—Ö–∞ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏! –í—Å–µ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ.',
      advice: '–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–æ–º–µ–Ω—Ç–æ–º –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Å–≤–µ—Ç–æ–º —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏.',
      gnomeWisdom: '–°–æ–ª–Ω–µ—á–Ω—ã–π –≥–Ω–æ–º —É–ª—ã–±–∞–µ—Ç—Å—è: "–í–∞—à —Å–≤–µ—Ç –æ–∑–∞—Ä—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∞—à –ø—É—Ç—å, –Ω–æ –∏ –ø—É—Ç—å –¥—Ä—É–≥–∏—Ö!"',
      keywords: ['–†–∞–¥–æ—Å—Ç—å', '–£—Å–ø–µ—Ö', '–≠–Ω–µ—Ä–≥–∏—è', '–û–ø—Ç–∏–º–∏–∑–º'],
      colors: ['#ff6b6b', '#ff8e53']
    },
    {
      id: 4,
      name: '–õ—É–Ω–∞',
      emoji: 'üåô',
      element: '–í–æ–¥–∞',
      meaning: '–î–µ–Ω—å –∑–∞–≥–∞–¥–æ–∫ –∏ —Å–∫—Ä—ã—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –ù–µ –≤—Å–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–º, —á–µ–º –∫–∞–∂–µ—Ç—Å—è.',
      advice: '–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–Ω–∞–∫–∞–º –∏ —Å–∏–º–≤–æ–ª–∞–º. –î–æ–≤–µ—Ä—è–π—Ç–µ –∏–Ω—Ç—É–∏—Ü–∏–∏ –±–æ–ª—å—à–µ, —á–µ–º –ª–æ–≥–∏–∫–µ.',
      gnomeWisdom: '–õ—É–Ω–Ω—ã–π –≥–Ω–æ–º —à–µ–ø—á–µ—Ç: "–í —Ç–µ–Ω—è—Ö —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–∞—Ö–∏, —Ç–∞–∫ –∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞. –í—ã–±–∏—Ä–∞–π—Ç–µ –º—É–¥—Ä–æ."',
      keywords: ['–ò–ª–ª—é–∑–∏–∏', '–ò–Ω—Ç—É–∏—Ü–∏—è', '–¢–∞–π–Ω—ã', '–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ'],
      colors: ['#a8e6cf', '#7fcdcd']
    },
    {
      id: 5,
      name: '–ó–≤–µ–∑–¥–∞',
      emoji: '‚≠ê',
      element: '–í–æ–∑–¥—É—Ö',
      meaning: '–î–µ–Ω—å –Ω–∞–¥–µ–∂–¥—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è. –í–∞—à–∏ –º–µ—á—Ç—ã –±–ª–∏–∂–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è.',
      advice: '–°–ª–µ–¥—É–π—Ç–µ –∑–∞ —Å–≤–æ–µ–π –∑–≤–µ–∑–¥–æ–π –∏ –Ω–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å. –ü–æ–º–æ—â—å –ø—Ä–∏–¥–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ.',
      gnomeWisdom: '–ó–≤–µ–∑–¥–Ω—ã–π –≥–Ω–æ–º –≥–æ–≤–æ—Ä–∏—Ç: "–ö–∞–∂–¥—ã–π –≥–Ω–æ–º –∏–º–µ–µ—Ç —Å–≤–æ—é –ø—É—Ç–µ–≤–æ–¥–Ω—É—é –∑–≤–µ–∑–¥—É. –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é!"',
      keywords: ['–ù–∞–¥–µ–∂–¥–∞', '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '–ú–µ—á—Ç—ã', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'],
      colors: ['#ffb6c1', '#ffa07a']
    }
  ];

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–Ω—è
  const getTodayCard = () => {
    const today = new Date();
    const seed = today.getDate() + today.getMonth() * 31 + today.getFullYear();
    const cardIndex = seed % mockTarotCards.length;
    return {
      card: mockTarotCards[cardIndex],
      date: today.toLocaleDateString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      })
    };
  };

  // –°—Ç–∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const dayCardStyles = {
    container: {
      padding: theme.spacing.lg,
      maxWidth: '500px',
      margin: '0 auto',
      minHeight: 'calc(100vh - 120px)',
      position: 'relative'
    },

    header: {
      textAlign: 'center',
      marginBottom: theme.spacing.xl,
      opacity: showCard ? 1 : 0,
      transform: showCard ? 'translateY(0)' : 'translateY(-20px)',
      transition: 'all 0.8s ease'
    },

    title: {
      ...styles.heading,
      fontSize: theme.typography.sizes.title,
      color: theme.colors.text,
      marginBottom: theme.spacing.sm
    },

    subtitle: {
      fontSize: theme.typography.sizes.md,
      color: theme.colors.textSecondary,
      margin: 0
    },

    cardContainer: {
      perspective: '1000px',
      marginBottom: theme.spacing.xl,
      opacity: showCard ? 1 : 0,
      transform: showCard ? 'translateY(0) scale(1)' : 'translateY(30px) scale(0.95)',
      transition: 'all 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)',
      transitionDelay: '0.3s'
    },

    cardWrapper: {
      position: 'relative',
      width: '100%',
      height: '400px',
      transformStyle: 'preserve-3d',
      transform: isFlipping ? 'rotateY(180deg)' : 'rotateY(0deg)',
      transition: 'transform 1s cubic-bezier(0.4, 0, 0.2, 1)',
      cursor: !isRevealed ? 'pointer' : 'default',
      filter: isFlipping ? 'brightness(1.2)' : 'brightness(1)',
      boxShadow: isRevealed 
        ? `0 20px 60px rgba(244, 197, 66, 0.3), 0 10px 30px rgba(0, 0, 0, 0.2)`
        : '0 10px 30px rgba(0, 0, 0, 0.3)'
    },

    cardFace: {
      position: 'absolute',
      width: '100%',
      height: '100%',
      backfaceVisibility: 'hidden',
      borderRadius: theme.borderRadius.lg,
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    },

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–¢–ù–ê–Ø –°–¢–û–†–û–ù–ê –° PNG
    cardBack: {
      background: createGradientStyle(['#1a1a2e', '#2d2d44'], '135deg').background,
      border: `3px solid ${theme.colors.primary}`,
      boxShadow: `0 15px 40px ${theme.colors.primary}30, inset 0 2px 4px rgba(255,255,255,0.1)`,
      position: 'relative',
      overflow: 'hidden'
    },

    // ‚úÖ PNG –û–ë–õ–û–ñ–ö–ê –í–ú–ï–°–¢–û –£–ó–û–†–ê
    cardBackImage: {
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%',
      objectFit: 'cover',
      borderRadius: theme.borderRadius.lg,
      opacity: 0.7,
      transition: 'all 0.5s ease'
    },

    cardBackOverlay: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: `linear-gradient(135deg, 
        ${theme.colors.primary}20 0%, 
        transparent 50%, 
        ${theme.colors.secondary}20 100%)`,
      mixBlendMode: 'overlay'
    },

    cardBackContent: {
      position: 'relative',
      zIndex: 3,
      textAlign: 'center',
      color: '#ffffff',
      padding: theme.spacing.xl
    },

    cardBackIcon: {
      fontSize: '4rem',
      marginBottom: theme.spacing.md,
      filter: 'drop-shadow(0 6px 12px rgba(244, 197, 66, 0.5))',
      animation: 'pulseGlow 2s ease-in-out infinite'
    },

    cardFront: {
      transform: 'rotateY(180deg)',
      padding: 0,
      overflow: 'hidden',
      background: 'transparent'
    },

    cardFrontContent: {
      height: '100%',
      position: 'relative',
      borderRadius: theme.borderRadius.lg,
      overflow: 'hidden'
    },

    cardGradient: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      zIndex: 1
    },

    cardOverlay: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: 'rgba(0,0,0,0.3)',
      zIndex: 2
    },

    cardContent: {
      position: 'relative',
      zIndex: 3,
      height: '100%',
      padding: theme.spacing.xl,
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
      textAlign: 'center',
      color: '#ffffff'
    },

    cardEmoji: {
      fontSize: '4.5rem',
      marginBottom: theme.spacing.lg,
      filter: 'drop-shadow(0 6px 12px rgba(0,0,0,0.4))',
      animation: isRevealed ? 'cardSparkle 3s ease-in-out infinite' : 'none',
      transform: isRevealed ? 'scale(1)' : 'scale(0.8)',
      transition: 'transform 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55)'
    },

    cardName: {
      fontSize: theme.typography.sizes.xl,
      fontWeight: theme.typography.weights.bold,
      marginBottom: theme.spacing.md,
      textShadow: '2px 2px 8px rgba(0,0,0,0.7)',
      transform: isRevealed ? 'translateY(0)' : 'translateY(10px)',
      opacity: isRevealed ? 1 : 0,
      transition: 'all 0.6s ease 0.3s'
    },

    cardElement: {
      fontSize: theme.typography.sizes.sm,
      opacity: isRevealed ? 0.9 : 0,
      marginBottom: theme.spacing.lg,
      textShadow: '1px 1px 4px rgba(0,0,0,0.7)',
      transition: 'opacity 0.6s ease 0.5s'
    },

    // ‚úÖ –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ï –ü–û–Ø–í–õ–ï–ù–ò–ï –î–ï–¢–ê–õ–ï–ô
    detailsContainer: {
      display: 'grid',
      gap: theme.spacing.lg,
      opacity: showDetails ? 1 : 0,
      transform: showDetails ? 'translateY(0)' : 'translateY(20px)',
      transition: 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)',
      transitionDelay: '0.2s'
    },

    sectionTitle: {
      fontSize: theme.typography.sizes.md,
      fontWeight: theme.typography.weights.semibold,
      color: theme.colors.text,
      marginBottom: theme.spacing.sm,
      display: 'flex',
      alignItems: 'center',
      gap: theme.spacing.xs
    },

    sectionText: {
      fontSize: theme.typography.sizes.sm,
      lineHeight: 1.6,
      color: theme.colors.text,
      margin: 0
    },

    keywordsContainer: {
      display: 'flex',
      flexWrap: 'wrap',
      gap: theme.spacing.xs,
      marginTop: theme.spacing.md
    },

    keyword: {
      padding: `${theme.spacing.xs} ${theme.spacing.sm}`,
      backgroundColor: `${theme.colors.primary}20`,
      color: theme.colors.primary,
      borderRadius: theme.borderRadius.lg,
      fontSize: theme.typography.sizes.xs,
      fontWeight: theme.typography.weights.medium,
      border: `1px solid ${theme.colors.primary}40`,
      opacity: showDetails ? 1 : 0,
      transform: showDetails ? 'scale(1)' : 'scale(0.9)',
      transition: 'all 0.4s ease',
      transitionDelay: `${Math.random() * 0.5}s`
    },

    actionsContainer: {
      display: 'flex',
      gap: theme.spacing.md,
      justifyContent: 'center',
      marginTop: theme.spacing.xl,
      opacity: showDetails ? 1 : 0,
      transform: showDetails ? 'translateY(0)' : 'translateY(20px)',
      transition: 'all 0.6s ease',
      transitionDelay: '0.5s'
    },

    loadingContainer: {
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      padding: theme.spacing.xxl,
      textAlign: 'center'
    },

    loadingIcon: {
      fontSize: '4rem',
      marginBottom: theme.spacing.lg,
      animation: 'magicPulse 2s infinite'
    }
  };

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ï CSS –ê–ù–ò–ú–ê–¶–ò–ò
  useEffect(() => {
    if (typeof document !== 'undefined') {
      const existingStyle = document.getElementById('day-card-animations');
      if (!existingStyle) {
        const style = document.createElement('style');
        style.id = 'day-card-animations';
        style.textContent = `
          @keyframes magicPulse {
            0%, 100% { 
              opacity: 0.6; 
              transform: scale(1) rotate(0deg); 
            }
            50% { 
              opacity: 1; 
              transform: scale(1.15) rotate(5deg); 
            }
          }
          
          @keyframes pulseGlow {
            0%, 100% { 
              filter: drop-shadow(0 6px 12px rgba(244, 197, 66, 0.5));
              transform: scale(1);
            }
            50% { 
              filter: drop-shadow(0 10px 20px rgba(244, 197, 66, 0.8));
              transform: scale(1.05);
            }
          }
          
          @keyframes cardSparkle {
            0%, 100% { 
              filter: drop-shadow(0 6px 12px rgba(0,0,0,0.4));
            }
            25% { 
              filter: drop-shadow(0 8px 16px rgba(244, 197, 66, 0.6));
            }
            50% { 
              filter: drop-shadow(0 10px 20px rgba(255, 255, 255, 0.4));
            }
            75% { 
              filter: drop-shadow(0 8px 16px rgba(108, 92, 231, 0.6));
            }
          }
          
          @keyframes slideInUp {
            0% { 
              opacity: 0; 
              transform: translateY(30px) scale(0.95); 
            }
            100% { 
              opacity: 1; 
              transform: translateY(0) scale(1); 
            }
          }

          @keyframes fadeInScale {
            0% { 
              opacity: 0; 
              transform: scale(0.8) rotate(-5deg); 
            }
            100% { 
              opacity: 1; 
              transform: scale(1) rotate(0deg); 
            }
          }
        `;
        document.head.appendChild(style);
      }
    }
  }, []);

  // ‚úÖ –ü–û–≠–¢–ê–ü–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –° –ê–ù–ò–ú–ê–¶–ò–ï–ô
  useEffect(() => {
    const loadDayCard = async () => {
      setLoading(true);
      setError(null);
      setIsRevealed(false);
      setCardData(null);
      setShowCard(false);
      setShowDetails(false);
      
      try {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const todayCard = getTodayCard();
        setCardData(todayCard);
        
        // –ü–æ—ç—Ç–∞–ø–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        setTimeout(() => setShowCard(true), 300);
        setTimeout(() => revealCard(), 1500);
        
      } catch (fetchError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è:', fetchError);
        setError(fetchError.message);
      } finally {
        setLoading(false);
      }
    };

    loadDayCard();
  }, []);

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –†–ê–°–ö–†–´–¢–ò–Ø
  const revealCard = () => {
    if (isFlipping) return;
    
    setIsFlipping(true);
    
    // Haptic feedback –≤ –Ω–∞—á–∞–ª–µ
    if (window.Telegram?.WebApp?.HapticFeedback) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('light');
    }
    
    setTimeout(() => {
      setIsRevealed(true);
      setIsFlipping(false);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => setShowDetails(true), 600);
      
      // Haptic feedback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
      }
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const handleAddToFavorites = () => {
    if (cardData && onAddToFavorites) {
      const favoriteItem = {
        type: 'day-card',
        id: `day-card-${new Date().toDateString()}`,
        title: `–ö–∞—Ä—Ç–∞ –¥–Ω—è: ${cardData.card.name}`,
        content: cardData.card.meaning,
        date: cardData.date,
        advice: cardData.card.advice,
        cardName: cardData.card.name,
        cardEmoji: cardData.card.emoji
      };
      
      onAddToFavorites(favoriteItem);
      
      if (window.Telegram?.WebApp?.HapticFeedback) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
      }
      
      if (window.Telegram?.WebApp?.showAlert) {
        window.Telegram.WebApp.showAlert(`–ö–∞—Ä—Ç–∞ "${cardData.card.name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê`);
      }
    }
  };

  // üì≤ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
  const handleShareToTelegram = async () => {
    if (!cardData || isSharing) return;
    
    setIsSharing(true);
    
    try {
      const cardForShare = {
        title: cardData.card.name,
        text: cardData.card.meaning,
        date: cardData.date
      };
      
      const success = await telegramBot.shareDayCardToTelegram(cardForShare);
      
      if (success) {
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram');
      } else {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    } finally {
      setIsSharing(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  const handleNewCard = () => {
    setCardData(null);
    setIsRevealed(false);
    setIsFlipping(false);
    setShowCard(false);
    setShowDetails(false);
    
    setTimeout(() => {
      const newCard = getTodayCard();
      setCardData(newCard);
      setTimeout(() => setShowCard(true), 200);
      setTimeout(revealCard, 1200);
    }, 500);
  };

  if (loading) {
    return (
      <div style={dayCardStyles.container}>
        
        
        <div style={dayCardStyles.loadingContainer}>
          <div style={dayCardStyles.loadingIcon}>üÉè</div>
          <h3 style={{ 
            color: theme.colors.primary, 
            marginBottom: theme.spacing.sm,
            animation: 'fadeInScale 0.8s ease-out'
          }}>
            –ì–Ω–æ–º—ã –≤—ã–±–∏—Ä–∞—é—Ç –¥–ª—è –≤–∞—Å –æ—Å–æ–±–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
          </h3>
          <p style={{ 
            color: theme.colors.textSecondary,
            animation: 'fadeInScale 0.8s ease-out 0.3s',
            animationFillMode: 'both'
          }}>
            üîÆ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏...
          </p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={dayCardStyles.container}>
        
        
        <div style={dayCardStyles.loadingContainer}>
          <div style={{ fontSize: '4rem', marginBottom: theme.spacing.lg }}>üòî</div>
          <h3 style={{ color: theme.colors.danger, marginBottom: theme.spacing.sm }}>
            –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
          </h3>
          <p style={{ color: theme.colors.textSecondary, marginBottom: theme.spacing.lg }}>
            {error}
          </p>
          <Button variant="primary" onClick={() => window.location.reload()}>
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    );
  }

  if (!cardData) {
    return (
      <div style={dayCardStyles.container}>
        
        <div style={dayCardStyles.loadingContainer}>
          <div style={dayCardStyles.loadingIcon}>üÉè</div>
          <p style={{ color: theme.colors.textSecondary }}>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É...</p>
        </div>
      </div>
    );
  }

  const cardGradient = createGradientStyle(cardData.card.colors, '135deg');

  return (
    <div style={dayCardStyles.container}>
      
      
      {/* ‚úÖ –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ì–û–õ–û–í–û–ö */}
      <div style={dayCardStyles.header}>
        <h1 style={dayCardStyles.title}>üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è</h1>
        <p style={dayCardStyles.subtitle}>
          {cardData.date}
        </p>
      </div>

      {/* ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–ê–†–¢–ê –° PNG –û–ë–õ–û–ñ–ö–û–ô */}
      <div style={dayCardStyles.cardContainer}>
        <div 
          style={dayCardStyles.cardWrapper}
          onClick={!isRevealed ? revealCard : undefined}
        >
          {/* ‚úÖ –û–ë–†–ê–¢–ù–ê–Ø –°–¢–û–†–û–ù–ê –° PNG */}
          <div style={{ ...dayCardStyles.cardFace, ...dayCardStyles.cardBack }}>
            {/* PNG –æ–±–ª–æ–∂–∫–∞ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å */}
            <img
              src={`${process.env.PUBLIC_URL || ''}/assets/tarot-card-back.png`}
              alt="–û–±–ª–æ–∂–∫–∞ –∫–∞—Ä—Ç—ã –¥–Ω—è"
              style={dayCardStyles.cardBackImage}
              onError={(e) => {
                // Fallback –µ—Å–ª–∏ PNG –Ω–µ –Ω–∞–π–¥–µ–Ω
                e.target.style.display = 'none';
              }}
            />
            <div style={dayCardStyles.cardBackOverlay} />
            
            <div style={dayCardStyles.cardBackContent}>
              <h3 style={{ 
                fontSize: theme.typography.sizes.lg,
                marginBottom: theme.spacing.sm,
                textShadow: '2px 2px 6px rgba(0,0,0,0.8)'
              }}>
                
              </h3>
              <p style={{ 
                fontSize: theme.typography.sizes.sm,
                opacity: 0.9,
                textShadow: '1px 1px 4px rgba(0,0,0,0.8)'
              }}>
                {!isRevealed ? '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å' : ''}
              </p>
            </div>
          </div>

          {/* –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫–∞—Ä—Ç—ã */}
          <div style={{ ...dayCardStyles.cardFace, ...dayCardStyles.cardFront }}>
            <div style={dayCardStyles.cardFrontContent}>
              <div style={{ ...dayCardStyles.cardGradient, ...cardGradient }} />
              <div style={dayCardStyles.cardOverlay} />
              
              <div style={dayCardStyles.cardContent}>
                <div style={dayCardStyles.cardEmoji}>
                  {cardData.card.emoji}
                </div>
                <h2 style={dayCardStyles.cardName}>
                  {cardData.card.name}
                </h2>
                <p style={dayCardStyles.cardElement}>
                  –°—Ç–∏—Ö–∏—è: {cardData.card.element}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* ‚úÖ –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–´–ï –î–ï–¢–ê–õ–ò */}
      {isRevealed && (
        <div style={dayCardStyles.detailsContainer}>
          <Card padding="lg">
            <h3 style={dayCardStyles.sectionTitle}>
              <span>–ó–Ω–∞—á–µ–Ω–∏–µ</span>
            </h3>
            <p style={dayCardStyles.sectionText}>
              {cardData.card.meaning}
            </p>
          </Card>

          <Card 
            padding="lg"
            style={{
              background: `linear-gradient(135deg, ${theme.colors.primary}15, ${theme.colors.secondary}15)`,
              border: `1px solid ${theme.colors.primary}30`
            }}
          >
            <h3 style={dayCardStyles.sectionTitle}>
              <span>üí°</span>
              <span>–°–æ–≤–µ—Ç –¥–Ω—è</span>
            </h3>
            <p style={dayCardStyles.sectionText}>
              {cardData.card.advice}
            </p>
          </Card>

          <Card 
            padding="lg"
            style={{
              background: `linear-gradient(135deg, ${theme.colors.secondary}15, ${theme.colors.primary}15)`,
              border: `1px solid ${theme.colors.secondary}30`
            }}
          >
            <h3 style={dayCardStyles.sectionTitle}>
              <span>üßô‚Äç‚ôÇÔ∏è</span>
              <span>–ú—É–¥—Ä–æ—Å—Ç—å –≥–Ω–æ–º–∞</span>
            </h3>
            <p style={{
              ...dayCardStyles.sectionText,
              fontStyle: 'italic'
            }}>
              {cardData.card.gnomeWisdom}
            </p>
          </Card>

          <Card padding="lg">
            <h3 style={dayCardStyles.sectionTitle}>
              <span>üè∑Ô∏è</span>
              <span>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è</span>
            </h3>
            <div style={dayCardStyles.keywordsContainer}>
              {cardData.card.keywords.map((keyword, index) => (
                <span key={index} style={dayCardStyles.keyword}>
                  {keyword}
                </span>
              ))}
            </div>
          </Card>
        </div>
      )}

      {/* ‚úÖ –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–´–ï –ö–ù–û–ü–ö–ò –î–ï–ô–°–¢–í–ò–ô */}
      {isRevealed && (
        <div style={dayCardStyles.actionsContainer}>
          <Button 
            variant="primary" 
            onClick={handleAddToFavorites}
            icon="‚≠ê"
          >
            –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
          </Button>
          
          {/* üì≤ –ö–ù–û–ü–ö–ê –û–¢–ü–†–ê–í–ö–ò –í TELEGRAM */}
          <Button 
            variant="outline" 
            onClick={handleShareToTelegram}
            disabled={isSharing}
            icon={isSharing ? "üîÑ" : "üì≤"}
            style={{
              borderColor: '#0088cc',
              color: '#0088cc',
              background: isSharing ? 'rgba(0, 136, 204, 0.1)' : 'transparent'
            }}
          >
            {isSharing ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram'}
          </Button>
          
          <Button 
            variant="outline" 
            onClick={handleNewCard}
            icon="üîÑ"
          >
            –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞
          </Button>
        </div>
      )}
    </div>
  );
};

export default DayCardView;
