import React, { useState, useEffect, useRef } from 'react';
import { useAPI } from '../hooks/useAPI';
import { saveToCache, loadFromCache } from '../utils/cache';

function MoonView({ onBack, onAddToFavorites, telegramApp }) {
  const { getMoonData, loading, error, clearError } = useAPI();
  const [moonData, setMoonData] = useState(null);
  const [selectedDay, setSelectedDay] = useState(0);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [moonAnimation, setMoonAnimation] = useState(false);
  const loadingTimeoutRef = useRef(null);
  const hasLoadedRef = useRef(false);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 // –í useEffect –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞:
// –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ MoonView.js –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:
useEffect(() => {
  // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
  const interval = setInterval(() => {
    getMoonData();
  }, 6 * 60 * 60 * 1000);
  
  return () => clearInterval(interval);
}, []);

  const cacheKey = 'moon_data';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (–∞–∫—Ç—É–∞–ª–µ–Ω 1 —á–∞—Å)
  const cachedData = loadFromCache(cacheKey);
  if (cachedData) {
    const cacheAge = Date.now() - (cachedData.timestamp || 0);
    if (cacheAge < 3600000) { // 1 —á–∞—Å
      console.log('‚úÖ –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞ (–∞–∫—Ç—É–∞–ª—å–Ω—ã)');
      setMoonData(cachedData);
      hasLoadedRef.current = true;
      setTimeout(() => setMoonAnimation(true), 500);
      return;
    } else {
      console.log('üóëÔ∏è –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è–µ–º');
      localStorage.removeItem('gnome_cache_moon_data');
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  loadingTimeoutRef.current = setTimeout(async () => {
    try {
      clearError();
      console.log('üåô –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      const data = await getMoonData();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à —Å timestamp
      const dataWithTimestamp = {
        ...data,
        timestamp: Date.now()
      };
      
      saveToCache(cacheKey, dataWithTimestamp);
      setMoonData(dataWithTimestamp);
      hasLoadedRef.current = true;
      
      setTimeout(() => setMoonAnimation(true), 500);
      
      if (telegramApp?.HapticFeedback) {
        try {
          telegramApp.HapticFeedback.notificationOccurred('success');
        } catch (e) {
          console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      }
      
      console.log('‚úÖ –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', err);
      
      if (telegramApp?.HapticFeedback) {
        try {
          telegramApp.HapticFeedback.notificationOccurred('error');
        } catch (e) {
          console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      }
    }
  }, 300);

  return () => {
    if (loadingTimeoutRef.current) {
      clearTimeout(loadingTimeoutRef.current);
    }
  };
}, [getMoonData, clearError, telegramApp]);


  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const handleAddToFavorites = () => {
    if (moonData && onAddToFavorites) {
      const favoriteItem = {
        id: Date.now(),
        type: 'moon-phase',
        title: `üåô ${moonData.current.phase}`,
        content: moonData.current.advice.text,
        date: new Date().toLocaleDateString('ru-RU'),
        source: moonData.source || 'offline'
      };
      
      onAddToFavorites(favoriteItem);
      
      if (telegramApp) {
        telegramApp.showAlert('‚ù§Ô∏è –õ—É–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
      } else {
        alert('‚ù§Ô∏è –õ—É–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
      }
      
      if (telegramApp?.HapticFeedback) {
        try {
          telegramApp.HapticFeedback.impactOccurred('light');
        } catch (e) {
          console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
        }
      }
    }
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
  const handleRefresh = async () => {
    try {
      hasLoadedRef.current = false;
      clearError();
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      localStorage.removeItem('gnome_cache_moon_data');
      
      const data = await getMoonData();
      const dataWithTimestamp = {
        ...data,
        timestamp: new Date().toISOString()
      };
      
      saveToCache('moon_data', dataWithTimestamp);
      setMoonData(dataWithTimestamp);
      hasLoadedRef.current = true;
      
      if (telegramApp?.HapticFeedback) {
        try {
          telegramApp.HapticFeedback.impactOccurred('medium');
        } catch (e) {
          console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', err);
      hasLoadedRef.current = true;
    }
  };

  // –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  const handleSelectDay = (index) => {
    setSelectedDay(index);
    if (telegramApp?.HapticFeedback) {
      try {
        telegramApp.HapticFeedback.selectionChanged();
      } catch (e) {
        console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
      }
    }
  };

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª—É–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  const handleShare = () => {
    if (moonData && telegramApp) {
      const shareText = `üåô –°–µ–≥–æ–¥–Ω—è ${moonData.current.phase} (${moonData.current.illumination}% –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏)\n\n${moonData.current.advice.text}\n\nüßô‚Äç‚ôÇÔ∏è #–ì–Ω–æ–º–∏–π–ì–æ—Ä–æ—Å–∫–æ–ø #–õ—É–Ω–Ω—ã–π–ö–∞–ª–µ–Ω–¥–∞—Ä—å`;
      
      telegramApp.sendData(JSON.stringify({
        action: 'share_moon_phase',
        phase: moonData.current.phase,
        text: moonData.current.advice.text
      }));
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è –ª—É–Ω—ã
  const getMoonClass = () => {
    if (!moonData) return 'moon-new';
    
    const phase = moonData.current.phase;
    const classMap = {
      '–ù–æ–≤–æ–ª—É–Ω–∏–µ': 'moon-new',
      '–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞': 'moon-waxing-crescent',
      '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å': 'moon-first-quarter',
      '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞': 'moon-waxing-gibbous',
      '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ': 'moon-full',
      '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞': 'moon-waning-gibbous',
      '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å': 'moon-last-quarter',
      '–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞': 'moon-waning-crescent'
    };
    
    return classMap[phase] || 'moon-new';
  };

  return (
    <div className="moon-view content-enter">
      <div className="card">
        <div className="content-header">
          <h3 className="content-title">üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</h3>
          {!isOnline && (
            <div className="offline-indicator">
              üìµ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            </div>
          )}
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {loading && (
          <div className="loading-container">
            <div className="loading-indicator">
              –ì–Ω–æ–º-–∞—Å—Ç—Ä–æ–Ω–æ–º –∏–∑—É—á–∞–µ—Ç –ª—É–Ω—É...
            </div>
            <p>–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
            <div className="loading-moon">
              <div className="moon-orbit">
                <div className="moon-loading">üåô</div>
              </div>
            </div>
          </div>
        )}

        {/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {error && !loading && (
          <div className="error-container">
            <div className="error-icon">üåô</div>
            <h4>–õ—É–Ω–∞ —Å–∫—Ä—ã—Ç–∞ –æ–±–ª–∞–∫–∞–º–∏</h4>
            <p className="error-message">{error}</p>
            <div className="error-actions">
              <button className="btn-primary" onClick={handleRefresh}>
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
              <button className="btn-secondary" onClick={onBack}>
                ‚Üê –ù–∞–∑–∞–¥
              </button>
            </div>
          </div>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
        {moonData && !loading && (
          <div className="moon-content">
            {/* –ì–ª–∞–≤–Ω–∞—è –ª—É–Ω–∞ */}
            <div className={`moon-display ${moonAnimation ? 'animated' : ''}`}>
              <div className="moon-container">
                <div className={`moon ${getMoonClass()}`}>
                  <div className="moon-surface">
                    <div className="crater crater-1"></div>
                    <div className="crater crater-2"></div>
                    <div className="crater crater-3"></div>
                  </div>
                  <div className="moon-glow"></div>
                </div>
                <div className="moon-stars">
                  <div className="star star-1">‚ú®</div>
                  <div className="star star-2">‚≠ê</div>
                  <div className="star star-3">üåü</div>
                  <div className="star star-4">üí´</div>
                </div>
              </div>
              
              <div className="moon-info">
                <h2 className="moon-phase-name">{moonData.current.phase}</h2>
                <div className="moon-details">
                  <div className="moon-stat">
                    <span className="stat-label">–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å</span>
                    <span className="stat-value">{moonData.current.illumination}%</span>
                  </div>
                  <div className="moon-stat">
                    <span className="stat-label">–í–æ–∑—Ä–∞—Å—Ç</span>
                    <span className="stat-value">{Math.round(moonData.current.age)} –¥–Ω–µ–π</span>
                  </div>
                </div>
              </div>
            </div>

            {/* –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞/–∑–∞—Ö–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
            {moonData.moonrise && moonData.moonset && (
              <div className="moon-times">
                <div className="time-item">
                  <span className="time-icon">üåÖ</span>
                  <span className="time-label">–í–æ—Å—Ö–æ–¥</span>
                  <span className="time-value">{moonData.moonrise}</span>
                </div>
                <div className="time-item">
                  <span className="time-icon">üåá</span>
                  <span className="time-label">–ó–∞—Ö–æ–¥</span>
                  <span className="time-value">{moonData.moonset}</span>
                </div>
              </div>
            )}

            {/* –°–æ–≤–µ—Ç—ã –≥–Ω–æ–º–æ–≤ */}
            <div className="moon-advice">
              <h4 className="advice-title">{moonData.current.advice.title}</h4>
              <div className="advice-content">
                <p className="advice-text">{moonData.current.advice.text}</p>
                
                <div className="advice-activities">
                  <div className="activity-section">
                    <h5>‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</h5>
                    <div className="activity-tags">
                      {moonData.current.advice.activities.map((activity, index) => (
                        <span key={index} className="activity-tag positive">
                          {activity}
                        </span>
                      ))}
                    </div>
                  </div>
                  
                  <div className="activity-section">
                    <h5>‚ùå –ò–∑–±–µ–≥–∞—Ç—å:</h5>
                    <div className="activity-tags">
                      {moonData.current.advice.avoid.map((activity, index) => (
                        <span key={index} className="activity-tag negative">
                          {activity}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –Ω–µ–¥–µ–ª—é */}
            <div className="moon-calendar">
              <h4>–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –Ω–µ–¥–µ–ª—é</h4>
              <div className="calendar-days">
                {moonData.calendar && moonData.calendar.map((day, index) => (
                  <button
                    key={index}
                    className={`calendar-day ${index === selectedDay ? 'selected' : ''}`}
                    onClick={() => handleSelectDay(index)}
                  >
                    <div className="day-emoji">{day.emoji}</div>
                    <div className="day-date">{day.displayDate}</div>
                    <div className="day-illumination">{day.illumination}%</div>
                  </button>
                ))}
              </div>
            </div>

            {/* –°–ª–µ–¥—É—é—â–∏–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∑—ã */}
            {moonData.nextFullMoon && moonData.nextNewMoon && (
              <div className="upcoming-phases">
                <h4>–ë–ª–∏–∂–∞–π—à–∏–µ —Ñ–∞–∑—ã</h4>
                <div className="phase-predictions">
                  <div className="phase-item">
                    <span className="phase-emoji">üåï</span>
                    <span className="phase-name">–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ</span>
                    <span className="phase-date">{moonData.nextFullMoon}</span>
                  </div>
                  <div className="phase-item">
                    <span className="phase-emoji">üåë</span>
                    <span className="phase-name">–ù–æ–≤–æ–ª—É–Ω–∏–µ</span>
                    <span className="phase-date">{moonData.nextNewMoon}</span>
                  </div>
                </div>
              </div>
            )}

            {/* –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö */}
            <div className="source-badge-container">
              {moonData.source === 'offline' ? (
                <div className="source-badge offline">
                  üì± –†–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                </div>
              ) : (
                <div className="source-badge online">
                  üåê –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                </div>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="action-buttons">
              <button 
                className="btn-favorite" 
                onClick={handleAddToFavorites}
                title="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
              >
                ‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
              </button>
              
              <button 
                className="btn-primary" 
                onClick={handleRefresh}
                title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
              >
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å
              </button>
              
              {telegramApp && (
                <button 
                  className="btn-secondary" 
                  onClick={handleShare}
                  title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
                >
                  üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
              )}
              
              <button 
                className="btn-secondary" 
                onClick={onBack}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="moon-info-footer">
              <small>
                {moonData.source === 'offline' 
                  ? 'üìä –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º'
                  : 'üåê –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–ª—É–∂–±'
                }
              </small>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default MoonView;
