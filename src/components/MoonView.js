import React, { useState, useEffect } from 'react';
import { useTheme } from '../contexts/ThemeContext';
import Card from './UI/Card';
import Button from './UI/Button';
import { EnhancedMoonPhase } from '../enhanced_moonPhase';
import { useMoonData } from '../hooks/useAstrologyData';
import useAPI from '../hooks/useAPI';

const MoonView = ({ onAddToFavorites, telegramApp, realTimeMoonData, onRefreshMoonData }) => {
  const { theme } = useTheme();
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [localLoading, setLocalLoading] = useState(false);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ App.js –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
  const { moon: hookMoonData, loading: hookLoading, refresh: hookRefresh } = useMoonData({
    autoUpdate: !realTimeMoonData, // –û—Ç–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ App
    updateInterval: 6 * 60 * 60 * 1000
  });
  
  const { getEnhancedMoonData } = useAPI();
  
  // –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑ App –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
  const moonData = realTimeMoonData || hookMoonData;
  const loading = hookLoading || localLoading;
  const refreshData = onRefreshMoonData || hookRefresh;

  const [currentMoonData, setCurrentMoonData] = useState(moonData);
  const [gnomeAdvice, setGnomeAdvice] = useState(null);

  useEffect(() => {
    if (moonData) {
      setCurrentMoonData(moonData);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç—ã –≥–Ω–æ–º–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
      const advice = EnhancedMoonPhase.getGnomeAdvice(moonData.phase);
      setGnomeAdvice(advice);
    }
  }, [moonData]);

  const handleDateChange = async (newDate) => {
    if (newDate.toDateString() === new Date().toDateString()) {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setSelectedDate(newDate);
      setCurrentMoonData(moonData);
      return;
    }

    setLocalLoading(true);
    setSelectedDate(newDate);

    try {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º EnhancedMoonPhase
      const data = EnhancedMoonPhase.calculatePhase(newDate);
      setCurrentMoonData(data);
      
      const advice = EnhancedMoonPhase.getGnomeAdvice(data.phase);
      setGnomeAdvice(advice);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—Ç—ã:', error);
    } finally {
      setLocalLoading(false);
    }
  };

  const handleAddToFavorites = () => {
    if (currentMoonData && onAddToFavorites) {
      onAddToFavorites({
        type: 'moon',
        title: `${currentMoonData.emoji} ${currentMoonData.phase}`,
        content: `${currentMoonData.illumination}% –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏, ${currentMoonData.lunarDay} –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å`,
        date: selectedDate.toLocaleDateString('ru-RU'),
        moonData: currentMoonData
      });

      if (telegramApp) {
        telegramApp.showAlert('–õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê');
      }
    }
  };

  if (loading) {
    return (
      <Card>
        <div style={{ textAlign: 'center', padding: '40px 20px' }}>
          <div style={{ fontSize: '48px', marginBottom: '16px' }}>üåô</div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...</p>
        </div>
      </Card>
    );
  }

  if (!currentMoonData) {
    return (
      <Card>
        <div style={{ textAlign: 'center', padding: '40px 20px' }}>
          <div style={{ fontSize: '48px', marginBottom: '16px' }}>‚ùå</div>
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª—É–Ω–µ</p>
          <Button onClick={refreshData}>üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</Button>
        </div>
      </Card>
    );
  }

  const isToday = selectedDate.toDateString() === new Date().toDateString();

  return (
    <div>
      {/* –°–µ–ª–µ–∫—Ç–æ—Ä –¥–∞—Ç—ã */}
      <Card>
        <div style={{ marginBottom: '20px' }}>
          <label style={{ 
            display: 'block', 
            marginBottom: '8px',
            fontWeight: '600',
            color: theme.colors.text
          }}>
            –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:
          </label>
          <input
            type="date"
            value={selectedDate.toISOString().split('T')[0]}
            onChange={(e) => handleDateChange(new Date(e.target.value))}
            style={{
              width: '100%',
              padding: '8px 12px',
              border: `1px solid ${theme.colors.border}`,
              borderRadius: '6px',
              backgroundColor: theme.card.background,
              color: theme.card.color
            }}
          />
        </div>

        {isToday && currentMoonData.source && (
          <div style={{
            padding: '8px 12px',
            backgroundColor: theme.colors.success + '20',
            border: `1px solid ${theme.colors.success}`,
            borderRadius: '6px',
            fontSize: '14px',
            marginBottom: '16px'
          }}>
            ‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—á–Ω–∏–∫: {currentMoonData.source})
          </div>
        )}
      </Card>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É–Ω–µ */}
      <Card>
        <div style={{ textAlign: 'center', marginBottom: '20px' }}>
          <div style={{ 
            fontSize: '64px', 
            lineHeight: '1',
            marginBottom: '8px' 
          }}>
            {currentMoonData.emoji}
          </div>
          <h2 style={{ 
            fontSize: '24px', 
            margin: '0 0 8px 0',
            color: theme.colors.text
          }}>
            {currentMoonData.phase}
          </h2>
          <p style={{ 
            fontSize: '16px', 
            margin: 0,
            color: theme.colors.textSecondary
          }}>
            {selectedDate.toLocaleDateString('ru-RU', {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </p>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',
          gap: '12px',
          marginBottom: '20px'
        }}>
          <div style={{
            textAlign: 'center',
            padding: '16px',
            backgroundColor: theme.colors.surface,
            borderRadius: '8px',
            border: `1px solid ${theme.colors.border}`
          }}>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: theme.colors.primary }}>
              {currentMoonData.illumination}%
            </div>
            <div style={{ fontSize: '14px', color: theme.colors.textSecondary }}>
              –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å
            </div>
          </div>

          <div style={{
            textAlign: 'center',
            padding: '16px',
            backgroundColor: theme.colors.surface,
            borderRadius: '8px',
            border: `1px solid ${theme.colors.border}`
          }}>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: theme.colors.primary }}>
              {currentMoonData.lunarDay}
            </div>
            <div style={{ fontSize: '14px', color: theme.colors.textSecondary }}>
              –õ—É–Ω–Ω—ã–π –¥–µ–Ω—å
            </div>
          </div>

          <div style={{
            textAlign: 'center',
            padding: '16px',
            backgroundColor: theme.colors.surface,
            borderRadius: '8px',
            border: `1px solid ${theme.colors.border}`
          }}>
            <div style={{ fontSize: '24px', fontWeight: 'bold', color: theme.colors.primary }}>
              {Math.floor(currentMoonData.age)}
            </div>
            <div style={{ fontSize: '14px', color: theme.colors.textSecondary }}>
              –î–Ω–µ–π –æ—Ç –Ω–æ–≤–æ–ª—É–Ω–∏—è
            </div>
          </div>
        </div>

        {/* –í—Ä–µ–º–µ–Ω–∞ –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞—Ö–æ–¥–∞ */}
        {(currentMoonData.moonrise || currentMoonData.moonset) && (
          <div style={{
            display: 'flex',
            justifyContent: 'space-around',
            padding: '16px',
            backgroundColor: theme.colors.surface,
            borderRadius: '8px',
            marginBottom: '20px',
            border: `1px solid ${theme.colors.border}`
          }}>
            {currentMoonData.moonrise && (
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '18px', fontWeight: 'bold' }}>üåÖ {currentMoonData.moonrise}</div>
                <div style={{ fontSize: '14px', color: theme.colors.textSecondary }}>–í–æ—Å—Ö–æ–¥</div>
              </div>
            )}
            
            {currentMoonData.moonset && (
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '18px', fontWeight: 'bold' }}>üåá {currentMoonData.moonset}</div>
                <div style={{ fontSize: '14px', color: theme.colors.textSecondary }}>–ó–∞—Ö–æ–¥</div>
              </div>
            )}
          </div>
        )}

        {/* –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ä–∞—Å—Ç–µ—Ç/—É–±—ã–≤–∞–µ—Ç) */}
        <div style={{
          textAlign: 'center',
          padding: '16px',
          backgroundColor: currentMoonData.isWaxing ? 
            theme.colors.success + '20' : 
            theme.colors.warning + '20',
          borderRadius: '8px',
          marginBottom: '20px',
          border: `1px solid ${currentMoonData.isWaxing ? theme.colors.success : theme.colors.warning}`
        }}>
          <div style={{ fontSize: '20px', marginBottom: '4px' }}>
            {currentMoonData.isWaxing ? 'üå± –†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞' : 'üçÇ –£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞'}
          </div>
          <div style={{ fontSize: '14px', color: theme.colors.textSecondary }}>
            {currentMoonData.isWaxing ? 
              '–í—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ —Ä–æ—Å—Ç–∞' : 
              '–í—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è'
            }
          </div>
        </div>

        <div style={{
          display: 'flex',
          gap: '12px',
          flexWrap: 'wrap'
        }}>
          <Button 
            onClick={handleAddToFavorites}
            variant="secondary"
            style={{ flex: '1', minWidth: '120px' }}
          >
            ‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
          </Button>
          
          {isToday && (
            <Button 
              onClick={refreshData}
              variant="ghost"
              style={{ flex: '1', minWidth: '120px' }}
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          )}
        </div>
      </Card>

      {/* –°–æ–≤–µ—Ç—ã –≥–Ω–æ–º–æ–≤ */}
      {gnomeAdvice && (
        <Card title={`üßô‚Äç‚ôÇÔ∏è ${gnomeAdvice.title}`}>
          <p style={{ 
            fontSize: '16px', 
            lineHeight: '1.6',
            marginBottom: '16px',
            color: theme.colors.text
          }}>
            {gnomeAdvice.text}
          </p>

          <div style={{ marginBottom: '16px' }}>
            <h4 style={{ 
              fontSize: '16px', 
              margin: '0 0 8px 0',
              color: theme.colors.success 
            }}>
              ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
            </h4>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
              {gnomeAdvice.activities?.map((activity, index) => (
                <span 
                  key={index}
                  style={{
                    padding: '4px 8px',
                    backgroundColor: theme.colors.success + '20',
                    color: theme.colors.success,
                    borderRadius: '4px',
                    fontSize: '14px'
                  }}
                >
                  {activity}
                </span>
              ))}
            </div>
          </div>

          <div style={{ marginBottom: '16px' }}>
            <h4 style={{ 
              fontSize: '16px', 
              margin: '0 0 8px 0',
              color: theme.colors.danger 
            }}>
              ‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ:
            </h4>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
              {gnomeAdvice.avoid?.map((item, index) => (
                <span 
                  key={index}
                  style={{
                    padding: '4px 8px',
                    backgroundColor: theme.colors.danger + '20',
                    color: theme.colors.danger,
                    borderRadius: '4px',
                    fontSize: '14px'
                  }}
                >
                  {item}
                </span>
              ))}
            </div>
          </div>

          <div style={{
            padding: '12px',
            backgroundColor: theme.colors.info + '20',
            borderRadius: '8px',
            border: `1px solid ${theme.colors.info}`
          }}>
            <strong style={{ color: theme.colors.info }}>
              üí´ –≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è: {gnomeAdvice.energy}
            </strong>
          </div>
        </Card>
      )}
    </div>
  );
};

export default MoonView;
