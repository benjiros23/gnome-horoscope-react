import React, { useState } from 'react';
import WoodenCarousel from './WoodenCarousel';
import WoodenTile from './WoodenTile';

const ButtonGrid = ({ onButtonClick }) => {
  const [viewMode, setViewMode] = useState('carousel'); // 'carousel' –∏–ª–∏ 'grid'

  // –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const functions = [
    {
      id: 'horoscope',
      icon: 'üîÆ',
      title: '–ì–æ—Ä–æ—Å–∫–æ–ø',
      subtitle: '–ù–∞ —Å–µ–≥–æ–¥–Ω—è'
    },
    {
      id: 'moon',
      icon: 'üåô',
      title: '–õ—É–Ω–∞',
      subtitle: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å'
    },
    {
      id: 'cards',
      icon: 'üÉè',
      title: '–ö–∞—Ä—Ç—ã',
      subtitle: '–î–Ω—è'
    },
    {
      id: 'events',
      icon: 'üåå',
      title: '–°–æ–±—ã—Ç–∏—è',
      subtitle: '–ê—Å—Ç—Ä–æ'
    },
    {
      id: 'numerology',
      icon: 'üî¢',
      title: '–ß–∏—Å–ª–æ',
      subtitle: '–°—É–¥—å–±—ã'
    },
    {
      id: 'compatibility',
      icon: 'üíï',
      title: '–õ—é–±–æ–≤—å',
      subtitle: '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'
    },
    {
      id: 'mercury',
      icon: 'ü™ê',
      title: '–ú–µ—Ä–∫—É—Ä–∏–π',
      subtitle: '–†–µ—Ç—Ä–æ–≥—Ä–∞–¥'
    },
    {
      id: 'favorites',
      icon: '‚≠ê',
      title: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
      subtitle: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ'
    }
  ];

  const handleItemClick = (item) => {
    if (onButtonClick) {
      onButtonClick(item.id);
    }
  };

  const styles = {
    container: {
      padding: '20px',
      maxWidth: '600px',
      margin: '0 auto'
    },
    toggleContainer: {
      display: 'flex',
      justifyContent: 'center',
      marginBottom: '20px',
      gap: '10px'
    },
    toggleButton: {
      background: 'linear-gradient(135deg, #8b4513, #a0522d)',
      color: 'white',
      border: '2px solid #654321',
      borderRadius: '20px',
      padding: '8px 16px',
      fontSize: '14px',
      fontWeight: '600',
      cursor: 'pointer',
      transition: 'all 0.3s ease',
      fontFamily: '"Times New Roman", Georgia, serif',
      textTransform: 'uppercase',
      letterSpacing: '0.5px'
    },
    toggleButtonActive: {
      boxShadow: 'inset 0 2px 8px rgba(0,0,0,0.3), 0 4px 12px rgba(139, 69, 19, 0.4)',
      transform: 'scale(0.95)'
    },
    gridContainer: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',
      gap: '16px',
      justifyItems: 'center',
      padding: '20px',
      background: 'linear-gradient(135deg, rgba(139, 69, 19, 0.1), rgba(160, 82, 45, 0.1))',
      borderRadius: '20px',
      border: '2px solid rgba(139, 69, 19, 0.3)',
      boxShadow: 'inset 0 4px 8px rgba(0,0,0,0.1)'
    }
  };

  return (
    <div style={styles.container}>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      <div style={styles.toggleContainer}>
        <button
          style={{
            ...styles.toggleButton,
            ...(viewMode === 'carousel' ? styles.toggleButtonActive : {})
          }}
          onClick={() => setViewMode('carousel')}
          onMouseEnter={(e) => {
            if (viewMode !== 'carousel') {
              e.target.style.transform = 'scale(1.05)';
              e.target.style.boxShadow = '0 6px 16px rgba(139, 69, 19, 0.3)';
            }
          }}
          onMouseLeave={(e) => {
            if (viewMode !== 'carousel') {
              e.target.style.transform = 'scale(1)';
              e.target.style.boxShadow = 'none';
            }
          }}
        >
          üé† –ö–∞—Ä—É—Å–µ–ª—å
        </button>
        
        <button
          style={{
            ...styles.toggleButton,
            ...(viewMode === 'grid' ? styles.toggleButtonActive : {})
          }}
          onClick={() => setViewMode('grid')}
          onMouseEnter={(e) => {
            if (viewMode !== 'grid') {
              e.target.style.transform = 'scale(1.05)';
              e.target.style.boxShadow = '0 6px 16px rgba(139, 69, 19, 0.3)';
            }
          }}
          onMouseLeave={(e) => {
            if (viewMode !== 'grid') {
              e.target.style.transform = 'scale(1)';
              e.target.style.boxShadow = 'none';
            }
          }}
        >
          üì± –°–µ—Ç–∫–∞
        </button>
      </div>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ */}
      {viewMode === 'carousel' ? (
        <WoodenCarousel
          items={functions}
          onItemClick={handleItemClick}
          variant="oak"
        />
      ) : (
        <div style={styles.gridContainer}>
          {functions.map((item) => (
            <WoodenTile
              key={item.id}
              icon={item.icon}
              title={item.title}
              subtitle={item.subtitle}
              variant="oak"
              onClick={() => handleItemClick(item)}
              size="normal"
            />
          ))}
        </div>
      )}
    </div>
  );
};

export default ButtonGrid;
