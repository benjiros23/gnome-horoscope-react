import React, { useState, useEffect } from 'react';

const ZODIAC_SIGNS = [
  { sign: '–û–≤–µ–Ω', emoji: '‚ôà', dates: '21.03-20.04', color: '#FF6B6B', element: '–û–≥–æ–Ω—å' },
  { sign: '–¢–µ–ª–µ—Ü', emoji: '‚ôâ', dates: '21.04-20.05', color: '#4ECDC4', element: '–ó–µ–º–ª—è' },
  { sign: '–ë–ª–∏–∑–Ω–µ—Ü—ã', emoji: '‚ôä', dates: '21.05-21.06', color: '#45B7D1', element: '–í–æ–∑–¥—É—Ö' },
  { sign: '–†–∞–∫', emoji: '‚ôã', dates: '22.06-22.07', color: '#96CEB4', element: '–í–æ–¥–∞' },
  { sign: '–õ–µ–≤', emoji: '‚ôå', dates: '23.07-22.08', color: '#FECA57', element: '–û–≥–æ–Ω—å' },
  { sign: '–î–µ–≤–∞', emoji: '‚ôç', dates: '23.08-22.09', color: '#48CAE4', element: '–ó–µ–º–ª—è' },
  { sign: '–í–µ—Å—ã', emoji: '‚ôé', dates: '23.09-22.10', color: '#F38BA8', element: '–í–æ–∑–¥—É—Ö' },
  { sign: '–°–∫–æ—Ä–ø–∏–æ–Ω', emoji: '‚ôè', dates: '23.10-22.11', color: '#A8DADC', element: '–í–æ–¥–∞' },
  { sign: '–°—Ç—Ä–µ–ª–µ—Ü', emoji: '‚ôê', dates: '23.11-21.12', color: '#F1C0E8', element: '–û–≥–æ–Ω—å' },
  { sign: '–ö–æ–∑–µ—Ä–æ–≥', emoji: '‚ôë', dates: '22.12-20.01', color: '#CFBAF0', element: '–ó–µ–º–ª—è' },
  { sign: '–í–æ–¥–æ–ª–µ–π', emoji: '‚ôí', dates: '21.01-19.02', color: '#A3C4F3', element: '–í–æ–∑–¥—É—Ö' },
  { sign: '–†—ã–±—ã', emoji: '‚ôì', dates: '20.02-20.03', color: '#90DBF4', element: '–í–æ–¥–∞' }
];

function ZodiacCarousel({ selectedSign, onSignChange, telegramApp }) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);

  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const index = ZODIAC_SIGNS.findIndex(item => item.sign === selectedSign);
    if (index >= 0) {
      setCurrentIndex(index);
    }
  }, [selectedSign]);

  // Haptic feedback
  const hapticFeedback = (type = 'selection') => {
    if (telegramApp?.HapticFeedback) {
      try {
        if (type === 'selection') {
          telegramApp.HapticFeedback.selectionChanged();
        } else {
          telegramApp.HapticFeedback.impactOccurred('light');
        }
      } catch (e) {
        console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
      }
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–Ω–∞–∫
  const handlePrevious = () => {
    if (isAnimating) return;
    
    setIsAnimating(true);
    const newIndex = (currentIndex - 1 + ZODIAC_SIGNS.length) % ZODIAC_SIGNS.length;
    setCurrentIndex(newIndex);
    onSignChange(ZODIAC_SIGNS[newIndex].sign);
    hapticFeedback('selection');

    setTimeout(() => setIsAnimating(false), 300);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–Ω–∞–∫
  const handleNext = () => {
    if (isAnimating) return;
    
    setIsAnimating(true);
    const newIndex = (currentIndex + 1) % ZODIAC_SIGNS.length;
    setCurrentIndex(newIndex);
    onSignChange(ZODIAC_SIGNS[newIndex].sign);
    hapticFeedback('selection');

    setTimeout(() => setIsAnimating(false), 300);
  };

  // –ü—Ä—è–º–æ–π –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É
  const handleSelectSign = (index) => {
    if (isAnimating || index === currentIndex) return;
    
    setIsAnimating(true);
    setCurrentIndex(index);
    onSignChange(ZODIAC_SIGNS[index].sign);
    hapticFeedback('impact');

    setTimeout(() => setIsAnimating(false), 300);
  };

  const currentSign = ZODIAC_SIGNS[currentIndex];

  return (
    <div className="zodiac-carousel">
      <div className="carousel-header">
        <h3>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞</h3>
        <p className="carousel-subtitle">–õ–∏—Å—Ç–∞–π—Ç–µ –∏–ª–∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Ç–æ—á–∫–∏ –≤–Ω–∏–∑—É</p>
      </div>

      <div className="carousel-container">
        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
        <button 
          className="carousel-nav-btn carousel-prev"
          onClick={handlePrevious}
          disabled={isAnimating}
          aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∑–Ω–∞–∫"
        >
          <span className="nav-arrow">‚Äπ</span>
        </button>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–Ω–∞–∫–∞ */}
        <div className="carousel-main-item">
          <div 
            className={`sign-card ${isAnimating ? 'animating' : ''}`}
            style={{ '--sign-color': currentSign.color }}
          >
            <div className="sign-icon-container">
              <div className="sign-icon">{currentSign.emoji}</div>
              <div className="icon-glow"></div>
            </div>
            
            <div className="sign-info">
              <h2 className="sign-name">{currentSign.sign}</h2>
              <p className="sign-dates">{currentSign.dates}</p>
              <span className="sign-element">{currentSign.element}</span>
            </div>

            {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
            <div className="card-decorations">
              <div className="star star-1">‚ú®</div>
              <div className="star star-2">‚≠ê</div>
              <div className="star star-3">üåü</div>
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" */}
        <button 
          className="carousel-nav-btn carousel-next"
          onClick={handleNext}
          disabled={isAnimating}
          aria-label="–°–ª–µ–¥—É—é—â–∏–π –∑–Ω–∞–∫"
        >
          <span className="nav-arrow">‚Ä∫</span>
        </button>
      </div>

      {/* –ü—Ä–µ–≤—å—é —Å–æ—Å–µ–¥–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ */}
      <div className="carousel-preview">
        <div className="preview-item prev-preview">
          <span className="preview-emoji">
            {ZODIAC_SIGNS[(currentIndex - 1 + ZODIAC_SIGNS.length) % ZODIAC_SIGNS.length].emoji}
          </span>
          <span className="preview-name">
            {ZODIAC_SIGNS[(currentIndex - 1 + ZODIAC_SIGNS.length) % ZODIAC_SIGNS.length].sign}
          </span>
        </div>

        <div className="preview-current">
          <div className="current-indicator">–í—ã–±—Ä–∞–Ω</div>
        </div>

        <div className="preview-item next-preview">
          <span className="preview-emoji">
            {ZODIAC_SIGNS[(currentIndex + 1) % ZODIAC_SIGNS.length].emoji}
          </span>
          <span className="preview-name">
            {ZODIAC_SIGNS[(currentIndex + 1) % ZODIAC_SIGNS.length].sign}
          </span>
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ—á–µ–∫ */}
      <div className="carousel-indicators">
        {ZODIAC_SIGNS.map((sign, index) => (
          <button
            key={sign.sign}
            className={`indicator ${index === currentIndex ? 'active' : ''}`}
            onClick={() => handleSelectSign(index)}
            disabled={isAnimating}
            aria-label={`–í—ã–±—Ä–∞—Ç—å ${sign.sign}`}
            title={`${sign.sign} (${sign.dates})`}
          >
            <span className="indicator-emoji">{sign.emoji}</span>
          </button>
        ))}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div className="carousel-hint">
        <small>
          üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Å–º–∞—Ö–∏–≤–∞–π—Ç–µ –≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        </small>
      </div>
    </div>
  );
}

export default ZodiacCarousel;
