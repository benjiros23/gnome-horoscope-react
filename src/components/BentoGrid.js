import React, { useMemo, useCallback } from 'react';
import { useTheme } from '../contexts/ThemeContext';

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
const ZODIAC_SIGNS = ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞', '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'];
const ZODIAC_EMOJIS = ['‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì'];

// –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const NAVIGATION_CARDS = [
  { id: 'cards', icon: 'üÉè', title: '–ö–∞—Ä—Ç–∞ –¥–Ω—è', subtitle: '–ü–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', color: 'warning' },
  { id: 'compatibility', icon: 'üíï', title: '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', subtitle: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', color: 'error' },
  { id: 'numerology', icon: 'üî¢', title: '–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã', subtitle: '–†–∞—Å–∫—Ä–æ–π—Ç–µ —Ç–∞–π–Ω—ã —á–∏—Å–µ–ª', color: 'info' },
  { id: 'events', icon: 'üåå', title: '–°–æ–±—ã—Ç–∏—è', subtitle: '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', color: 'success' },
  { id: 'mercury', icon: 'ü™ê', title: '–ú–µ—Ä–∫—É—Ä–∏–π', subtitle: '–†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ', color: 'secondary' },
  { id: 'favorites', icon: '‚≠ê', title: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', subtitle: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è', color: '#ffd700' }
];

// ===== –£–¢–ò–õ–ò–¢–´ =====
const getZodiacEmoji = (sign) => {
  const index = ZODIAC_SIGNS.indexOf(sign);
  return index !== -1 ? ZODIAC_EMOJIS[index] : '‚ôå';
};

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢ –ö–ê–†–¢–û–ß–ö–ò =====
const BentoCard = React.memo(({ 
  size = 'normal', 
  color, 
  onClick, 
  children, 
  className = '',
  tabIndex = 0,
  'aria-label': ariaLabel,
  theme
}) => {
  const cardSizes = useMemo(() => ({
    normal: { gridColumn: 'span 1', gridRow: 'span 1', minHeight: '140px' },
    large: { gridColumn: 'span 2', gridRow: 'span 1', minHeight: '200px' },
    wide: { gridColumn: 'span 3', gridRow: 'span 1', minHeight: '140px' },
    tall: { gridColumn: 'span 1', gridRow: 'span 2', minHeight: '280px' }
  }), []);

  const cardStyle = useMemo(() => ({
    ...theme.components.card,
    ...cardSizes[size],
    background: `linear-gradient(135deg, ${color}15 0%, ${theme.components.card.background} 100%)`,
    cursor: 'pointer',
    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
    position: 'relative',
    overflow: 'hidden'
  }), [theme, size, color, cardSizes]);

  const handleMouseEnter = useCallback((e) => {
    e.currentTarget.style.transform = 'translateY(-4px) scale(1.02)';
    e.currentTarget.style.boxShadow = '0 12px 24px rgba(0,0,0,0.2)';
  }, []);

  const handleMouseLeave = useCallback((e) => {
    e.currentTarget.style.transform = 'translateY(0) scale(1)';
    e.currentTarget.style.boxShadow = cardStyle.boxShadow;
  }, [cardStyle.boxShadow]);

  const handleKeyPress = useCallback((e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      onClick?.();
    }
  }, [onClick]);

  return (
    <div
      className={className}
      style={cardStyle}
      onClick={onClick}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      onKeyPress={handleKeyPress}
      tabIndex={tabIndex}
      role="button"
      aria-label={ariaLabel}
    >
      {children}
    </div>
  );
});

BentoCard.displayName = 'BentoCard';

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====
const BentoGrid = React.memo(({ 
  astrologyData, 
  selectedSign, 
  gnomeProfiles, 
  onButtonClick,
  onSignSelect 
}) => {
  const { theme } = useTheme();

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
  const styles = useMemo(() => ({
    container: {
      display: 'grid',
      gridTemplateColumns: 'repeat(auto-fit, minmax(160px, 1fr))',
      gap: '16px',
      padding: '20px',
      maxWidth: '800px',
      margin: '0 auto'
    },
    
    icon: {
      fontSize: '32px',
      marginBottom: '8px',
      display: 'block'
    },
    
    title: {
      ...theme.typography.h3,
      fontSize: '16px',
      margin: '0 0 4px 0'
    },
    
    subtitle: {
      ...theme.typography.caption,
      margin: 0,
      lineHeight: '1.4'
    },
    
    largeIcon: {
      fontSize: '48px',
      marginBottom: '12px'
    },
    
    largeTitle: {
      ...theme.typography.h2,
      fontSize: '20px',
      margin: '0 0 8px 0'
    },
    
    timestamp: {
      position: 'absolute',
      bottom: '12px',
      right: '12px',
      fontSize: '12px',
      opacity: 0.6,
      backgroundColor: theme.colors.surface || 'rgba(255,255,255,0.1)',
      padding: '4px 8px',
      borderRadius: '12px'
    }
  }), [theme]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleCardClick = useCallback((action, data) => {
    if (action === 'navigate') {
      onButtonClick?.(data);
    } else if (action === 'selectSign') {
      onSignSelect?.(data);
    }
  }, [onButtonClick, onSignSelect]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const moonCardContent = useMemo(() => {
    if (astrologyData?.moon) {
      return {
        icon: astrologyData.moon.emoji,
        title: astrologyData.moon.phase,
        subtitle: `${astrologyData.moon.illumination}% –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏`,
        extraInfo: `${astrologyData.moon.lunarDay} –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å`,
        timestamp: astrologyData.lastUpdated
      };
    }
    
    return {
      icon: 'üåô',
      title: '–õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
      subtitle: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–∑—ã –ª—É–Ω—ã...',
      extraInfo: null,
      timestamp: null
    };
  }, [astrologyData]);

  const zodiacCardContent = useMemo(() => ({
    emoji: getZodiacEmoji(selectedSign),
    title: selectedSign,
    subtitle: gnomeProfiles?.[selectedSign]?.name || '–í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø'
  }), [selectedSign, gnomeProfiles]);

  return (
    <div style={styles.container}>
      {/* –ë–æ–ª—å—à–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - –¢–µ–∫—É—â–∞—è –ª—É–Ω–Ω–∞—è —Ñ–∞–∑–∞ */}
      <BentoCard
        size="large"
        color={theme.colors.primary}
        onClick={() => handleCardClick('navigate', 'moon')}
        aria-label={`–õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞: ${moonCardContent.title}`}
        theme={theme}
      >
        <div style={styles.largeIcon}>
          {moonCardContent.icon}
        </div>
        <h3 style={styles.largeTitle}>
          {moonCardContent.title}
        </h3>
        <p style={styles.subtitle}>
          {moonCardContent.subtitle}
        </p>
        {moonCardContent.extraInfo && (
          <p style={{ ...styles.subtitle, marginTop: '8px' }}>
            {moonCardContent.extraInfo}
          </p>
        )}
        
        {moonCardContent.timestamp && (
          <div style={styles.timestamp}>
            {moonCardContent.timestamp.toLocaleTimeString('ru-RU', {
              hour: '2-digit',
              minute: '2-digit'
            })}
          </div>
        )}
      </BentoCard>

      {/* –¢–µ–∫—É—â–∏–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ */}
      <BentoCard
        size="normal"
        color={theme.colors.secondary}
        onClick={() => handleCardClick('navigate', 'horoscope')}
        aria-label={`–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ${zodiacCardContent.title}`}
        theme={theme}
      >
        <div style={styles.icon}>
          {zodiacCardContent.emoji}
        </div>
        <h3 style={styles.title}>
          {zodiacCardContent.title}
        </h3>
        <p style={styles.subtitle}>
          {zodiacCardContent.subtitle}
        </p>
      </BentoCard>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      {NAVIGATION_CARDS.map(card => (
        <BentoCard
          key={card.id}
          size="normal"
          color={typeof card.color === 'string' && card.color.startsWith('#') 
            ? card.color 
            : theme.colors[card.color] || theme.colors.primary}
          onClick={() => handleCardClick('navigate', card.id)}
          aria-label={`${card.title}: ${card.subtitle}`}
          theme={theme}
        >
          <div style={styles.icon}>
            {card.icon}
          </div>
          <h3 style={styles.title}>
            {card.title}
          </h3>
          <p style={styles.subtitle}>
            {card.subtitle}
          </p>
        </BentoCard>
      ))}
    </div>
  );
});

BentoGrid.displayName = 'BentoGrid';

export default BentoGrid;
