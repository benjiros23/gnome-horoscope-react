import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { useTheme } from '../contexts/ThemeContext';
import Card from './UI/Card';
import Button from './UI/Button';
import { EnhancedMoonPhase } from '../enhanced_moonPhase';

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const ASTRO_EVENT_TYPES = {
  MERCURY_RETROGRADE: 'mercury_retrograde',
  MOON_PHASE: 'moon_phase',
  SUN_POSITION: 'sun_position',
  PLANETARY_ASPECT: 'planetary_aspect',
  ECLIPSE: 'eclipse',
  PLANETARY_TRANSIT: 'transit'
};

const INFLUENCE_LEVELS = {
  CRITICAL: { level: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ', color: '#D32F2F', icon: 'üî¥' },
  HIGH: { level: '–í—ã—Å–æ–∫–æ–µ', color: '#F57C00', icon: 'üü†' },
  MEDIUM: { level: '–°—Ä–µ–¥–Ω–µ–µ', color: '#1976D2', icon: 'üîµ' },
  LOW: { level: '–ù–∏–∑–∫–æ–µ', color: '#388E3C', icon: 'üü¢' }
};

const STATUS_CONFIG = {
  retrograde: { color: '#FF6B6B', icon: '‚è™', label: '–†–µ—Ç—Ä–æ–≥—Ä–∞–¥' },
  direct: { color: '#4ECDC4', icon: '‚ñ∂Ô∏è', label: '–ü—Ä—è–º–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ' },
  stationary: { color: '#FFA726', icon: '‚è∏Ô∏è', label: '–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å' },
  active: { color: '#66BB6A', icon: '‚ú®', label: '–ê–∫—Ç–∏–≤–Ω–æ–µ' },
  waning: { color: '#FFB74D', icon: 'üåò', label: '–£–±—ã–≤–∞—é—â–µ–µ' },
  waxing: { color: '#81C784', icon: 'üåí', label: '–†–∞—Å—Ç—É—â–µ–µ' }
};

// ===== –ö–õ–ê–°–° –î–õ–Ø –†–ê–°–ß–ï–¢–ê –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –°–û–ë–´–¢–ò–ô =====
class AstroEventsCalculator {
  static getZodiacDates() {
    return {
      '–ö–æ–∑–µ—Ä–æ–≥': { start: [12, 22], end: [1, 19] },
      '–í–æ–¥–æ–ª–µ–π': { start: [1, 20], end: [2, 18] },
      '–†—ã–±—ã': { start: [2, 19], end: [3, 20] },
      '–û–≤–µ–Ω': { start: [3, 21], end: [4, 19] },
      '–¢–µ–ª–µ—Ü': { start: [4, 20], end: [5, 20] },
      '–ë–ª–∏–∑–Ω–µ—Ü—ã': { start: [5, 21], end: [6, 20] },
      '–†–∞–∫': { start: [6, 21], end: [7, 22] },
      '–õ–µ–≤': { start: [7, 23], end: [8, 22] },
      '–î–µ–≤–∞': { start: [8, 23], end: [9, 22] },
      '–í–µ—Å—ã': { start: [9, 23], end: [10, 22] },
      '–°–∫–æ—Ä–ø–∏–æ–Ω': { start: [10, 23], end: [11, 21] },
      '–°—Ç—Ä–µ–ª–µ—Ü': { start: [11, 22], end: [12, 21] }
    };
  }

  static getCurrentSunSign(date = new Date()) {
    const month = date.getMonth() + 1;
    const day = date.getDate();
    
    const zodiacDates = this.getZodiacDates();
    
    for (const [sign, dates] of Object.entries(zodiacDates)) {
      const [startMonth, startDay] = dates.start;
      const [endMonth, endDay] = dates.end;
      
      if (startMonth === endMonth) {
        if (month === startMonth && day >= startDay && day <= endDay) {
          return sign;
        }
      } else {
        if ((month === startMonth && day >= startDay) || 
            (month === endMonth && day <= endDay)) {
          return sign;
        }
      }
    }
    
    return '–í–æ–¥–æ–ª–µ–π';
  }

  static getMercuryRetrogradePeriods(year) {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –ú–µ—Ä–∫—É—Ä–∏—è –Ω–∞ 2025 –≥–æ–¥
    const periods = [
      { start: new Date(year, 0, 1), end: new Date(year, 0, 25) },   // –Ø–Ω–≤–∞—Ä—å
      { start: new Date(year, 4, 8), end: new Date(year, 4, 30) },   // –ú–∞–π
      { start: new Date(year, 8, 3), end: new Date(year, 8, 26) },   // –°–µ–Ω—Ç—è–±—Ä—å
      { start: new Date(year, 11, 15), end: new Date(year, 11, 31) }  // –î–µ–∫–∞–±—Ä—å
    ];
    
    return periods;
  }

  static isMercuryRetrograde(date = new Date()) {
    const year = date.getFullYear();
    const periods = this.getMercuryRetrogradePeriods(year);
    
    return periods.some(period => date >= period.start && date <= period.end);
  }

  static getNextMercuryRetrograde(date = new Date()) {
    const year = date.getFullYear();
    const periods = this.getMercuryRetrogradePeriods(year);
    
    for (const period of periods) {
      if (date < period.start) {
        return period;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É –ø—Ä–æ—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–∏–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
    const nextYearPeriods = this.getMercuryRetrogradePeriods(year + 1);
    return nextYearPeriods[0];
  }

  static getCurrentEvents(date = new Date()) {
    const events = [];
    
    // –ú–µ—Ä–∫—É—Ä–∏–π
    const mercuryEvent = this.getMercuryEvent(date);
    if (mercuryEvent) events.push(mercuryEvent);
    
    // –õ—É–Ω–Ω–∞—è —Ñ–∞–∑–∞
    const moonEvent = this.getMoonEvent(date);
    if (moonEvent) events.push(moonEvent);
    
    // –°–æ–ª–Ω—Ü–µ
    const sunEvent = this.getSunEvent(date);
    if (sunEvent) events.push(sunEvent);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const additionalEvents = this.getAdditionalEvents(date);
    events.push(...additionalEvents);
    
    return events.sort((a, b) => b.priority - a.priority);
  }

  static getMercuryEvent(date) {
    const isRetrograde = this.isMercuryRetrograde(date);
    const nextRetrograde = this.getNextMercuryRetrograde(date);
    
    const baseEvent = {
      id: 'mercury_current',
      type: ASTRO_EVENT_TYPES.MERCURY_RETROGRADE,
      planet: '–ú–µ—Ä–∫—É—Ä–∏–π',
      planetIcon: '‚òø',
      priority: isRetrograde ? 10 : 7,
      realTime: true,
      affectedSigns: ['–ë–ª–∏–∑–Ω–µ—Ü—ã', '–î–µ–≤–∞']
    };

    if (isRetrograde) {
      return {
        ...baseEvent,
        status: 'retrograde',
        title: '–†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π –∞–∫—Ç–∏–≤–µ–Ω',
        period: '–°–µ–π—á–∞—Å –¥–æ 25 —è–Ω–≤–∞—Ä—è 2025',
        influence: INFLUENCE_LEVELS.HIGH,
        description: this.getMercuryRetrogradeDescription(),
        advice: [
          '–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–≤–∞–∂–¥—ã',
          '–î–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
          '–ò–∑–±–µ–≥–∞–π—Ç–µ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏',
          '–í—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–µ–ª'
        ],
        warnings: [
          '–ó–∞–¥–µ—Ä–∂–∫–∏ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –∏ —Å–≤—è–∑–∏',
          '–í–æ–∑–º–æ–∂–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏',
          '–ù–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è –≤ –æ–±—â–µ–Ω–∏–∏'
        ]
      };
    } else {
      return {
        ...baseEvent,
        status: 'direct',
        title: '–ú–µ—Ä–∫—É—Ä–∏–π –¥–≤–∏–∂–µ—Ç—Å—è –ø—Ä—è–º–æ',
        period: `–°–ª–µ–¥—É—é—â–∏–π —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥: ${nextRetrograde.start.toLocaleDateString('ru-RU')}`,
        influence: INFLUENCE_LEVELS.MEDIUM,
        description: this.getMercuryDirectDescription(),
        advice: [
          '–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤',
          '–ê–∫—Ç–∏–≤–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏',
          '–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
          '–£—á–∏—Ç–µ—Å—å –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ—Å—å'
        ],
        benefits: [
          '–ß–µ—Ç–∫–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
          '–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Ç–µ—Ö–Ω–∏–∫–∏',
          '–£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã'
        ]
      };
    }
  }

  static getMoonEvent(date) {
    try {
      const moonData = EnhancedMoonPhase.calculatePhase(date);
      
      return {
        id: 'moon_current',
        type: ASTRO_EVENT_TYPES.MOON_PHASE,
        planet: '–õ—É–Ω–∞',
        planetIcon: moonData.emoji,
        status: moonData.isWaxing ? 'waxing' : 'waning',
        title: `${moonData.phase} –≤–ª–∏—è–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–∏`,
        period: `${date.toLocaleDateString('ru-RU')} - ${moonData.lunarDay} –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å`,
        influence: this.getMoonInfluenceLevel(moonData.illumination),
        description: this.getMoonDescription(moonData),
        affectedSigns: ['–†–∞–∫', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–†—ã–±—ã'],
        priority: 8,
        realTime: true,
        moonData: moonData
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  static getSunEvent(date) {
    const sunSign = this.getCurrentSunSign(date);
    
    return {
      id: 'sun_current',
      type: ASTRO_EVENT_TYPES.SUN_POSITION,
      planet: '–°–æ–ª–Ω—Ü–µ',
      planetIcon: '‚òÄÔ∏è',
      status: 'active',
      title: `–°–æ–ª–Ω—Ü–µ –≤ –∑–Ω–∞–∫–µ ${sunSign}`,
      period: this.getSunPeriod(sunSign),
      influence: INFLUENCE_LEVELS.MEDIUM,
      description: this.getSunDescription(sunSign),
      affectedSigns: [sunSign, '–õ–µ–≤'],
      priority: 6,
      realTime: true,
      sunSign: sunSign
    };
  }

  static getAdditionalEvents(date) {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    const events = [];
    
    // –ü—Ä–∏–º–µ—Ä: –æ—Å–æ–±—ã–µ –¥–Ω–∏
    const dayOfYear = Math.floor((date - new Date(date.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
    
    if (dayOfYear % 7 === 0) {
      events.push({
        id: 'weekly_energy',
        type: 'energy_peak',
        planet: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è',
        planetIcon: '‚ö°',
        status: 'active',
        title: '–ü–∏–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏',
        period: '–°–µ–≥–æ–¥–Ω—è',
        influence: INFLUENCE_LEVELS.MEDIUM,
        description: '–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.',
        priority: 5,
        realTime: true
      });
    }
    
    return events;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
  static getMercuryRetrogradeDescription() {
    return `
      <div class="event-description">
        <p><strong>üåü –¢–µ–∫—É—â–µ–µ –≤–ª–∏—è–Ω–∏–µ:</strong> –ú–µ—Ä–∫—É—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–π —Ñ–∞–∑–µ, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –æ—Å–æ–±—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.</p>
        
        <div class="warning-box">
          <h4>‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ –≤–ª–∏—è–Ω–∏—è:</h4>
          <ul>
            <li>–ó–∞–¥–µ—Ä–∂–∫–∏ –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è—Ö –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–µ</li>
            <li>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ –∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ</li>
            <li>–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º</li>
            <li>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
          </ul>
        </div>
        
        <div class="advice-box">
          <h4>üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é:</h4>
          <p>–≠—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—á–∞—Ç—ã—Ö –¥–µ–ª, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–≤—è–∑–µ–π. –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.</p>
        </div>
      </div>
    `;
  }

  static getMercuryDirectDescription() {
    return `
      <div class="event-description">
        <p><strong>‚ú® –¢–µ–∫—É—â–µ–µ –≤–ª–∏—è–Ω–∏–µ:</strong> –ú–µ—Ä–∫—É—Ä–∏–π –¥–≤–∏–∂–µ—Ç—Å—è –ø—Ä—è–º–æ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —è—Å–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è—Ö.</p>
        
        <div class="benefits-box">
          <h4>üåü –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–µ—Ä–∏–æ–¥–∞:</h4>
          <ul>
            <li>–ß–µ—Ç–∫–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è</li>
            <li>–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</li>
            <li>–£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏ —Å–¥–µ–ª–∫–∏</li>
            <li>–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</li>
          </ul>
        </div>
      </div>
    `;
  }

  static getMoonDescription(moonData) {
    const phaseDescriptions = {
      '–ù–æ–≤–æ–ª—É–Ω–∏–µ': '–í—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π',
      '–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞': '–≠–Ω–µ—Ä–≥–∏—è —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤',
      '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å': '–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π',
      '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞': '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å–∏–ª –∏ –∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ': '–ü–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤',
      '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞': '–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–µ–≥–æ, –æ—á–∏—â–µ–Ω–∏–µ',
      '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å': '–ü–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É',
      '–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–µ–ª, –æ—Ç–¥—ã—Ö'
    };

    const description = phaseDescriptions[moonData.phase] || '–û—Å–æ–±–∞—è –ª—É–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è';

    return `
      <div class="event-description">
        <p><strong>üåô –õ—É–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è:</strong> ${description}</p>
        
        <div class="moon-info">
          <p><strong>–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å:</strong> ${moonData.illumination}%</p>
          <p><strong>–õ—É–Ω–Ω—ã–π –¥–µ–Ω—å:</strong> ${moonData.lunarDay}</p>
          <p><strong>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> ${moonData.isWaxing ? '–†–∞—Å—Ç—É—â–∞—è üåí' : '–£–±—ã–≤–∞—é—â–∞—è üåò'}</p>
        </div>
        
        <div class="recommendation">
          <h4>üí´ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
          <p>${moonData.isWaxing ? 
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—Ç—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞–Ω–∏–π' : 
            '–í—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ª –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ—Ç –Ω–µ–Ω—É–∂–Ω–æ–≥–æ'}</p>
        </div>
      </div>
    `;
  }

  static getSunDescription(sunSign) {
    const descriptions = {
      '–ö–æ–∑–µ—Ä–æ–≥': '–í—Ä–µ–º—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –∞–º–±–∏—Ü–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏',
      '–í–æ–¥–æ–ª–µ–π': '–ü–µ—Ä–∏–æ–¥ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –∏–¥–µ–π',
      '–†—ã–±—ã': '–í—Ä–µ–º—è –∏–Ω—Ç—É–∏—Ü–∏–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è',
      '–û–≤–µ–Ω': '–≠–Ω–µ—Ä–≥–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π, –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      '–¢–µ–ª–µ—Ü': '–ü–µ—Ä–∏–æ–¥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è',
      '–ë–ª–∏–∑–Ω–µ—Ü—ã': '–í—Ä–µ–º—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π, –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è',
      '–†–∞–∫': '–ü–µ—Ä–∏–æ–¥ –∑–∞–±–æ—Ç—ã, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–µ–º–µ–π–Ω—ã—Ö –¥–µ–ª',
      '–õ–µ–≤': '–í—Ä–µ–º—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞, —â–µ–¥—Ä–æ—Å—Ç–∏ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è',
      '–î–µ–≤–∞': '–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç–∏',
      '–í–µ—Å—ã': '–í—Ä–µ–º—è –≥–∞—Ä–º–æ–Ω–∏–∏, –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏',
      '–°–∫–æ—Ä–ø–∏–æ–Ω': '–ü–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π, –≥–ª—É–±–∏–Ω—ã –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏',
      '–°—Ç—Ä–µ–ª–µ—Ü': '–í—Ä–µ–º—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–≤'
    };

    return `
      <div class="event-description">
        <p><strong>‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è:</strong> ${descriptions[sunSign] || '–û—Å–æ–±–∞—è —Å–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞'}</p>
        
        <div class="sun-influence">
          <h4>üåü –í–ª–∏—è–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å:</h4>
          <p>–°–æ–ª–Ω—Ü–µ –≤ ${sunSign} —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö –∂–∏–∑–Ω–∏. –≠—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–π –¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.</p>
        </div>
      </div>
    `;
  }

  static getMoonInfluenceLevel(illumination) {
    if (illumination > 90) return INFLUENCE_LEVELS.HIGH;
    if (illumination > 50) return INFLUENCE_LEVELS.MEDIUM;
    if (illumination < 10) return INFLUENCE_LEVELS.HIGH; // –ù–æ–≤–æ–ª—É–Ω–∏–µ —Ç–æ–∂–µ —Å–∏–ª—å–Ω–æ–µ
    return INFLUENCE_LEVELS.MEDIUM;
  }

  static getSunPeriod(sunSign) {
    const periods = {
      '–ö–æ–∑–µ—Ä–æ–≥': '22 –¥–µ–∫–∞–±—Ä—è - 19 —è–Ω–≤–∞—Ä—è',
      '–í–æ–¥–æ–ª–µ–π': '20 —è–Ω–≤–∞—Ä—è - 18 —Ñ–µ–≤—Ä–∞–ª—è',
      '–†—ã–±—ã': '19 —Ñ–µ–≤—Ä–∞–ª—è - 20 –º–∞—Ä—Ç–∞',
      '–û–≤–µ–Ω': '21 –º–∞—Ä—Ç–∞ - 19 –∞–ø—Ä–µ–ª—è',
      '–¢–µ–ª–µ—Ü': '20 –∞–ø—Ä–µ–ª—è - 20 –º–∞—è',
      '–ë–ª–∏–∑–Ω–µ—Ü—ã': '21 –º–∞—è - 20 –∏—é–Ω—è',
      '–†–∞–∫': '21 –∏—é–Ω—è - 22 –∏—é–ª—è',
      '–õ–µ–≤': '23 –∏—é–ª—è - 22 –∞–≤–≥—É—Å—Ç–∞',
      '–î–µ–≤–∞': '23 –∞–≤–≥—É—Å—Ç–∞ - 22 —Å–µ–Ω—Ç—è–±—Ä—è',
      '–í–µ—Å—ã': '23 —Å–µ–Ω—Ç—è–±—Ä—è - 22 –æ–∫—Ç—è–±—Ä—è',
      '–°–∫–æ—Ä–ø–∏–æ–Ω': '23 –æ–∫—Ç—è–±—Ä—è - 21 –Ω–æ—è–±—Ä—è',
      '–°—Ç—Ä–µ–ª–µ—Ü': '22 –Ω–æ—è–±—Ä—è - 21 –¥–µ–∫–∞–±—Ä—è'
    };
    
    return periods[sunSign] || '–ü–µ—Ä–∏–æ–¥ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è';
  }
}

// ===== –ö–û–ú–ü–û–ù–ï–ù–¢ –°–û–ë–´–¢–ò–Ø =====
const AstroEvent = React.memo(({ 
  event, 
  onAddToFavorites, 
  expanded, 
  onToggleExpand 
}) => {
  const { theme } = useTheme();
  
  const statusConfig = STATUS_CONFIG[event.status] || STATUS_CONFIG.active;
  const influenceConfig = event.influence || INFLUENCE_LEVELS.MEDIUM;
  
  const styles = useMemo(() => ({
    eventCard: {
      background: `linear-gradient(135deg, ${statusConfig.color}10, transparent)`,
      border: `1px solid ${statusConfig.color}30`,
      borderLeft: `4px solid ${statusConfig.color}`,
      marginBottom: '16px',
      transition: 'all 0.3s ease',
      position: 'relative',
      overflow: 'hidden'
    },
    
    header: {
      display: 'flex',
      alignItems: 'center',
      marginBottom: '16px',
      cursor: 'pointer'
    },
    
    planetIcon: {
      fontSize: '32px',
      marginRight: '16px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: '48px',
      height: '48px',
      borderRadius: '50%',
      background: `${statusConfig.color}20`
    },
    
    eventInfo: {
      flex: 1
    },
    
    title: {
      fontSize: '18px',
      fontWeight: '700',
      margin: '0 0 8px 0',
      color: theme.colors.text
    },
    
    statusBadge: {
      display: 'inline-flex',
      alignItems: 'center',
      gap: '6px',
      background: `${statusConfig.color}20`,
      color: statusConfig.color,
      padding: '4px 12px',
      borderRadius: '12px',
      fontSize: '12px',
      fontWeight: '600',
      textTransform: 'uppercase'
    },
    
    period: {
      fontSize: '14px',
      color: theme.colors.textSecondary,
      fontStyle: 'italic',
      marginBottom: '12px'
    },
    
    influenceBadge: {
      display: 'inline-flex',
      alignItems: 'center',
      gap: '6px',
      background: `${influenceConfig.color}20`,
      color: influenceConfig.color,
      padding: '6px 12px',
      borderRadius: '20px',
      fontSize: '12px',
      fontWeight: '700',
      border: `2px solid ${influenceConfig.color}40`,
      margin: '0 8px 0 0'
    },
    
    description: {
      fontSize: '14px',
      lineHeight: '1.6',
      marginBottom: '16px',
      color: theme.colors.textSecondary
    },
    
    expandButton: {
      background: 'transparent',
      border: 'none',
      color: theme.colors.primary,
      cursor: 'pointer',
      fontSize: '14px',
      fontWeight: '600',
      padding: '8px',
      borderRadius: '8px',
      transition: 'background 0.2s ease'
    },
    
    actionsContainer: {
      display: 'flex',
      flexWrap: 'wrap',
      gap: '12px',
      alignItems: 'center',
      marginTop: '16px'
    }
  }), [theme, statusConfig, influenceConfig]);

  const handleAddToFavorites = useCallback(() => {
    onAddToFavorites?.({
      type: 'astro-event',
      title: event.title,
      content: `${event.title} - ${event.period}`,
      date: new Date().toLocaleDateString('ru-RU'),
      eventData: event
    });
  }, [event, onAddToFavorites]);

  return (
    <Card style={styles.eventCard}>
      <div style={styles.header} onClick={onToggleExpand}>
        <div style={styles.planetIcon}>
          {event.planetIcon}
        </div>
        <div style={styles.eventInfo}>
          <h3 style={styles.title}>{event.title}</h3>
          <div style={styles.statusBadge}>
            {statusConfig.icon} {statusConfig.label}
            {event.realTime && ' ‚Ä¢ LIVE'}
          </div>
        </div>
        <button style={styles.expandButton}>
          {expanded ? '‚ñº' : '‚ñ∂'}
        </button>
      </div>
      
      <div style={styles.period}>
        üìÖ {event.period}
      </div>
      
      {expanded && (
        <>
          <div 
            style={styles.description}
            dangerouslySetInnerHTML={{ __html: event.description }}
          />
          
          {event.advice && (
            <div style={{ marginBottom: '16px' }}>
              <h4 style={{ color: theme.colors.success, fontSize: '14px', marginBottom: '8px' }}>
                üí° –°–æ–≤–µ—Ç—ã:
              </h4>
              <ul style={{ margin: 0, paddingLeft: '20px', fontSize: '14px' }}>
                {event.advice.map((tip, index) => (
                  <li key={index} style={{ marginBottom: '4px', color: theme.colors.textSecondary }}>
                    {tip}
                  </li>
                ))}
              </ul>
            </div>
          )}
          
          {event.warnings && (
            <div style={{ marginBottom: '16px' }}>
              <h4 style={{ color: theme.colors.error, fontSize: '14px', marginBottom: '8px' }}>
                ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:
              </h4>
              <ul style={{ margin: 0, paddingLeft: '20px', fontSize: '14px' }}>
                {event.warnings.map((warning, index) => (
                  <li key={index} style={{ marginBottom: '4px', color: theme.colors.textSecondary }}>
                    {warning}
                  </li>
                ))}
              </ul>
            </div>
          )}
          
          {event.affectedSigns && (
            <div style={{ 
              background: `${theme.colors.info}20`,
              border: `1px solid ${theme.colors.info}30`,
              borderRadius: '8px',
              padding: '12px',
              marginBottom: '16px'
            }}>
              <strong style={{ color: theme.colors.info, fontSize: '14px' }}>
                üéØ –ù–∞–∏–±–æ–ª–µ–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∑–Ω–∞–∫–∏: {Array.isArray(event.affectedSigns) ? event.affectedSigns.join(', ') : event.affectedSigns}
              </strong>
            </div>
          )}
        </>
      )}
      
      <div style={styles.actionsContainer}>
        <div style={styles.influenceBadge}>
          {influenceConfig.icon} –í–ª–∏—è–Ω–∏–µ: {influenceConfig.level}
        </div>
        
        <Button variant="secondary" onClick={handleAddToFavorites}>
          ‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        </Button>
      </div>
    </Card>
  );
});

AstroEvent.displayName = 'AstroEvent';

// ===== –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ =====
const AstroEventsView = React.memo(({ 
  onAddToFavorites, 
  telegramApp,
  autoRefresh = true,
  refreshInterval = 60000 // 1 –º–∏–Ω—É—Ç–∞
}) => {
  const { theme } = useTheme();
  
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expandedEvents, setExpandedEvents] = useState(new Set([1])); // –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
  const [lastUpdate, setLastUpdate] = useState(null);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
  const styles = useMemo(() => ({
    container: {
      padding: '20px',
      maxWidth: '800px',
      margin: '0 auto'
    },
    
    header: {
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: '#ffffff',
      textAlign: 'center',
      marginBottom: '24px',
      position: 'relative',
      overflow: 'hidden',
      borderRadius: '16px',
      padding: '24px'
    },
    
    headerDecoration: {
      position: 'absolute',
      top: '-50px',
      right: '-50px',
      fontSize: '150px',
      opacity: 0.1
    },
    
    headerTitle: {
      margin: '0 0 8px 0',
      fontSize: '28px',
      fontWeight: '700'
    },
    
    headerDate: {
      margin: '0 0 16px 0',
      opacity: 0.9,
      fontSize: '16px'
    },
    
    updateBadge: {
      marginTop: '12px',
      padding: '8px 16px',
      background: 'rgba(255,255,255,0.2)',
      borderRadius: '20px',
      display: 'inline-block',
      fontSize: '14px',
      fontWeight: '600'
    },
    
    loadingContainer: {
      textAlign: 'center',
      padding: '60px 20px'
    },
    
    loadingIcon: {
      fontSize: '48px',
      marginBottom: '16px',
      animation: 'pulse 2s infinite'
    },
    
    errorContainer: {
      textAlign: 'center',
      padding: '40px 20px'
    },
    
    refreshButton: {
      position: 'fixed',
      bottom: '20px',
      right: '20px',
      width: '56px',
      height: '56px',
      borderRadius: '50%',
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      border: 'none',
      color: '#ffffff',
      cursor: 'pointer',
      fontSize: '20px',
      boxShadow: '0 4px 20px rgba(102, 126, 234, 0.4)',
      zIndex: 100,
      transition: 'all 0.3s ease'
    }
  }), [theme]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  const loadEvents = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è UX
      await new Promise(resolve => setTimeout(resolve, 800));
      
      const astroEvents = AstroEventsCalculator.getCurrentEvents();
      setEvents(astroEvents);
      setLastUpdate(new Date());
      
      console.log('‚úÖ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', astroEvents.length);
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    loadEvents();
  }, [loadEvents]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    if (!autoRefresh || refreshInterval <= 0) return;
    
    const interval = setInterval(() => {
      console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π');
      loadEvents();
    }, refreshInterval);
    
    return () => clearInterval(interval);
  }, [autoRefresh, refreshInterval, loadEvents]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleToggleExpand = useCallback((eventId) => {
    setExpandedEvents(prev => {
      const newSet = new Set(prev);
      if (newSet.has(eventId)) {
        newSet.delete(eventId);
      } else {
        newSet.add(eventId);
      }
      return newSet;
    });
    
    // Haptic feedback
    try {
      telegramApp?.HapticFeedback?.selectionChanged();
    } catch (error) {
      console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }, [telegramApp]);

  const handleRefresh = useCallback(() => {
    loadEvents();
    
    try {
      telegramApp?.HapticFeedback?.impactOccurred('light');
    } catch (error) {
      console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }, [loadEvents, telegramApp]);

  // –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (loading && events.length === 0) {
    return (
      <div style={styles.container}>
        <div style={styles.loadingContainer}>
          <div style={styles.loadingIcon}>üåå</div>
          <h3>–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ—Å–º–æ—Å—É...</h3>
          <p style={{ color: theme.colors.textSecondary }}>
            –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          </p>
        </div>
        
        <style>{`
          @keyframes pulse {
            0% { opacity: 0.6; transform: scale(1); }
            50% { opacity: 1; transform: scale(1.1); }
            100% { opacity: 0.6; transform: scale(1); }
          }
        `}</style>
      </div>
    );
  }

  if (error && events.length === 0) {
    return (
      <div style={styles.container}>
        <div style={styles.errorContainer}>
          <h3 style={{ color: theme.colors.error }}>‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p style={{ color: theme.colors.textSecondary, marginBottom: '20px' }}>
            {error}
          </p>
          <Button onClick={handleRefresh}>
            üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.container}>
      {/* CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π */}
      <style>{`
        @keyframes pulse {
          0% { opacity: 0.6; transform: scale(1); }
          50% { opacity: 1; transform: scale(1.1); }
          100% { opacity: 0.6; transform: scale(1); }
        }
      `}</style>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={styles.header}>
        <div style={styles.headerDecoration}>üåå</div>
        
        <h1 style={styles.headerTitle}>
          –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –°–æ–±—ã—Ç–∏—è
        </h1>
        
        <p style={styles.headerDate}>
          üìÖ {new Date().toLocaleDateString('ru-RU', { 
            weekday: 'long',
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </p>
        
        <div style={styles.updateBadge}>
          üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdate ? lastUpdate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
          }) : '—Å–µ–π—á–∞—Å'}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π */}
      {events.map(event => (
        <AstroEvent
          key={event.id}
          event={event}
          onAddToFavorites={onAddToFavorites}
          expanded={expandedEvents.has(event.id)}
          onToggleExpand={() => handleToggleExpand(event.id)}
        />
      ))}

      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <button
        style={styles.refreshButton}
        onClick={handleRefresh}
        disabled={loading}
        onMouseEnter={(e) => {
          e.target.style.transform = 'scale(1.1)';
          e.target.style.boxShadow = '0 6px 25px rgba(102, 126, 234, 0.6)';
        }}
        onMouseLeave={(e) => {
          e.target.style.transform = 'scale(1)';
          e.target.style.boxShadow = '0 4px 20px rgba(102, 126, 234, 0.4)';
        }}
      >
        {loading ? '‚è≥' : 'üîÑ'}
      </button>
    </div>
  );
});

AstroEventsView.displayName = 'AstroEventsView';

export default AstroEventsView;
