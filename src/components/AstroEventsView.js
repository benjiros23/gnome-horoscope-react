// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// src/components/AstroEventsView.js
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è–º–∏ –∞–≤–≥—É—Å—Ç 2025
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
import React, { useEffect, useState } from 'react';
import { useAPI } from '../hooks/useAPI';
import './AstroEventsView.css';

/* --- —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–π --- */
const typeColors = {
  planet_alignment: '#FF6B6B',
  full_moon: '#FFC107',
  new_moon: '#607D8B',
  meteor_shower: '#E91E63',
  planet_conjunction: '#9C27B0',
  planet_transit: '#4CAF50',
  moon_planets: '#FF9800',
  moon_mars: '#F44336',
  eclipse: '#E91E63'
};

/* --- –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π --- */
const typeIcons = {
  planet_alignment: 'ü™ê',
  full_moon: 'üåï',
  new_moon: 'üåë',
  meteor_shower: '‚òÑÔ∏è',
  planet_conjunction: 'üí´',
  planet_transit: 'üîÑ',
  moon_planets: 'üåô',
  moon_mars: 'üî¥',
  eclipse: 'üåò'
};

function AstroEventsView({ onBack, onAddToFavorites, telegramApp }) {
  const { getAstroEvents, loading, error } = useAPI();
  const [events, setEvents] = useState([]);
  const [selectedEvent, setSelectedEvent] = useState(null);

  /* –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ */
  useEffect(() => {
    getAstroEvents()
      .then(response => {
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º events
        console.log('üåå –ü–æ–ª—É—á–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è:', response);
        if (response && response.events && Array.isArray(response.events)) {
          setEvents(response.events);
        } else {
          console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', response);
          setEvents([]);
        }
      })
      .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–π:', error);
        setEvents([]);
      });
  }, [getAstroEvents]);

  // Haptic feedback –¥–ª—è Telegram
  const hapticFeedback = (type = 'impact', style = 'light') => {
    if (telegramApp?.HapticFeedback) {
      try {
        if (type === 'impact') {
          telegramApp.HapticFeedback.impactOccurred(style);
        } else if (type === 'selection') {
          telegramApp.HapticFeedback.selectionChanged();
        }
      } catch (e) {
        console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
      }
    }
  };

  // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const handleAddToFavorites = (evt) => {
    if (onAddToFavorites) {
      const favoriteItem = {
        id: Date.now() + Math.random(),
        type: 'astro-event',
        title: `${typeIcons[evt.type] || 'üåå'} ${evt.title}`,
        content: evt.shortText,
        date: evt.date,
        source: 'astronomy_data'
      };
      
      onAddToFavorites(favoriteItem);
      hapticFeedback('impact', 'light');
      
      if (telegramApp) {
        telegramApp.showAlert('‚ù§Ô∏è –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
      } else {
        alert('‚ù§Ô∏è –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
      }
    }
  };

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
  const handleShowDetails = (evt) => {
    setSelectedEvent(evt);
    hapticFeedback('selection');
  };

  // –ó–∞–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏
  const handleCloseDetails = () => {
    setSelectedEvent(null);
    hapticFeedback('impact', 'light');
  };

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–µ–º
  const handleShare = (evt) => {
    if (telegramApp) {
      const shareText = `üåå ${evt.title}\nüìÖ ${evt.date}\n\n${evt.shortText}\n\nüßô‚Äç‚ôÇÔ∏è #–ì–Ω–æ–º–∏–π–ì–æ—Ä–æ—Å–∫–æ–ø #–ê—Å—Ç—Ä–æ–°–æ–±—ã—Ç–∏—è2025`;
      
      telegramApp.sendData(JSON.stringify({
        action: 'share_astro_event',
        title: evt.title,
        date: evt.date,
        text: evt.shortText
      }));
      
      hapticFeedback('impact', 'medium');
    } else {
      // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
      if (navigator.share) {
        navigator.share({
          title: `üåå ${evt.title}`,
          text: evt.shortText,
          url: window.location.href
        });
      }
    }
  };

  return (
    <div className="astro-view content-enter">
      <div className="card">
        <h3 className="astro-title">üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è –∞–≤–≥—É—Å—Ç–∞ 2025</h3>
        <p className="astro-subtitle">–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞</p>
        
        {loading && (
          <div className="loading-state">
            <div className="loading-spinner">üî≠</div>
            <p>–ó–≤—ë–∑–¥—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è‚Ä¶</p>
          </div>
        )}
        
        {error && (
          <div className="error-state">
            <p className="astro-status error">‚ùå –û—à–∏–±–∫–∞: {error}</p>
            <small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</small>
          </div>
        )}
        
        {!loading && !error && events.length === 0 && (
          <div className="empty-state">
            <div className="empty-icon">üåå</div>
            <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏–π</p>
            <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</small>
          </div>
        )}
        
        {events.length > 0 && (
          <>
            <div className="events-summary">
              <p>üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π –≤ –∞–≤–≥—É—Å—Ç–µ: <strong>{events.length}</strong></p>
              <small>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {new Date().toLocaleDateString('ru-RU')}</small>
            </div>
            
            <div className="astro-list">
              {events.map((evt, index) => (
                <div
                  key={`${evt.type}-${index}-${evt.date}`}
                  className="astro-item"
                  style={{ borderLeftColor: typeColors[evt.type] || '#9C27B0' }}
                  onClick={() => handleShowDetails(evt)}
                >
                  <div className="astro-date">
                    <div className="event-icon">
                      {typeIcons[evt.type] || 'üåå'}
                    </div>
                    <div className="date-text">
                      {evt.date || 'TBA'}
                    </div>
                  </div>
                  
                  <div className="astro-body">
                    <h4 className="astro-event-title">{evt.title}</h4>
                    <p className="astro-text">{evt.shortText}</p>
                    
                    {evt.visibility && (
                      <div className="visibility-info">
                        üëÄ {evt.visibility}
                      </div>
                    )}
                    
                    <div className="event-actions">
                      <button 
                        className="btn-primary btn-small" 
                        onClick={(e) => {
                          e.stopPropagation();
                          handleAddToFavorites(evt);
                        }}
                      >
                        ‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                      </button>
                      
                      <button 
                        className="btn-secondary btn-small" 
                        onClick={(e) => {
                          e.stopPropagation();
                          handleShare(evt);
                        }}
                      >
                        üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </>
        )}
        
        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–æ–±—ã—Ç–∏—è */}
        {selectedEvent && (
          <div className="event-modal" onClick={handleCloseDetails}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <div className="modal-header">
                <h3>{typeIcons[selectedEvent.type]} {selectedEvent.title}</h3>
                <button className="close-btn" onClick={handleCloseDetails}>√ó</button>
              </div>
              
              <div className="modal-body">
                <div className="event-detail">
                  <strong>üìÖ –î–∞—Ç–∞:</strong> {selectedEvent.date}
                </div>
                
                {selectedEvent.fullDate && (
                  <div className="event-detail">
                    <strong>üïê –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è:</strong> {new Date(selectedEvent.fullDate).toLocaleString('ru-RU')}
                  </div>
                )}
                
                <div className="event-detail">
                  <strong>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</strong>
                  <p>{selectedEvent.shortText}</p>
                </div>
                
                {selectedEvent.visibility && (
                  <div className="event-detail">
                    <strong>üëÄ –í–∏–¥–∏–º–æ—Å—Ç—å:</strong> {selectedEvent.visibility}
                  </div>
                )}
                
                <div className="modal-actions">
                  <button 
                    className="btn-primary"
                    onClick={() => handleAddToFavorites(selectedEvent)}
                  >
                    ‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div className="action-buttons">
          <button className="btn-secondary" onClick={onBack}>
            ‚Üê –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          </button>
        </div>
      </div>
    </div>
  );
}

export default AstroEventsView;
