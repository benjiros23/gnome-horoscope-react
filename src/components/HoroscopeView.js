import React, { useState, useEffect, useRef } from 'react';
import { useAPI } from '../hooks/useAPI';
import { saveToCache, loadFromCache, clearCache } from '../utils/cache';

function HoroscopeView({ selectedSign, onBack, onAddToFavorites, telegramApp }) {
  const { getHoroscope, loading, error, clearError } = useAPI();
  const [horoscopeData, setHoroscopeData] = useState(null);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [isFromCache, setIsFromCache] = useState(false);
  const loadingTimeoutRef = useRef(null);
  const lastLoadedSignRef = useRef(null);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ –¥–µ–Ω—å
  useEffect(() => {
    // –ï—Å–ª–∏ –∑–Ω–∞–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º
    if (lastLoadedSignRef.current === selectedSign) {
      return;
    }

    if (!selectedSign) {
      return;
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (loadingTimeoutRef.current) {
      clearTimeout(loadingTimeoutRef.current);
    }

    const cacheKeyName = `horoscope_${selectedSign}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Å–Ω–∞—á–∞–ª–∞
    const cachedData = loadFromCache(cacheKeyName);
    if (cachedData) {
      console.log(`‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${selectedSign} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–µ—à–∞`);
      setHoroscopeData(cachedData);
      setIsFromCache(true);
      lastLoadedSignRef.current = selectedSign;
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞
    loadingTimeoutRef.current = setTimeout(async () => {
      try {
        clearError();
        setIsFromCache(false);
        console.log(`üîÆ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${selectedSign}...`);
        
        const data = await getHoroscope(selectedSign);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å
        saveToCache(cacheKeyName, data);
        
        setHoroscopeData(data);
        lastLoadedSignRef.current = selectedSign;
        
        // Haptic feedback –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if (telegramApp?.HapticFeedback) {
          try {
            telegramApp.HapticFeedback.notificationOccurred('success');
          } catch (e) {
            console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
          }
        }
        
        console.log('‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à:', data);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', err);
        setIsFromCache(false);
        
        // Haptic feedback –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (telegramApp?.HapticFeedback) {
          try {
            telegramApp.HapticFeedback.notificationOccurred('error');
          } catch (e) {
            console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
          }
        }
      }
    }, 300);

    return () => {
      if (loadingTimeoutRef.current) {
        clearTimeout(loadingTimeoutRef.current);
      }
    };
  }, [selectedSign, getHoroscope, clearError, telegramApp]);

  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const handleAddToFavorites = () => {
    if (horoscopeData && onAddToFavorites) {
      const favoriteItem = {
        id: Date.now(),
        type: 'horoscope',
        title: `üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${selectedSign}`,
        content: horoscopeData.text,
        date: new Date().toLocaleDateString('ru-RU'),
        source: horoscopeData.source || 'internet'
      };
      
      onAddToFavorites(favoriteItem);
      
      if (telegramApp) {
        telegramApp.showAlert('‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
      } else {
        alert('‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
      }
      
      if (telegramApp?.HapticFeedback) {
        try {
          telegramApp.HapticFeedback.impactOccurred('light');
        } catch (e) {
          console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
        }
      }
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
  const handleGetNewHoroscope = async () => {
    if (selectedSign) {
      try {
        const cacheKeyName = `horoscope_${selectedSign}`;
        clearCache(cacheKeyName); // –û—á–∏—â–∞–µ–º –∫–µ—à
        
        lastLoadedSignRef.current = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        clearError();
        setIsFromCache(false);
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞...');
        
        const data = await getHoroscope(selectedSign);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –∫–µ—à
        saveToCache(cacheKeyName, data);
        
        setHoroscopeData(data);
        lastLoadedSignRef.current = selectedSign;
        
        if (telegramApp?.HapticFeedback) {
          try {
            telegramApp.HapticFeedback.impactOccurred('medium');
          } catch (e) {
            console.log('Haptic feedback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', e.message);
          }
        }
        
        console.log('‚úÖ –ù–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', data);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', err);
        lastLoadedSignRef.current = selectedSign;
      }
    }
  };

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–º
  const handleShare = () => {
    if (horoscopeData && telegramApp) {
      const shareText = `üßô‚Äç‚ôÇÔ∏è –ì–Ω–æ–º–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${selectedSign}:\n\n${horoscopeData.text}\n\n#–ì–Ω–æ–º–∏–π–ì–æ—Ä–æ—Å–∫–æ–ø`;
      
      telegramApp.sendData(JSON.stringify({
        action: 'share_horoscope',
        sign: selectedSign,
        text: horoscopeData.text
      }));
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      return '–°–µ–≥–æ–¥–Ω—è';
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –±–µ–π–¥–∂ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  const getSourceBadge = () => {
    if (!horoscopeData) return null;
    
    if (isFromCache) {
      return (
        <div className="source-badge cached">
          üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –¥–µ–Ω—å
        </div>
      );
    } else if (horoscopeData.source === 'offline') {
      return (
        <div className="source-badge offline">
          üì± –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
        </div>
      );
    } else {
      return (
        <div className="source-badge online">
          üåê –ñ–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        </div>
      );
    }
  };

  return (
    <div className="horoscope-view content-enter">
      <div className="card">
        <div className="content-header">
          <h3 className="content-title">üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</h3>
          {!isOnline && (
            <div className="offline-indicator">
              üìµ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            </div>
          )}
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {loading && (
          <div className="loading-container">
            <div className="loading-indicator">
              –ó–≤–µ–∑–¥—ã —à–µ–ø—á—É—Ç –≥–Ω–æ–º—É-–∑–≤–µ–∑–¥–æ—á–µ—Ç—É...
            </div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {selectedSign}</p>
          </div>
        )}

        {/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {error && !loading && (
          <div className="error-container">
            <div className="error-icon">‚ö†Ô∏è</div>
            <h4>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø</h4>
            <p className="error-message">{error}</p>
            <div className="error-actions">
              <button className="btn-primary" onClick={handleGetNewHoroscope}>
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
              <button className="btn-secondary" onClick={onBack}>
                ‚Üê –ù–∞–∑–∞–¥
              </button>
            </div>
          </div>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ */}
        {horoscopeData && !loading && (
          <div className="horoscope-content">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="horoscope-header">
              <div className="sign-info">
                <h4 className="sign-name">{selectedSign}</h4>
                <p className="date-info">{formatDate(horoscopeData.date)}</p>
              </div>
              {getSourceBadge()}
            </div>

            {/* –¢–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ */}
            <div className="horoscope-text-container">
              <div className="content-highlight">
                <p className="horoscope-text">{horoscopeData.text}</p>
              </div>
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            {horoscopeData.mood && (
              <div className="extra-info">
                <h5>üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</h5>
                <p>{horoscopeData.mood}</p>
              </div>
            )}

            {horoscopeData.color && (
              <div className="extra-info">
                <h5>üé® –¶–≤–µ—Ç –¥–Ω—è:</h5>
                <span className="lucky-color" style={{ backgroundColor: horoscopeData.color }}>
                  {horoscopeData.color}
                </span>
              </div>
            )}

            {horoscopeData.luckyNumber && (
              <div className="extra-info">
                <h5>üçÄ –°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ:</h5>
                <span className="lucky-number">{horoscopeData.luckyNumber}</span>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="action-buttons">
              <button 
                className="btn-favorite" 
                onClick={handleAddToFavorites}
                title="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
              >
                ‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
              </button>
              
              {telegramApp && (
                <button 
                  className="btn-primary" 
                  onClick={handleShare}
                  title="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
                >
                  üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                </button>
              )}
              
              <button 
                className="btn-secondary" 
                onClick={handleGetNewHoroscope}
                title="–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à)"
              >
                üîÑ –ù–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
              </button>
              
              <button 
                className="btn-secondary" 
                onClick={onBack}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ */}
            <div className="source-info">
              <small>
                {isFromCache 
                  ? 'üíæ –ì–æ—Ä–æ—Å–∫–æ–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π!'
                  : horoscopeData.source === 'offline' 
                    ? 'üì± –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
                    : 'üåê –°–≤–µ–∂–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –æ—Ç –≥–Ω–æ–º—å–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤'
                }
              </small>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default HoroscopeView;
