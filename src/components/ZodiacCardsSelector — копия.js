// src/components/ZodiacCardsSelector.js
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useTheme } from '../contexts/ThemeContext';
import '../styles/carousel.css';

const ZodiacCardsSelector = ({ 
  onSignSelect, 
  selectedSign = null,
  showTitle = true,
  compact = false 
}) => {
  const { theme } = useTheme();
  const [activeIndex, setActiveIndex] = useState(0);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  const scrollRef = useRef(null);
  const scrollTimeout = useRef(null);

  // –î–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
  const zodiacSigns = [
    { id: 'aries', sign: '–û–≤–µ–Ω', emoji: '‚ôà', dates: '21.03 - 20.04', element: '–û–≥–æ–Ω—å',
      gnome: { name: '–ì–Ω–æ–º –û–≥–Ω–µ–±–æ—Ä–æ–¥', title: '–ë–æ–µ–≤–æ–π –∫—É–∑–Ω–µ—Ü', image: 'aries.png', colors: ['#FF6B6B', '#FF8E53'] }},
    { id: 'taurus', sign: '–¢–µ–ª–µ—Ü', emoji: '‚ôâ', dates: '21.04 - 20.05', element: '–ó–µ–º–ª—è',
      gnome: { name: '–ì–Ω–æ–º –ó–ª–∞—Ç–æ—Ä—É–¥', title: '–ú–∞—Å—Ç–µ—Ä —Å–æ–∫—Ä–æ–≤–∏—â', image: 'taurus.png', colors: ['#4ECDC4', '#44A08D'] }},
    { id: 'gemini', sign: '–ë–ª–∏–∑–Ω–µ—Ü—ã', emoji: '‚ôä', dates: '21.05 - 21.06', element: '–í–æ–∑–¥—É—Ö',
      gnome: { name: '–ì–Ω–æ–º –î–≤–æ–π–Ω—è—à–∫–∞', title: '–ú–∞—Å—Ç–µ—Ä —Å–ª–æ–≤–∞', image: 'gemini.png', colors: ['#A8E6CF', '#7FCDCD'] }},
    { id: 'cancer', sign: '–†–∞–∫', emoji: '‚ôã', dates: '22.06 - 22.07', element: '–í–æ–¥–∞',
      gnome: { name: '–ì–Ω–æ–º –î–æ–º–æ–≤–æ–π', title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –æ—á–∞–≥–∞', image: 'cancer.png', colors: ['#FFB6C1', '#FFA07A'] }},
    { id: 'leo', sign: '–õ–µ–≤', emoji: '‚ôå', dates: '23.07 - 22.08', element: '–û–≥–æ–Ω—å',
      gnome: { name: '–ì–Ω–æ–º –ó–ª–∞—Ç–æ–≥—Ä–∏–≤', title: '–ö–æ—Ä–æ–ª—å –ø–æ–¥–∑–µ–º–µ–ª–∏–π', image: 'leo.png', colors: ['#FF6B6B', '#FF8E53'] }},
    { id: 'virgo', sign: '–î–µ–≤–∞', emoji: '‚ôç', dates: '23.08 - 22.09', element: '–ó–µ–º–ª—è',
      gnome: { name: '–ì–Ω–æ–º –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π', title: '–ú–∞—Å—Ç–µ—Ä –¥–µ—Ç–∞–ª–µ–π', image: 'virgo.png', colors: ['#4ECDC4', '#44A08D'] }},
    { id: 'libra', sign: '–í–µ—Å—ã', emoji: '‚ôé', dates: '23.09 - 22.10', element: '–í–æ–∑–¥—É—Ö',
      gnome: { name: '–ì–Ω–æ–º –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π', title: '–°—É–¥—å—è –≥–æ—Ä', image: 'libra.png', colors: ['#A8E6CF', '#7FCDCD'] }},
    { id: 'scorpio', sign: '–°–∫–æ—Ä–ø–∏–æ–Ω', emoji: '‚ôè', dates: '23.10 - 22.11', element: '–í–æ–¥–∞',
      gnome: { name: '–ì–Ω–æ–º –¢–∞–π–Ω–æ–≤–µ–¥', title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å —Å–µ–∫—Ä–µ—Ç–æ–≤', image: 'scorpio.png', colors: ['#FFB6C1', '#FFA07A'] }},
    { id: 'sagittarius', sign: '–°—Ç—Ä–µ–ª–µ—Ü', emoji: '‚ôê', dates: '23.11 - 21.12', element: '–û–≥–æ–Ω—å',
      gnome: { name: '–ì–Ω–æ–º –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø–µ—â–µ—Ä', image: 'sagittarius.png', colors: ['#FF6B6B', '#FF8E53'] }},
    { id: 'capricorn', sign: '–ö–æ–∑–µ—Ä–æ–≥', emoji: '‚ôë', dates: '22.12 - 20.01', element: '–ó–µ–º–ª—è',
      gnome: { name: '–ì–Ω–æ–º –ì–æ—Ä–æ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª—å', title: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å –∏–º–ø–µ—Ä–∏–π', image: 'capricorn.png', colors: ['#4ECDC4', '#44A08D'] }},
    { id: 'aquarius', sign: '–í–æ–¥–æ–ª–µ–π', emoji: '‚ôí', dates: '21.01 - 19.02', element: '–í–æ–∑–¥—É—Ö',
      gnome: { name: '–ì–Ω–æ–º –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å', title: '–ì–µ–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤', image: 'aquarius.png', colors: ['#A8E6CF', '#7FCDCD'] }},
    { id: 'pisces', sign: '–†—ã–±—ã', emoji: '‚ôì', dates: '20.02 - 20.03', element: '–í–æ–¥–∞',
      gnome: { name: '–ì–Ω–æ–º –ú–µ—á—Ç–∞—Ç–µ–ª—å', title: '–ü—Ä–æ—Ä–æ–∫ –≥–ª—É–±–∏–Ω', image: 'pisces.png', colors: ['#FFB6C1', '#FFA07A'] }}
  ];

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
  useEffect(() => {
    const handleResize = () => setIsMobile(window.innerWidth <= 768);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const handleScroll = useCallback(() => {
    if (!scrollRef.current) return;

    const container = scrollRef.current;
    const cardWidth = isMobile ? 260 : 280;
    const gap = isMobile ? 16 : 20;
    const itemWidth = cardWidth + gap;
    
    if (scrollTimeout.current) clearTimeout(scrollTimeout.current);
    
    scrollTimeout.current = setTimeout(() => {
      const scrollLeft = container.scrollLeft + container.clientWidth / 2;
      const newIndex = Math.round((scrollLeft - (isMobile ? 50 : 60)) / itemWidth);
      const clampedIndex = Math.max(0, Math.min(newIndex, zodiacSigns.length - 1));

      if (clampedIndex !== activeIndex) {
        setActiveIndex(clampedIndex);
        
        // Haptic feedback
        const tg = window.Telegram?.WebApp;
        if (tg?.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
          try {
            tg.HapticFeedback.impactOccurred('light');
          } catch (e) {}
        }
      }
    }, 100);
  }, [isMobile, activeIndex, zodiacSigns.length]);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∞–º–∏
  const scrollToIndex = useCallback((index) => {
    if (!scrollRef.current) return;
    
    const container = scrollRef.current;
    const cardWidth = isMobile ? 260 : 280;
    const gap = isMobile ? 16 : 20;
    const itemWidth = cardWidth + gap;
    
    const targetScroll = index * itemWidth - (container.clientWidth / 2) + (cardWidth / 2) + (isMobile ? 50 : 60);
    
    container.scrollTo({
      left: targetScroll,
      behavior: 'smooth'
    });
    
    setActiveIndex(index);
  }, [isMobile]);

  const handlePrevious = () => {
    const newIndex = activeIndex > 0 ? activeIndex - 1 : zodiacSigns.length - 1;
    scrollToIndex(newIndex);
  };

  const handleNext = () => {
    const newIndex = activeIndex < zodiacSigns.length - 1 ? activeIndex + 1 : 0;
    scrollToIndex(newIndex);
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
  const getCardClass = (index) => {
    const isActive = index === activeIndex;
    const isNearby = Math.abs(index - activeIndex) === 1;
    
    let className = 'modern-carousel-card';
    if (isActive) className += ' active';
    else if (isNearby) className += ' nearby';
    
    return className;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–∞
  const handleSignSelect = () => {
    const selectedSign = zodiacSigns[activeIndex];
    
    if (onSignSelect) {
      onSignSelect(selectedSign);
    }

    const tg = window.Telegram?.WebApp;
    if (tg?.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
      try {
        tg.HapticFeedback.impactOccurred('medium');
      } catch (e) {}
    }

    localStorage.setItem('gnome-selected-sign', JSON.stringify(selectedSign));
    console.log('üîÆ –í—ã–±—Ä–∞–Ω –∑–Ω–∞–∫:', selectedSign);
  };

  const getCurrentSign = () => zodiacSigns[activeIndex];

  return (
    <div 
      style={{
        width: '100%',
        height: '100vh',
        display: 'flex',
        flexDirection: 'column',
        paddingTop: isMobile ? '10px' : '20px',
        paddingBottom: '120px',
        justifyContent: 'flex-start',
        boxSizing: 'border-box'
      }}
    >
      
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      {showTitle && (
        <div style={{
          textAlign: 'center',
          marginBottom: theme.spacing.md,
          padding: `0 ${theme.spacing.md}`,
          flexShrink: 0
        }}>
          <h1 style={{
            fontSize: isMobile ? theme.typography.sizes.lg : theme.typography.sizes.xl,
            fontWeight: theme.typography.weights.bold,
            color: theme.colors.text,
            marginBottom: theme.spacing.xs,
            textShadow: '2px 2px 4px rgba(0,0,0,0.8)'
          }}>
            üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
          </h1>
          <p style={{
            fontSize: isMobile ? theme.typography.sizes.sm : theme.typography.sizes.md,
            color: theme.colors.textSecondary,
            margin: 0,
            textShadow: '1px 1px 2px rgba(0,0,0,0.6)'
          }}>
            –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏
          </p>
        </div>
      )}

      {/* –ö–∞—Ä—É—Å–µ–ª—å */}
      <div className="modern-carousel-container">
        
        {/* –õ–µ–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞ */}
        <div className="carousel-arrow left" onClick={handlePrevious}>
          ‚Üê
        </div>
        
        {/* –ü—Ä–∞–≤–∞—è —Å—Ç—Ä–µ–ª–∫–∞ */}
        <div className="carousel-arrow right" onClick={handleNext}>
          ‚Üí
        </div>
        
        {/* –¢—Ä–µ–∫ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ */}
        <div
          ref={scrollRef}
          className="carousel-track"
          onScroll={handleScroll}
        >
          {zodiacSigns.map((sign, index) => (
            <div
              key={sign.id}
              className={getCardClass(index)}
            >
              <img
                src={`${process.env.PUBLIC_URL || ''}/assets/gnomes/${sign.gnome.image}`}
                alt={sign.gnome.name}
                onError={(e) => {
                  e.target.style.display = 'none';
                  e.target.parentElement.innerHTML = `
                    <div style="
                      display: flex; 
                      align-items: center; 
                      justify-content: center; 
                      height: 100%; 
                      font-size: 4rem; 
                      background: linear-gradient(135deg, ${sign.gnome.colors[0]}, ${sign.gnome.colors[1]});
                      color: white;
                      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
                      border-radius: 16px;
                    ">
                      ${sign.emoji}
                    </div>`;
                }}
                loading="lazy"
              />
              
              <div className="card-gradient" />
              
              <div className="element-badge">
                {sign.element}
              </div>

              <div className="card-text-area">
                <h3 className="card-sign-name">{sign.sign}</h3>
                <p className="card-dates">{sign.dates}</p>
                <h4 className="card-gnome-name">{sign.gnome.name}</h4>
                <p className="card-gnome-title">{sign.gnome.title}</p>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ */}
      <button
        className="modern-select-button"
        onClick={handleSignSelect}
      >
        ‚ú® –í—ã–±—Ä–∞—Ç—å {getCurrentSign()?.sign}
      </button>
    </div>
  );
};

export default ZodiacCardsSelector;
