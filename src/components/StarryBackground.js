// src/components/StarryBackground.js
import React, { useRef, useEffect } from 'react';

const StarryBackground = () => {
  const canvasRef = useRef(null);
  const animationRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞
    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    };
    
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // ‚úÖ –°–û–ó–í–ï–ó–î–ò–Ø - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const constellations = [
      // –ë–æ–ª—å—à–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞
      {
        stars: [
          {x: 0.15, y: 0.25}, {x: 0.18, y: 0.20}, {x: 0.22, y: 0.18}, 
          {x: 0.26, y: 0.22}, {x: 0.24, y: 0.28}, {x: 0.20, y: 0.30}, 
          {x: 0.16, y: 0.28}
        ],
        connections: [[0,1], [1,2], [2,3], [3,4], [4,5], [5,6], [6,0]],
        name: '–ë–æ–ª—å—à–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞'
      },
      // –û—Ä–∏–æ–Ω
      {
        stars: [
          {x: 0.75, y: 0.35}, {x: 0.78, y: 0.40}, {x: 0.72, y: 0.45}, 
          {x: 0.74, y: 0.50}, {x: 0.76, y: 0.42}, {x: 0.80, y: 0.38}
        ],
        connections: [[0,1], [1,2], [2,3], [1,4], [4,5]],
        name: '–û—Ä–∏–æ–Ω'
      },
      // –ö–∞—Å—Å–∏–æ–ø–µ—è
      {
        stars: [
          {x: 0.85, y: 0.15}, {x: 0.82, y: 0.18}, {x: 0.80, y: 0.12}, 
          {x: 0.77, y: 0.16}, {x: 0.74, y: 0.10}
        ],
        connections: [[0,1], [1,2], [2,3], [3,4]],
        name: '–ö–∞—Å—Å–∏–æ–ø–µ—è'
      }
    ];

    // ‚úÖ –û–ë–´–ß–ù–´–ï –ó–í–ï–ó–î–´
    const stars = [];
    for (let i = 0; i < 200; i++) {
      stars.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        radius: Math.random() * 2 + 0.5,
        opacity: Math.random() * 0.8 + 0.2,
        twinkleSpeed: Math.random() * 0.02 + 0.01
      });
    }

    // ‚úÖ –ö–û–ú–ï–¢–´
    const comets = [];
    
    // üßô‚Äç‚ôÇÔ∏è –ú–ê–ì–ò–ß–ï–°–ö–ò–ï –ß–ê–°–¢–ò–¶–´
    const magicParticles = [];
    
    // üßô‚Äç‚ôÇÔ∏è –ì–ù–û–ú–¨–ò –¶–í–ï–¢–ê –î–õ–Ø –ú–ê–ì–ò–ß–ï–°–ö–ò–• –≠–§–§–ï–ö–¢–û–í
    const gnomeColors = [
      '#FF6B6B', // –ö—Ä–∞—Å–Ω—ã–π –≥–Ω–æ–º
      '#4ECDC4', // –ë–∏—Ä—é–∑–æ–≤—ã–π –≥–Ω–æ–º
      '#45B7D1', // –°–∏–Ω–∏–π –≥–Ω–æ–º
      '#FFA07A', // –û—Ä–∞–Ω–∂–µ–≤—ã–π –≥–Ω–æ–º
      '#98D8C8', // –ó–µ–ª–µ–Ω—ã–π –≥–Ω–æ–º
      '#F7DC6F', // –ñ–µ–ª—Ç—ã–π –≥–Ω–æ–º
      '#BB8FCE', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –≥–Ω–æ–º
      '#85C1E9'  // –ì–æ–ª—É–±–æ–π –≥–Ω–æ–º
    ];
    
    const createComet = () => {
      // –ö–æ–º–µ—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω —ç–∫—Ä–∞–Ω–∞
      const side = Math.floor(Math.random() * 4);
      let startX, startY, endX, endY;
      
      switch(side) {
        case 0: // –°–≤–µ—Ä—Ö—É
          startX = Math.random() * canvas.width;
          startY = -50;
          endX = Math.random() * canvas.width;
          endY = canvas.height + 50;
          break;
        case 1: // –°–ø—Ä–∞–≤–∞
          startX = canvas.width + 50;
          startY = Math.random() * canvas.height;
          endX = -50;
          endY = Math.random() * canvas.height;
          break;
        case 2: // –°–Ω–∏–∑—É
          startX = Math.random() * canvas.width;
          startY = canvas.height + 50;
          endX = Math.random() * canvas.width;
          endY = -50;
          break;
        default: // –°–ª–µ–≤–∞
          startX = -50;
          startY = Math.random() * canvas.height;
          endX = canvas.width + 50;
          endY = Math.random() * canvas.height;
      }

      return {
        x: startX,
        y: startY,
        endX: endX,
        endY: endY,
        speed: Math.random() * 3 + 2,
        tail: [],
        maxTailLength: Math.random() * 20 + 15,
        brightness: Math.random() * 0.5 + 0.5,
        hue: Math.random() * 60 + 180, // –ì–æ–ª—É–±—ã–µ/–±–µ–ª—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
        color: gnomeColors[Math.floor(Math.random() * gnomeColors.length)] // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç
      };
    };

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–µ—Ç—ã
    for (let i = 0; i < 3; i++) {
      comets.push(createComet());
    }
    
    // üßô‚Äç‚ôÇÔ∏è –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ú–ê–ì–ò–ß–ï–°–ö–û–ô –ß–ê–°–¢–ò–¶–´
    const createMagicParticle = () => {
      return {
        x: Math.random() * canvas.width,
        y: canvas.height + 10,
        size: Math.random() * 3 + 1,
        speed: Math.random() * 2 + 0.5,
        opacity: 0.8,
        color: gnomeColors[Math.floor(Math.random() * gnomeColors.length)],
        life: Math.random() * 100 + 60,
        maxLife: 160,
        float: (Math.random() - 0.5) * 1.5
      };
    };

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø –û–¢–†–ò–°–û–í–ö–ò
    const draw = () => {
      // –û—á–∏—Å—Ç–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º
      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradient.addColorStop(0, '#000428');
      gradient.addColorStop(1, '#004e92');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // ‚úÖ –†–ò–°–£–ï–ú –û–ë–´–ß–ù–´–ï –ó–í–ï–ó–î–´ (—Å –º–µ—Ä—Ü–∞–Ω–∏–µ–º)
      stars.forEach(star => {
        star.opacity += Math.sin(Date.now() * star.twinkleSpeed) * 0.01;
        star.opacity = Math.max(0.1, Math.min(1, star.opacity));
        
        ctx.beginPath();
        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity})`;
        ctx.fill();
        
        // –°–≤–µ—á–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ —è—Ä–∫–∏—Ö –∑–≤–µ–∑–¥
        if (star.radius > 1.5) {
          ctx.beginPath();
          ctx.arc(star.x, star.y, star.radius * 3, 0, Math.PI * 2);
          ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity * 0.1})`;
          ctx.fill();
        }
      });

      // ‚úÖ –†–ò–°–£–ï–ú –°–û–ó–í–ï–ó–î–ò–Ø
      constellations.forEach(constellation => {
        // –†–∏—Å—É–µ–º –∑–≤–µ–∑–¥—ã —Å–æ–∑–≤–µ–∑–¥–∏–π (–±–æ–ª—å—à–µ –æ–±—ã—á–Ω—ã—Ö)
        constellation.stars.forEach(star => {
          const x = star.x * canvas.width;
          const y = star.y * canvas.height;
          
          ctx.beginPath();
          ctx.arc(x, y, 3, 0, Math.PI * 2);
          ctx.fillStyle = '#FFD700';
          ctx.fill();
          
          // –°–≤–µ—á–µ–Ω–∏–µ
          ctx.beginPath();
          ctx.arc(x, y, 8, 0, Math.PI * 2);
          ctx.fillStyle = 'rgba(255, 215, 0, 0.3)';
          ctx.fill();
        });

        // –†–∏—Å—É–µ–º —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        ctx.strokeStyle = 'rgba(255, 215, 0, 0.6)';
        ctx.lineWidth = 1;
        constellation.connections.forEach(([start, end]) => {
          const startStar = constellation.stars[start];
          const endStar = constellation.stars[end];
          
          ctx.beginPath();
          ctx.moveTo(startStar.x * canvas.width, startStar.y * canvas.height);
          ctx.lineTo(endStar.x * canvas.width, endStar.y * canvas.height);
          ctx.stroke();
        });
      });

      // üßô‚Äç‚ôÇÔ∏è –†–ò–°–£–ï–ú –ò –û–ë–ù–û–í–õ–Ø–ï–ú –ú–ê–ì–ò–ß–ï–°–ö–ò–ï –ß–ê–°–¢–ò–¶–´
      for (let i = magicParticles.length - 1; i >= 0; i--) {
        const particle = magicParticles[i];
        
        // –î–≤–∏–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –≤–≤–µ—Ä—Ö —Å –±–æ–∫–æ–≤—ã–º –¥—Ä–µ–π—Ñ–æ–º
        particle.y -= particle.speed;
        particle.x += particle.float;
        particle.life--;
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–∏–∑–Ω–∏
        const lifeRatio = particle.life / particle.maxLife;
        particle.opacity = lifeRatio * 0.8;
        
        // –£–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –∑–∞ —ç–∫—Ä–∞–Ω–æ–º –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–µ –∂–∏–∑–Ω—å
        if (particle.y < -10 || particle.life <= 0) {
          magicParticles.splice(i, 1);
          continue;
        }
        
        // –†–∏—Å—É–µ–º –º–∞–≥–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç–∏—Ü—É
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        const particleGradient = ctx.createRadialGradient(
          particle.x, particle.y, 0,
          particle.x, particle.y, particle.size * 3
        );
        particleGradient.addColorStop(0, particle.color + 'FF');
        particleGradient.addColorStop(0.5, particle.color + '88');
        particleGradient.addColorStop(1, 'transparent');
        
        ctx.fillStyle = particleGradient;
        ctx.fill();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size * 0.5, 0, Math.PI * 2);
        ctx.fillStyle = '#FFFFFF' + Math.floor(particle.opacity * 255).toString(16).padStart(2, '0');
        ctx.fill();
      }

      // üßô‚Äç‚ôÇÔ∏è –†–ò–°–£–ï–ú –ò –û–ë–ù–û–í–õ–Ø–ï–ú –ì–ù–û–ú–¨–ò –ö–û–ú–ï–¢–´
      for (let i = comets.length - 1; i >= 0; i--) {
        const comet = comets[i];
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        const dx = comet.endX - comet.x;
        const dy = comet.endY - comet.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 5) {
          // –ö–æ–º–µ—Ç–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏ - —Å–æ–∑–¥–∞–µ–º –≤–∑—Ä—ã–≤ –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–∏—Ü
          for (let j = 0; j < 8; j++) {
            magicParticles.push({
              x: comet.x + (Math.random() - 0.5) * 20,
              y: comet.y + (Math.random() - 0.5) * 20,
              size: Math.random() * 3 + 1,
              speed: Math.random() * 3 + 1,
              opacity: 0.8,
              color: comet.color,
              life: Math.random() * 50 + 30,
              maxLife: 80,
              float: (Math.random() - 0.5) * 2
            });
          }
          comets.splice(i, 1);
          continue;
        }
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –∫–æ–º–µ—Ç—ã
        comet.x += (dx / distance) * comet.speed;
        comet.y += (dy / distance) * comet.speed;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö–≤–æ—Å—Ç
        comet.tail.push({ x: comet.x, y: comet.y });
        if (comet.tail.length > comet.maxTailLength) {
          comet.tail.shift();
        }

        // –†–∏—Å—É–µ–º —Ö–≤–æ—Å—Ç –∫–æ–º–µ—Ç—ã —Å –≥–Ω–æ–º—å–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        for (let j = 0; j < comet.tail.length - 1; j++) {
          const alpha = (j / comet.tail.length) * comet.brightness;
          const width = (j / comet.tail.length) * 4;
          
          ctx.strokeStyle = comet.color + Math.floor(alpha * 255).toString(16).padStart(2, '0');
          ctx.lineWidth = width;
          ctx.lineCap = 'round';
          
          ctx.beginPath();
          ctx.moveTo(comet.tail[j].x, comet.tail[j].y);
          ctx.lineTo(comet.tail[j + 1].x, comet.tail[j + 1].y);
          ctx.stroke();
        }

        // –†–∏—Å—É–µ–º –≥–æ–ª–æ–≤—É –∫–æ–º–µ—Ç—ã —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        ctx.beginPath();
        ctx.arc(comet.x, comet.y, 5, 0, Math.PI * 2);
        ctx.fillStyle = comet.color;
        ctx.fill();
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –±–µ–ª–æ–µ —è–¥—Ä–æ
        ctx.beginPath();
        ctx.arc(comet.x, comet.y, 2, 0, Math.PI * 2);
        ctx.fillStyle = '#FFFFFF';
        ctx.fill();
        
        // –ë–æ–ª—å—à–æ–µ –º–∞–≥–∏—á–µ—Å–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
        const cometGlow = ctx.createRadialGradient(comet.x, comet.y, 0, comet.x, comet.y, 20);
        cometGlow.addColorStop(0, comet.color + 'AA');
        cometGlow.addColorStop(0.5, comet.color + '44');
        cometGlow.addColorStop(1, 'transparent');
        
        ctx.fillStyle = cometGlow;
        ctx.beginPath();
        ctx.arc(comet.x, comet.y, 20, 0, Math.PI * 2);
        ctx.fill();
      }

      // üßô‚Äç‚ôÇÔ∏è –°–û–ó–î–ê–ï–ú –ù–û–í–´–ï –ö–û–ú–ï–¢–´ –ò –ß–ê–°–¢–ò–¶–´
      if (Math.random() < 0.003 && comets.length < 4) {
        comets.push(createComet());
      }
      
      if (Math.random() < 0.1 && magicParticles.length < 15) {
        magicParticles.push(createMagicParticle());
      }

      // üßô‚Äç‚ôÇÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ê–ì–ò–ß–ï–°–ö–ò–ï –≠–§–§–ï–ö–¢–´
      // –°–ª—É—á–∞–π–Ω—ã–µ –≤—Å–ø—ã—à–∫–∏ –º–∞–≥–∏–∏ –≤ —É–≥–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞
      if (Math.random() < 0.002) {
        const corners = [
          {x: 50, y: 50},
          {x: canvas.width - 50, y: 50},
          {x: 50, y: canvas.height - 50},
          {x: canvas.width - 50, y: canvas.height - 50}
        ];
        
        const corner = corners[Math.floor(Math.random() * corners.length)];
        const flashColor = gnomeColors[Math.floor(Math.random() * gnomeColors.length)];
        
        // –°–æ–∑–¥–∞–µ–º –≤—Å–ø—ã—à–∫—É
        const flashGradient = ctx.createRadialGradient(corner.x, corner.y, 0, corner.x, corner.y, 100);
        flashGradient.addColorStop(0, flashColor + '66');
        flashGradient.addColorStop(0.3, flashColor + '33');
        flashGradient.addColorStop(1, 'transparent');
        
        ctx.fillStyle = flashGradient;
        ctx.beginPath();
        ctx.arc(corner.x, corner.y, 100, 0, Math.PI * 2);
        ctx.fill();
        
        // –°–æ–∑–¥–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã –∏–∑ –≤—Å–ø—ã—à–∫–∏
        for (let k = 0; k < 5; k++) {
          magicParticles.push({
            x: corner.x + (Math.random() - 0.5) * 60,
            y: corner.y + (Math.random() - 0.5) * 60,
            size: Math.random() * 4 + 2,
            speed: Math.random() * 2 + 1,
            opacity: 0.9,
            color: flashColor,
            life: Math.random() * 80 + 60,
            maxLife: 140,
            float: (Math.random() - 0.5) * 3
          });
        }
      }
    };

    // ‚úÖ –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–ô –¶–ò–ö–õ
    const animate = () => {
      draw();
      animationRef.current = requestAnimationFrame(animate);
    };

    animate();

    // üßô‚Äç‚ôÇÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏)
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, []);

  return (
    <canvas
      ref={canvasRef}
      style={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        zIndex: -1,
        pointerEvents: 'none',
        // üßô‚Äç‚ôÇÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
        filter: 'brightness(1.05) contrast(1.1)'
      }}
    />
  );
};

export default StarryBackground;
