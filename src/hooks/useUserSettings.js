// src/hooks/useUserSettings.js - –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import { useState, useEffect } from 'react';
import apiService from '../services/api';

const useUserSettings = () => {
  const [settings, setSettings] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –ü–æ–ª—É—á–∏—Ç—å initData –∏–∑ Telegram WebApp
  const getInitData = () => {
    return window.Telegram?.WebApp?.initData || '';
  };

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const loadSettings = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const initData = getInitData();
      const userSettings = await apiService.getUserSettings(initData);
      
      setSettings(userSettings);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      localStorage.setItem('gnome-user-settings', JSON.stringify(userSettings));
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
      setError(err);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const cachedSettings = localStorage.getItem('gnome-user-settings');
      if (cachedSettings) {
        try {
          setSettings(JSON.parse(cachedSettings));
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', parseError);
        }
      }
      
    } finally {
      setLoading(false);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const saveSettings = async (newSettings) => {
    try {
      const initData = getInitData();
      const response = await apiService.saveUserSettings(newSettings, initData);
      
      if (response.status === 'success') {
        const updatedSettings = { ...settings, ...newSettings };
        setSettings(updatedSettings);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
        localStorage.setItem('gnome-user-settings', JSON.stringify(updatedSettings));
        
        // üßô‚Äç‚ôÇÔ∏è Haptic feedback –¥–ª—è Telegram
        const tg = window.Telegram?.WebApp;
        if (tg?.HapticFeedback && typeof tg.HapticFeedback.impactOccurred === 'function') {
          try {
            tg.HapticFeedback.impactOccurred('light');
          } catch (e) {}
        }
        
        return true;
      }
      
      return false;
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
      setError(err);
      return false;
    }
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
  const updateSetting = async (key, value) => {
    return await saveSettings({ [key]: value });
  };

  // –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetSettings = async () => {
    const defaultSettings = {
      zodiac_sign: null,
      birth_time: null,
      birth_location: null,
      notification_time: '09:00',
      premium: false,
      language: 'ru',
      theme: 'light'
    };
    
    return await saveSettings(defaultSettings);
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadSettings();
  }, []);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏
  const isPremium = settings?.premium || false;

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞
  const zodiacSign = settings?.zodiac_sign;

  // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const language = settings?.language || 'ru';

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
  const theme = settings?.theme || 'light';

  return {
    settings,
    loading,
    error,
    saveSettings,
    updateSetting,
    resetSettings,
    reload: loadSettings,
    
    // –£–¥–æ–±–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
    isPremium,
    zodiacSign,
    language,
    theme,
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏
    hasZodiacSign: !!zodiacSign,
    isConfigured: !!zodiacSign && !!settings?.notification_time
  };
};

export default useUserSettings;