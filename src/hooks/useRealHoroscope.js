// src/hooks/useRealHoroscope.js - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º API
import { useState, useEffect, useRef } from 'react';
import apiService from '../services/api';

const useRealHoroscope = (sign, date = null) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const mountedRef = useRef(true);

  // üßô‚Äç‚ôÇÔ∏è –ü–æ–ª—É—á–∏—Ç—å userId –∏–∑ Telegram WebApp
  const getUserId = () => {
    try {
      const tg = window.Telegram?.WebApp;
      if (tg?.initDataUnsafe?.user?.id) {
        return tg.initDataUnsafe.user.id;
      }
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId –∏–∑ Telegram:', e);
    }
    return null;
  };

  useEffect(() => {
    if (!sign) return;
    
    mountedRef.current = true;

    const fetchHoroscopeData = async () => {
      if (!mountedRef.current) return;
      
      setLoading(true);
      setError(null);

      try {
        console.log('üîÆ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø —Å –Ω–æ–≤–æ–≥–æ API –¥–ª—è –∑–Ω–∞–∫–∞:', sign);
        
        const userId = getUserId();
        const horoscopeData = await apiService.getHoroscope(sign, date, userId);
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –≥–æ—Ä–æ—Å–∫–æ–ø:', horoscopeData);
        
        if (mountedRef.current) {
          setData(horoscopeData);
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', err);
        if (mountedRef.current) {
          setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          const mockData = {
            sign,
            date: date || new Date().toISOString().split('T')[0],
            text: "üßô‚Äç‚ôÇÔ∏è –ó–≤–µ–∑–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–ª—á–∞—Ç, –Ω–æ –≥–Ω–æ–º—ã —à–µ–ø—á—É—Ç: —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π!",
            cached: false,
            source: "fallback"
          };
          setData(mockData);
        }
      } finally {
        if (mountedRef.current) {
          setLoading(false);
        }
      }
    };

    fetchHoroscopeData();

    return () => {
      mountedRef.current = false;
    };
  }, [sign, date]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const refetch = () => {
    if (sign && mountedRef.current) {
      setLoading(true);
      setError(null);
      
      const fetchData = async () => {
        try {
          const userId = getUserId();
          const horoscopeData = await apiService.getHoroscope(sign, date, userId);
          if (mountedRef.current) {
            setData(horoscopeData);
          }
        } catch (err) {
          if (mountedRef.current) {
            setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
          }
        } finally {
          if (mountedRef.current) {
            setLoading(false);
          }
        }
      };
      
      fetchData();
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–ª—É—á–µ–Ω –ª–∏ –≥–æ—Ä–æ—Å–∫–æ–ø —Å —Å–µ—Ä–≤–µ—Ä–∞
  const isFromServer = data?.source === 'real_api' || data?.source === 'cache';
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–∑ –∫—ç—à–∞ –ª–∏ –¥–∞–Ω–Ω—ã–µ
  const isCached = data?.cached === true;
  
  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
  const dataSource = data?.source || 'unknown';

  return { 
    data, 
    loading, 
    error, 
    refetch,
    
    // üßô‚Äç‚ôÇÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    isFromServer,
    isCached,
    dataSource,
    hasData: !!data
  };
};

export default useRealHoroscope;
