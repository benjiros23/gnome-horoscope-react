// React Hook –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ

import { useState, useEffect, useCallback, useRef } from 'react';
import { EnhancedMoonPhase } from '../enhanced_moonPhase';
import { saveMoonData, loadMoonData, saveHoroscope, loadHoroscope } from '../enhanced_cache';

// ===== –û–°–ù–û–í–ù–û–ô –•OOK –î–õ–Ø –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• =====

export const useAstrologyData = (options = {}) => {
  const {
    autoUpdate = true,
    updateInterval = 6 * 60 * 60 * 1000, // 6 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    coordinates = { lat: 55.7558, lng: 37.6173 }, // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    zodiacSign = null,
    enableHoroscope = false
  } = options;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [data, setData] = useState({
    moon: null,
    horoscope: null,
    loading: true,
    error: null,
    lastUpdated: null,
    source: null
  });
  
  // –†–µ—Ñ—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
  const updateIntervalRef = useRef(null);
  const mountedRef = useRef(true);
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const updateMoonData = useCallback(async (date = new Date()) => {
    try {
      console.log('üåô –û–±–Ω–æ–≤–ª—è–µ–º –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      let moonData = loadMoonData(date);
      
      if (!moonData) {
        // –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        moonData = EnhancedMoonPhase.calculatePhase(date);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
        if (moonData) {
          saveMoonData(date, moonData);
        }
      }
      
      return moonData;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
  const updateHoroscope = useCallback(async (sign) => {
    if (!sign || !enableHoroscope) return null;
    
    try {
      console.log(`üîÆ –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${sign}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      let horoscopeData = loadHoroscope(sign);
      
      if (!horoscopeData) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        horoscopeData = {
          zodiac: sign,
          date: new Date().toISOString().split('T')[0],
          horoscope: `–°–µ–≥–æ–¥–Ω—è –¥–ª—è ${sign} –¥–µ–Ω—å –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! –ó–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –Ω–æ–≤—ã–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º.`,
          source: 'placeholder'
        };
        
        saveHoroscope(sign, horoscopeData);
      }
      
      return horoscopeData;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', error);
      throw error;
    }
  }, [enableHoroscope]);
  
  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const updateAllData = useCallback(async () => {
    if (!mountedRef.current) return;
    
    setData(prev => ({ ...prev, loading: true, error: null }));
    
    try {
      const [moonResult, horoscopeResult] = await Promise.allSettled([
        updateMoonData(),
        updateHoroscope(zodiacSign)
      ]);
      
      if (!mountedRef.current) return;
      
      const newData = {
        moon: moonResult.status === 'fulfilled' ? moonResult.value : null,
        horoscope: horoscopeResult.status === 'fulfilled' ? horoscopeResult.value : null,
        loading: false,
        error: moonResult.status === 'rejected' ? moonResult.reason : null,
        lastUpdated: new Date(),
        source: moonResult.value?.source || 'unknown'
      };
      
      setData(newData);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
        moon: !!newData.moon,
        horoscope: !!newData.horoscope,
        source: newData.source
      });
      
    } catch (error) {
      if (mountedRef.current) {
        setData(prev => ({
          ...prev,
          loading: false,
          error
        }));
      }
    }
  }, [updateMoonData, updateHoroscope, zodiacSign]);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  const forceUpdate = useCallback(() => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
    updateAllData();
  }, [updateAllData]);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    mountedRef.current = true;
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    updateAllData();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (autoUpdate && updateInterval > 0) {
      updateIntervalRef.current = setInterval(() => {
        if (mountedRef.current) {
          console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
          updateAllData();
        }
      }, updateInterval);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      mountedRef.current = false;
      if (updateIntervalRef.current) {
        clearInterval(updateIntervalRef.current);
      }
    };
  }, [updateAllData, autoUpdate, updateInterval]);
  
  return {
    ...data,
    refresh: forceUpdate,
    updateMoon: () => updateMoonData(),
    updateHoroscope: (sign) => updateHoroscope(sign),
    isAutoUpdating: autoUpdate && !!updateIntervalRef.current
  };
};

// ===== –•OOK –î–õ–Ø –¢–û–õ–¨–ö–û –õ–£–ù–ù–´–• –î–ê–ù–ù–´–• =====

export const useMoonData = (options = {}) => {
  const { coordinates, autoUpdate, updateInterval } = options;
  
  return useAstrologyData({
    coordinates,
    autoUpdate,
    updateInterval,
    enableHoroscope: false
  });
};

// ===== –•OOK –î–õ–Ø –ì–û–†–û–°–ö–û–ü–ê =====

export const useHoroscope = (zodiacSign, options = {}) => {
  const { autoUpdate = true, updateInterval = 24 * 60 * 60 * 1000 } = options;
  
  return useAstrologyData({
    zodiacSign,
    autoUpdate,
    updateInterval,
    enableHoroscope: true
  });
};

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
export const useLastUpdateText = (lastUpdated) => {
  const [updateText, setUpdateText] = useState('');
  
  useEffect(() => {
    if (!lastUpdated) {
      setUpdateText('–ù–∏–∫–æ–≥–¥–∞');
      return;
    }
    
    const updateTextFunc = () => {
      const now = new Date();
      const diff = now - lastUpdated;
      const minutes = Math.floor(diff / (1000 * 60));
      const hours = Math.floor(minutes / 60);
      
      if (minutes < 1) {
        setUpdateText('–¢–æ–ª—å–∫–æ —á—Ç–æ');
      } else if (minutes < 60) {
        setUpdateText(`${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`);
      } else if (hours < 24) {
        setUpdateText(`${hours} —á –Ω–∞–∑–∞–¥`);
      } else {
        setUpdateText(lastUpdated.toLocaleDateString('ru-RU'));
      }
    };
    
    updateTextFunc();
    const interval = setInterval(updateTextFunc, 60000); // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    return () => clearInterval(interval);
  }, [lastUpdated]);
  
  return updateText;
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default {
  useAstrologyData,
  useMoonData,
  useHoroscope,
  useLastUpdateText
};
