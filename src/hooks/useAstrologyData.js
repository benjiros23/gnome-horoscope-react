import { useState, useEffect, useCallback } from 'react';
import { loadCachedData, saveCachedData } from '../enhanced_cache';
import { getMoonPhaseData } from '../enhanced_moonPhase';

const useAstrologyData = (config = {}) => {
  const {
    autoUpdate = true,
    updateInterval = 6 * 60 * 60 * 1000, // 6 —á–∞—Å–æ–≤
    coordinates = { lat: 55.7558, lng: 37.6173 }, // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    zodiacSign = null,
    enableMoon = true,
    enableHoroscope = false
  } = config;

  const [moonData, setMoonData] = useState(null);
  const [horoscopeData, setHoroscopeData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [updateCount, setUpdateCount] = useState(0);

  // –°–¢–ê–ë–ò–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò - –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –í useCallback
  const updateMoonData = useCallback(async () => {
    if (!enableMoon) return false;
    
    try {
      console.log('üåô –û–±–Ω–æ–≤–ª—è–µ–º –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      const startTime = performance.now();
      
      const cacheKey = `moon_${new Date().toISOString().split('T')[0]}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cached = loadCachedData(cacheKey, 4 * 60); // 4 —á–∞—Å–∞
      if (cached) {
        setMoonData(cached);
        const loadTime = Math.round(performance.now() - startTime);
        console.log(`üì¶ –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ –∑–∞ ${loadTime}ms`);
        return true;
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const data = await getMoonPhaseData(coordinates);
      if (data) {
        setMoonData(data);
        saveCachedData(cacheKey, data);
        const loadTime = Math.round(performance.now() - startTime);
        console.log(`üåô –ù–æ–≤—ã–µ –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ ${loadTime}ms`);
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }, []); // –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô!

  const updateHoroscopeData = useCallback(async () => {
    if (!enableHoroscope || !zodiacSign) return false;
    
    try {
      console.log(`‚≠ê –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${zodiacSign}...`);
      const startTime = performance.now();
      
      const cacheKey = `horoscope_${zodiacSign}_${new Date().toISOString().split('T')[0]}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cached = loadCachedData(cacheKey, 2 * 60); // 2 —á–∞—Å–∞
      if (cached) {
        setHoroscopeData(cached);
        const loadTime = Math.round(performance.now() - startTime);
        console.log(`üì¶ –ì–æ—Ä–æ—Å–∫–æ–ø –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–µ—à–∞ –∑–∞ ${loadTime}ms`);
        return true;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –∏–∑ API
      const mockData = {
        sign: zodiacSign,
        date: new Date().toISOString().split('T')[0],
        prediction: `–°–µ–≥–æ–¥–Ω—è ${zodiacSign} –∂–¥–µ—Ç —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å!`,
        luckyNumber: Math.floor(Math.random() * 100),
        mood: 'positive'
      };
      
      setHoroscopeData(mockData);
      saveCachedData(cacheKey, mockData);
      const loadTime = Math.round(performance.now() - startTime);
      console.log(`‚≠ê –ù–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—É—á–µ–Ω –∑–∞ ${loadTime}ms`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', error);
      return false;
    }
  }, []); // –ë–ï–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô!

  // –ì–õ–ê–í–ù–´–ô useEffect - –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
  useEffect(() => {
    let mounted = true;
    let intervalId = null;

    const initializeData = async () => {
      if (!mounted) return;
      
      setLoading(true);
      setUpdateCount(prev => prev + 1);
      
      try {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useAstrologyData:', {
          autoUpdate,
          updateInterval,
          coordinates,
          zodiacSign,
          enableMoon,
          enableHoroscope
        });
        
        const results = {
          moon: false,
          horoscope: false,
          source: 'static',
          updateCount: updateCount + 1,
          fromCache: {}
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if (enableMoon) {
          results.moon = await updateMoonData();
        }
        
        if (enableHoroscope && zodiacSign) {
          results.horoscope = await updateHoroscopeData();
        }
        
        setLastUpdated(new Date());
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', results);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û –û–î–ò–ù –†–ê–ó
        if (autoUpdate && !intervalId) {
          intervalId = setInterval(async () => {
            if (!mounted) return;
            
            console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
            if (enableMoon) await updateMoonData();
            if (enableHoroscope && zodiacSign) await updateHoroscopeData();
            setLastUpdated(new Date());
          }, updateInterval);
          
          console.log(`‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ ${updateInterval / 60000} –º–∏–Ω—É—Ç`);
        }
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ useAstrologyData:', error);
      } finally {
        setLoading(false);
      }
    };

    initializeData();

    return () => {
      mounted = false;
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
      }
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ useAstrologyData');
    };
  }, [
    // –¢–û–õ–¨–ö–û –ü–†–ò–ú–ò–¢–ò–í–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø!
    autoUpdate,
    updateInterval,
    enableMoon,
    enableHoroscope,
    zodiacSign,
    coordinates.lat,
    coordinates.lng
  ]); // –ù–ï –í–ö–õ–Æ–ß–ê–ï–ú –§–£–ù–ö–¶–ò–ò!

  return {
    moonData,
    horoscopeData,
    loading,
    lastUpdated,
    updateCount,
    updateMoonData,
    updateHoroscopeData,
    coordinates
  };
};

export default useAstrologyData;
