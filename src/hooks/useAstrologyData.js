import { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { EnhancedMoonPhase } from '../enhanced_moonPhase';
import { saveMoonData, loadMoonData, saveHoroscope, loadHoroscope } from '../enhanced_cache';

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
const DEFAULT_UPDATE_INTERVAL = 6 * 60 * 60 * 1000; // 6 —á–∞—Å–æ–≤
const DEFAULT_HOROSCOPE_INTERVAL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
const DEFAULT_COORDINATES = { lat: 55.7558, lng: 37.6173 }; // –ú–æ—Å–∫–≤–∞
const UPDATE_TEXT_INTERVAL = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞

// ===== –£–¢–ò–õ–ò–¢–´ =====
class DataUpdateManager {
  static debounceTimers = new Map();
  
  static debounce(key, fn, delay = 300) {
    if (this.debounceTimers.has(key)) {
      clearTimeout(this.debounceTimers.get(key));
    }
    
    const timer = setTimeout(() => {
      fn();
      this.debounceTimers.delete(key);
    }, delay);
    
    this.debounceTimers.set(key, timer);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä fallback –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
const generateFallbackHoroscope = (sign) => {
  const horoscopes = {
    '–û–≤–µ–Ω': '–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –ø–∏–∫–µ! –î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π.',
    '–¢–µ–ª–µ—Ü': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —É–ø–æ—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–ª–æ–¥—ã. –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.',
    '–ë–ª–∏–∑–Ω–µ—Ü—ã': '–î–µ–Ω—å –ø–æ–ª–æ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ –æ—Ç–∫—Ä—ã—Ç–∏–π. –í–∞—à–∞ –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–µ–Ω–∞.',
    '–†–∞–∫': '–ò–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –£–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–µ–º—å–µ –∏ –±–ª–∏–∑–∫–∏–º.',
    '–õ–µ–≤': '–í–∞—à –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –º–∞–≥–Ω–µ—Ç–∏–∑–º –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç —É–¥–∞—á—É! –î–µ–Ω—å –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è.',
    '–î–µ–≤–∞': '–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º –æ—Ç–∫—Ä–æ–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –ø—Ä–∏–Ω–µ—Å–µ—Ç —É—Å–ø–µ—Ö.',
    '–í–µ—Å—ã': '–ì–∞—Ä–º–æ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ä–∞–¥–æ—Å—Ç—å. –î–µ–Ω—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤.',
    '–°–∫–æ—Ä–ø–∏–æ–Ω': '–ì–ª—É–±–æ–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–µ–¥—É—Ç –∫ —Ä–æ—Å—Ç—É. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏.',
    '–°—Ç—Ä–µ–ª–µ—Ü': '–ù–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –º–∞–Ω—è—Ç –≤–∞—Å –≤–ø–µ—Ä–µ–¥! –†–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –æ–ø—ã—Ç.',
    '–ö–æ–∑–µ—Ä–æ–≥': '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –≤–µ—Ä—à–∏–Ω–∞–º. –ü–ª–∞–Ω–æ–º–µ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–∞—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
    '–í–æ–¥–æ–ª–µ–π': '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –∏–∑–º–µ–Ω—è—Ç –º–Ω–æ–≥–æ–µ. –í—Ä–µ–º—è –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.',
    '–†—ã–±—ã': '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ç–µ—á–µ—Ç –º–æ—â–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º. –°–ª–µ–¥—É–π—Ç–µ –∑–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º.'
  };

  return horoscopes[sign] || horoscopes['–õ–µ–≤'];
};

// ===== –û–°–ù–û–í–ù–û–ô –•–£–£–ö –î–õ–Ø –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• =====
export const useAstrologyData = (options = {}) => {
  const {
    autoUpdate = true,
    updateInterval = DEFAULT_UPDATE_INTERVAL,
    coordinates = DEFAULT_COORDINATES,
    zodiacSign = null,
    enableHoroscope = false,
    onDataUpdate = null,
    onError = null,
    debounceDelay = 300
  } = options;

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
  const memoizedOptions = useMemo(() => ({
    autoUpdate,
    updateInterval,
    coordinates,
    zodiacSign,
    enableHoroscope,
    debounceDelay
  }), [autoUpdate, updateInterval, coordinates, zodiacSign, enableHoroscope, debounceDelay]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  const [data, setData] = useState({
    moon: null,
    horoscope: null,
    loading: true,
    error: null,
    lastUpdated: null,
    source: null,
    updateCount: 0,
    cache: {
      moonCached: false,
      horoscopeCached: false
    }
  });

  // –†–µ—Ñ—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const updateIntervalRef = useRef(null);
  const mountedRef = useRef(true);
  const lastUpdateTimeRef = useRef(0);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const updateMoonData = useCallback(async (date = new Date()) => {
    const startTime = Date.now();
    
    try {
      console.log('üåô –û–±–Ω–æ–≤–ª—è–µ–º –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      let moonData = loadMoonData(date);
      let fromCache = !!moonData;
      
      if (!moonData) {
        // –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        moonData = EnhancedMoonPhase.calculatePhase(date);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
        if (moonData) {
          saveMoonData(date, moonData);
          console.log(`‚úÖ –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à –∑–∞ ${Date.now() - startTime}ms`);
        }
      } else {
        console.log(`üì¶ –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ –∑–∞ ${Date.now() - startTime}ms`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (moonData) {
        moonData.fromCache = fromCache;
        moonData.loadTime = Date.now() - startTime;
      }
      
      return moonData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å fallback –¥–∞–Ω–Ω—ã–µ
      try {
        const fallbackData = EnhancedMoonPhase.getFallbackData(date);
        if (fallbackData) {
          fallbackData.source = 'fallback';
          fallbackData.fromCache = false;
          return fallbackData;
        }
      } catch (fallbackError) {
        console.error('‚ùå Fallback –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', fallbackError);
      }
      
      throw error;
    }
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
  const updateHoroscope = useCallback(async (sign) => {
    if (!sign || !enableHoroscope) return null;
    
    const startTime = Date.now();
    
    try {
      console.log(`üîÆ –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${sign}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      let horoscopeData = loadHoroscope(sign);
      let fromCache = !!horoscopeData;
      
      if (!horoscopeData) {
        // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback –≥–æ—Ä–æ—Å–∫–æ–ø
        horoscopeData = {
          zodiac: sign,
          date: new Date().toISOString().split('T')[0],
          horoscope: generateFallbackHoroscope(sign),
          source: 'enhanced_fallback',
          generatedAt: new Date().toISOString(),
          advice: {
            general: generateFallbackHoroscope(sign),
            love: '–ó–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç —Å–µ—Ä–¥–µ—á–Ω—ã–º –¥–µ–ª–∞–º. –û—Ç–∫—Ä–æ–π—Ç–µ—Å—å –Ω–æ–≤–æ–º—É.',
            work: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –ü—Ä–æ—è–≤–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É.',
            health: '–ü—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –æ—Ä–≥–∞–Ω–∏–∑–º–∞. –ë–∞–ª–∞–Ω—Å - –∫–ª—é—á –∫ –∑–¥–æ—Ä–æ–≤—å—é.'
          }
        };
        
        saveHoroscope(sign, horoscopeData);
        console.log(`‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à –∑–∞ ${Date.now() - startTime}ms`);
      } else {
        console.log(`üì¶ –ì–æ—Ä–æ—Å–∫–æ–ø –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–µ—à–∞ –∑–∞ ${Date.now() - startTime}ms`);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (horoscopeData) {
        horoscopeData.fromCache = fromCache;
        horoscopeData.loadTime = Date.now() - startTime;
      }
      
      return horoscopeData;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', error);
      throw error;
    }
  }, [enableHoroscope]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
  const updateAllData = useCallback(async (force = false) => {
    if (!mountedRef.current) return;
    
    const now = Date.now();
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (!force && now - lastUpdateTimeRef.current < debounceDelay) {
      console.log('‚è±Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ (debounce)');
      return;
    }
    
    lastUpdateTimeRef.current = now;
    
    setData(prev => ({ 
      ...prev, 
      loading: true, 
      error: null 
    }));
    
    try {
      const updatePromises = [
        updateMoonData(),
        updateHoroscope(zodiacSign)
      ];
      
      const results = await Promise.allSettled(updatePromises);
      
      if (!mountedRef.current) return;
      
      const [moonResult, horoscopeResult] = results;
      
      const newData = {
        moon: moonResult.status === 'fulfilled' ? moonResult.value : null,
        horoscope: horoscopeResult.status === 'fulfilled' ? horoscopeResult.value : null,
        loading: false,
        error: moonResult.status === 'rejected' ? moonResult.reason : null,
        lastUpdated: new Date(),
        source: moonResult.value?.source || 'unknown',
        updateCount: data.updateCount + 1,
        cache: {
          moonCached: moonResult.value?.fromCache || false,
          horoscopeCached: horoscopeResult.value?.fromCache || false
        }
      };
      
      setData(newData);
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      onDataUpdate?.(newData);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
        moon: !!newData.moon,
        horoscope: !!newData.horoscope,
        source: newData.source,
        updateCount: newData.updateCount,
        fromCache: newData.cache
      });
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
      
      if (mountedRef.current) {
        const errorData = {
          ...data,
          loading: false,
          error
        };
        
        setData(errorData);
        onError?.(error, errorData);
      }
    }
  }, [updateMoonData, updateHoroscope, zodiacSign, debounceDelay, data.updateCount, onDataUpdate, onError]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
  const forceUpdate = useCallback(() => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
    DataUpdateManager.debounce('force-update', () => {
      updateAllData(true);
    }, 100);
  }, [updateAllData]);

  // –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª—É–Ω—ã
  const updateMoonOnly = useCallback(async () => {
    console.log('üåô –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    try {
      setData(prev => ({ ...prev, loading: true }));
      const moonData = await updateMoonData();
      setData(prev => ({
        ...prev,
        moon: moonData,
        loading: false,
        lastUpdated: new Date(),
        source: moonData?.source || prev.source
      }));
    } catch (error) {
      setData(prev => ({ ...prev, loading: false, error }));
      onError?.(error);
    }
  }, [updateMoonData, onError]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    mountedRef.current = true;
    
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useAstrologyData:', memoizedOptions);
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    updateAllData(true);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (autoUpdate && updateInterval > 0) {
      console.log(`‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ ${updateInterval / 1000 / 60} –º–∏–Ω—É—Ç`);
      
      updateIntervalRef.current = setInterval(() => {
        if (mountedRef.current) {
          console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
          updateAllData();
        }
      }, updateInterval);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ useAstrologyData');
      mountedRef.current = false;
      
      if (updateIntervalRef.current) {
        clearInterval(updateIntervalRef.current);
        updateIntervalRef.current = null;
      }
      
      // –û—á–∏—â–∞–µ–º debounce —Ç–∞–π–º–µ—Ä—ã
      DataUpdateManager.debounceTimers.forEach(timer => clearTimeout(timer));
      DataUpdateManager.debounceTimers.clear();
    };
  }, [updateAllData, memoizedOptions.autoUpdate, memoizedOptions.updateInterval]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç
  return useMemo(() => ({
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ...data,
    
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    refresh: forceUpdate,
    updateMoon: updateMoonOnly,
    updateHoroscope: (sign) => updateHoroscope(sign),
    
    // –°—Ç–∞—Ç—É—Å –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    isAutoUpdating: autoUpdate && !!updateIntervalRef.current,
    options: memoizedOptions,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance: {
      updateCount: data.updateCount,
      cacheHits: {
        moon: data.cache.moonCached,
        horoscope: data.cache.horoscopeCached
      }
    }
  }), [
    data, 
    forceUpdate, 
    updateMoonOnly, 
    updateHoroscope, 
    autoUpdate, 
    memoizedOptions
  ]);
};

// ===== –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –•–£–ö–ò =====

// –•—É–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
export const useMoonData = (options = {}) => {
  const { coordinates, autoUpdate, updateInterval, onDataUpdate, onError } = options;
  
  const memoizedOptions = useMemo(() => ({
    coordinates,
    autoUpdate,
    updateInterval,
    enableHoroscope: false,
    onDataUpdate,
    onError
  }), [coordinates, autoUpdate, updateInterval, onDataUpdate, onError]);
  
  return useAstrologyData(memoizedOptions);
};

// –•—É–∫ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
export const useHoroscope = (zodiacSign, options = {}) => {
  const { autoUpdate = true, updateInterval = DEFAULT_HOROSCOPE_INTERVAL, onDataUpdate, onError } = options;
  
  const memoizedOptions = useMemo(() => ({
    zodiacSign,
    autoUpdate,
    updateInterval,
    enableHoroscope: true,
    onDataUpdate,
    onError
  }), [zodiacSign, autoUpdate, updateInterval, onDataUpdate, onError]);
  
  return useAstrologyData(memoizedOptions);
};

// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
export const useLastUpdateText = (lastUpdated, options = {}) => {
  const { 
    updateInterval = UPDATE_TEXT_INTERVAL,
    showSeconds = false,
    locale = 'ru-RU'
  } = options;
  
  const [updateText, setUpdateText] = useState('');

  const formatUpdateTime = useCallback((lastUpdated, locale, showSeconds) => {
    if (!lastUpdated) return '–ù–∏–∫–æ–≥–¥–∞';
    
    const now = new Date();
    const diff = now - lastUpdated;
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (seconds < 30) {
      return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (seconds < 60 && showSeconds) {
      return `${seconds} —Å–µ–∫ –Ω–∞–∑–∞–¥`;
    } else if (minutes < 1) {
      return '–ú–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥';
    } else if (minutes < 60) {
      return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (hours < 24) {
      return `${hours} —á –Ω–∞–∑–∞–¥`;
    } else if (days < 7) {
      return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
    } else {
      return lastUpdated.toLocaleDateString(locale, {
        day: 'numeric',
        month: 'short',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
  }, []);

  useEffect(() => {
    const updateTextFunc = () => {
      const newText = formatUpdateTime(lastUpdated, locale, showSeconds);
      setUpdateText(newText);
    };
    
    updateTextFunc();
    const interval = setInterval(updateTextFunc, updateInterval);
    
    return () => clearInterval(interval);
  }, [lastUpdated, updateInterval, locale, showSeconds, formatUpdateTime]);

  return updateText;
};

// –•—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
export const useAstrologyStats = () => {
  const [stats, setStats] = useState({
    totalUpdates: 0,
    cacheHits: 0,
    errors: 0,
    averageLoadTime: 0,
    lastError: null
  });

  const recordUpdate = useCallback((loadTime, fromCache, error = null) => {
    setStats(prev => ({
      totalUpdates: prev.totalUpdates + 1,
      cacheHits: prev.cacheHits + (fromCache ? 1 : 0),
      errors: prev.errors + (error ? 1 : 0),
      averageLoadTime: (prev.averageLoadTime * prev.totalUpdates + loadTime) / (prev.totalUpdates + 1),
      lastError: error || prev.lastError
    }));
  }, []);

  const resetStats = useCallback(() => {
    setStats({
      totalUpdates: 0,
      cacheHits: 0,
      errors: 0,
      averageLoadTime: 0,
      lastError: null
    });
  }, []);

  return {
    ...stats,
    cacheHitRate: stats.totalUpdates > 0 ? (stats.cacheHits / stats.totalUpdates * 100).toFixed(1) : '0.0',
    errorRate: stats.totalUpdates > 0 ? (stats.errors / stats.totalUpdates * 100).toFixed(1) : '0.0',
    recordUpdate,
    resetStats
  };
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏
export default {
  useAstrologyData,
  useMoonData,
  useHoroscope,
  useLastUpdateText,
  useAstrologyStats,
  DataUpdateManager,
  generateFallbackHoroscope
};
