import { useState, useCallback } from 'react';
import { EnhancedMoonPhase } from '../enhanced_moonPhase';
import { loadMoonData, saveMoonData } from '../enhanced_cache';

const BASE_URL = 'https://d-gnome-horoscope-miniapp-frontend.onrender.com';

const useAPI = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const makeRequest = useCallback(async (endpoint, options = {}) => {
    setLoading(true);
    setError(null);
    const url = `${BASE_URL}${endpoint}`;

    try {
      console.log('üåê API –∑–∞–ø—Ä–æ—Å:', url, options);

      const response = await fetch(url, {
        method: options.method || 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          ...options.headers
        },
        mode: 'cors',
        credentials: 'omit',
        ...options
      });

      if (!response.ok) {
        let errorMessage;
        try {
          const errorData = await response.json();
          errorMessage = errorData.message || `HTTP ${response.status}: ${response.statusText}`;
        } catch (parseError) {
          try {
            const errorText = await response.text();
            errorMessage = errorText || `HTTP ${response.status}: ${response.statusText}`;
          } catch (textError) {
            errorMessage = `HTTP ${response.status}: ${response.statusText}`;
          }
        }
        throw new Error(errorMessage);
      }

      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const text = await response.text();
        console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:', text);
        
        if (text.includes('<')) {
          throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
        }
        
        return { data: text, raw: true };
      }

      const data = await response.json();
      console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
        endpoint,
        status: response.status,
        dataKeys: Object.keys(data),
        timestamp: new Date().toISOString()
      });

      return data;

    } catch (fetchError) {
      let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      
      if (fetchError.name === 'TypeError' && fetchError.message.includes('Failed to fetch')) {
        errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
      } else if (fetchError.message.includes('CORS')) {
        errorMessage = '–û—à–∏–±–∫–∞ CORS. –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.';
      } else {
        errorMessage = fetchError.message;
      }

      console.error('‚ùå –û—à–∏–±–∫–∞ API:', {
        endpoint,
        error: errorMessage,
        timestamp: new Date().toISOString()
      });

      setError(errorMessage);
      throw new Error(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  // üöÄ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è getMoonData —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const getMoonData = useCallback(async (date = new Date()) => {
    console.log('üåô –ó–∞–ø—Ä–æ—Å –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è:', date.toISOString().split('T')[0]);

    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
      const cachedData = loadMoonData(date);
      if (cachedData) {
        console.log('üì¶ –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞');
        return {
          success: true,
          data: cachedData,
          source: 'cache'
        };
      }

      // 2. –ü—Ä–æ–±—É–µ–º EnhancedMoonPhase (SunCalc –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
      const enhancedData = EnhancedMoonPhase.calculatePhase(date);
      if (enhancedData) {
        console.log('üßÆ –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ EnhancedMoonPhase:', enhancedData.source);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        saveMoonData(date, enhancedData);
        
        return {
          success: true,
          data: enhancedData,
          source: enhancedData.source
        };
      }

      // 3. Fallback –∫ —Å—Ç–∞—Ä–æ–º—É API
      console.log('üåê Fallback –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É API...');
      const apiData = await makeRequest('/api/moon');
      
      if (apiData && !apiData.raw) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç API –∫ —Ñ–æ—Ä–º–∞—Ç—É EnhancedMoonPhase
        const normalizedData = {
          phase: apiData.current?.phase || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞',
          emoji: apiData.current?.emoji || 'üåô',
          illumination: apiData.current?.illumination || 0,
          age: apiData.current?.age || 0,
          lunarDay: apiData.current?.age ? Math.floor(apiData.current.age) + 1 : 1,
          isWaxing: apiData.current?.age ? apiData.current.age < 14.7 : false,
          moonrise: apiData.current?.moonrise || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          moonset: apiData.current?.moonset || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          source: 'api'
        };

        saveMoonData(date, normalizedData);
        
        return {
          success: true,
          data: normalizedData,
          source: 'api'
        };
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      const fallbackData = EnhancedMoonPhase.getFallbackData(date);
      if (fallbackData) {
        console.log('üÜò –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
        return {
          success: false,
          data: fallbackData,
          source: 'fallback',
          error: error.message
        };
      }

      return {
        success: false,
        data: null,
        source: 'none',
        error: error.message
      };
    }
  }, [makeRequest]);

  const getHoroscope = useCallback(async (sign) => {
    return await makeRequest(`/api/horoscope?sign=${encodeURIComponent(sign)}`);
  }, [makeRequest]);

  const getAstroEvents = useCallback(async () => {
    return await makeRequest('/api/astro-events');
  }, [makeRequest]);

  const getNumerology = useCallback(async (birthDate) => {
    return await makeRequest('/api/numerology', {
      method: 'POST',
      body: JSON.stringify({ birthDate })
    });
  }, [makeRequest]);

  const getCompatibility = useCallback(async (sign1, sign2) => {
    return await makeRequest(`/api/compatibility/${encodeURIComponent(sign1)}/${encodeURIComponent(sign2)}`);
  }, [makeRequest]);

  const getDayCard = useCallback(async () => {
    return await makeRequest('/api/day-card');
  }, [makeRequest]);

  const getMercuryStatus = useCallback(async () => {
    return await makeRequest('/api/mercury');
  }, [makeRequest]);

  return {
    loading,
    error,
    makeRequest,
    getMoonData,
    getHoroscope,
    getAstroEvents,
    getNumerology,
    getCompatibility,
    getDayCard,
    getMercuryStatus
  };
};

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –≠–ö–°–ü–û–†–¢ - –∏ default, –∏ named
export default useAPI;
export { useAPI };
