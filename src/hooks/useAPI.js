import { useState, useCallback, useRef } from 'react';
import { EnhancedMoonPhase } from '../enhanced_moonPhase';
import { loadMoonData, saveMoonData } from '../enhanced_cache';

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
const BASE_URL = 'https://d-gnome-horoscope-miniapp-frontend.onrender.com';

const API_ENDPOINTS = {
  MOON: '/api/moon',
  HOROSCOPE: '/api/horoscope',
  ASTRO_EVENTS: '/api/astro-events',
  NUMEROLOGY: '/api/numerology',
  COMPATIBILITY: '/api/compatibility',
  DAY_CARD: '/api/day-card',
  MERCURY: '/api/mercury'
};

const ERROR_MESSAGES = {
  NETWORK: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.',
  CORS: '–û—à–∏–±–∫–∞ CORS. –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.',
  HTML_RESPONSE: '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.',
  NO_DATA_SOURCE: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞',
  UNKNOWN: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏'
};

// ===== –£–¢–ò–õ–ò–¢–´ =====
const createRequestConfig = (options = {}) => ({
  method: options.method || 'GET',
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    ...options.headers
  },
  mode: 'cors',
  credentials: 'omit',
  ...options
});

const parseErrorResponse = async (response) => {
  try {
    const errorData = await response.json();
    return errorData.message || `HTTP ${response.status}: ${response.statusText}`;
  } catch (parseError) {
    try {
      const errorText = await response.text();
      return errorText || `HTTP ${response.status}: ${response.statusText}`;
    } catch (textError) {
      return `HTTP ${response.status}: ${response.statusText}`;
    }
  }
};

const normalizeApiError = (error) => {
  if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
    return ERROR_MESSAGES.NETWORK;
  }
  
  if (error.message.includes('CORS')) {
    return ERROR_MESSAGES.CORS;
  }
  
  return error.message || ERROR_MESSAGES.UNKNOWN;
};

// ===== –û–°–ù–û–í–ù–û–ô –•–£–ö =====
const useAPI = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const requestCache = useRef(new Map());
  const abortControllerRef = useRef(null);

  // –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  const makeRequest = useCallback(async (endpoint, options = {}) => {
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }

    abortControllerRef.current = new AbortController();
    const requestConfig = {
      ...createRequestConfig(options),
      signal: abortControllerRef.current.signal
    };

    setLoading(true);
    setError(null);

    const url = `${BASE_URL}${endpoint}`;
    const cacheKey = `${url}-${JSON.stringify(requestConfig)}`;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
      if (requestConfig.method === 'GET' && requestCache.current.has(cacheKey)) {
        const cachedData = requestCache.current.get(cacheKey);
        const isExpired = Date.now() - cachedData.timestamp > 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        if (!isExpired) {
          console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞ API:', endpoint);
          return cachedData.data;
        }
      }

      console.log('üåê API –∑–∞–ø—Ä–æ—Å:', url);

      const response = await fetch(url, requestConfig);

      if (!response.ok) {
        const errorMessage = await parseErrorResponse(response);
        throw new Error(errorMessage);
      }

      const contentType = response.headers.get('content-type');
      
      if (!contentType || !contentType.includes('application/json')) {
        const text = await response.text();
        console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:', text.substring(0, 100));
        
        if (text.includes('<')) {
          throw new Error(ERROR_MESSAGES.HTML_RESPONSE);
        }
        
        return { data: text, raw: true };
      }

      const data = await response.json();

      // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ GET –∑–∞–ø—Ä–æ—Å—ã
      if (requestConfig.method === 'GET') {
        requestCache.current.set(cacheKey, {
          data,
          timestamp: Date.now()
        });
      }

      console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
        endpoint,
        status: response.status,
        dataType: typeof data,
        timestamp: new Date().toISOString()
      });

      return data;

    } catch (fetchError) {
      if (fetchError.name === 'AbortError') {
        console.log('üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω:', endpoint);
        return null;
      }

      const errorMessage = normalizeApiError(fetchError);
      
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', {
        endpoint,
        error: errorMessage,
        timestamp: new Date().toISOString()
      });

      setError(errorMessage);
      throw new Error(errorMessage);

    } finally {
      setLoading(false);
      abortControllerRef.current = null;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
  const getMoonData = useCallback(async (date = new Date()) => {
    const dateString = date.toISOString().split('T')[0];
    console.log('üåô –ó–∞–ø—Ä–æ—Å –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è:', dateString);

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cachedData = loadMoonData(date);
      if (cachedData) {
        console.log('üì¶ –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞');
        return {
          success: true,
          data: cachedData,
          source: 'cache'
        };
      }

      // 2. –ü—Ä–æ–±—É–µ–º EnhancedMoonPhase
      const enhancedData = EnhancedMoonPhase.calculatePhase(date);
      if (enhancedData) {
        console.log('üßÆ –î–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ EnhancedMoonPhase:', enhancedData.source);
        saveMoonData(date, enhancedData);
        
        return {
          success: true,
          data: enhancedData,
          source: enhancedData.source
        };
      }

      // 3. Fallback –∫ API
      console.log('üåê Fallback –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É API...');
      const apiData = await makeRequest(API_ENDPOINTS.MOON);
      
      if (apiData && !apiData.raw) {
        const normalizedData = {
          phase: apiData.current?.phase || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∞–∑–∞',
          emoji: apiData.current?.emoji || 'üåô',
          illumination: apiData.current?.illumination || 0,
          age: apiData.current?.age || 0,
          lunarDay: apiData.current?.age ? Math.floor(apiData.current.age) + 1 : 1,
          isWaxing: apiData.current?.age ? apiData.current.age < 14.7 : false,
          moonrise: apiData.current?.moonrise || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          moonset: apiData.current?.moonset || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
          source: 'api'
        };

        saveMoonData(date, normalizedData);
        
        return {
          success: true,
          data: normalizedData,
          source: 'api'
        };
      }

      throw new Error(ERROR_MESSAGES.NO_DATA_SOURCE);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);

      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      const fallbackData = EnhancedMoonPhase.getFallbackData(date);
      
      if (fallbackData) {
        console.log('üÜò –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
        return {
          success: false,
          data: fallbackData,
          source: 'fallback',
          error: error.message
        };
      }

      return {
        success: false,
        data: null,
        source: 'none',
        error: error.message
      };
    }
  }, [makeRequest]);

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ API –º–µ—Ç–æ–¥—ã
  const getHoroscope = useCallback(async (sign) => {
    if (!sign) {
      throw new Error('–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    return await makeRequest(`${API_ENDPOINTS.HOROSCOPE}?sign=${encodeURIComponent(sign)}`);
  }, [makeRequest]);

  const getAstroEvents = useCallback(async () => {
    return await makeRequest(API_ENDPOINTS.ASTRO_EVENTS);
  }, [makeRequest]);

  const getNumerology = useCallback(async (birthDate) => {
    if (!birthDate) {
      throw new Error('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }

    return await makeRequest(API_ENDPOINTS.NUMEROLOGY, {
      method: 'POST',
      body: JSON.stringify({ birthDate })
    });
  }, [makeRequest]);

  const getCompatibility = useCallback(async (sign1, sign2) => {
    if (!sign1 || !sign2) {
      throw new Error('–û–±–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    return await makeRequest(
      `${API_ENDPOINTS.COMPATIBILITY}/${encodeURIComponent(sign1)}/${encodeURIComponent(sign2)}`
    );
  }, [makeRequest]);

  const getDayCard = useCallback(async () => {
    return await makeRequest(API_ENDPOINTS.DAY_CARD);
  }, [makeRequest]);

  const getMercuryStatus = useCallback(async () => {
    return await makeRequest(API_ENDPOINTS.MERCURY);
  }, [makeRequest]);

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
  const clearCache = useCallback(() => {
    requestCache.current.clear();
    console.log('üóëÔ∏è API –∫–µ—à –æ—á–∏—â–µ–Ω');
  }, []);

  // –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const cancelRequests = useCallback(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    loading,
    error,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    makeRequest,
    getMoonData,
    getHoroscope,
    getAstroEvents,
    getNumerology,
    getCompatibility,
    getDayCard,
    getMercuryStatus,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    clearCache,
    cancelRequests
  };
};

export default useAPI;
export { useAPI };
