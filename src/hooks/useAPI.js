import { useState, useCallback } from 'react';

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –•–∞—Ä–¥–∫–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Render
const API_BASE = 'https://d-gnome-horoscope-miniapp-frontend.onrender.com';

console.log('üîó API_BASE —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', API_BASE);

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ì–Ω–æ–º—å–µ–≥–æ –ì–æ—Ä–æ—Å–∫–æ–ø–∞
 */
export function useAPI() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const apiCall = useCallback(async (endpoint, options = {}) => {
    setLoading(true);
    setError(null);
    
    const timeoutId = setTimeout(() => {
      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)');
    }, 30000);
    
    try {
      const fullUrl = `${API_BASE}${endpoint}`;
      console.log(`üåê API –∑–∞–ø—Ä–æ—Å: ${fullUrl}`, options);
      
      const response = await fetch(fullUrl, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Cache-Control': 'no-cache',
          ...options.headers,
        },
        mode: 'cors',
        credentials: 'omit', // –£–±—Ä–∞–ª–∏ include –¥–ª—è CORS
        ...options,
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        
        try {
          const errorData = await response.json();
          errorMessage = errorData.message || errorData.error || errorMessage;
        } catch (parseError) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', parseError);
        }
        
        throw new Error(errorMessage);
      }
      
      const data = await response.json();
      console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
        endpoint,
        status: response.status,
        dataKeys: Object.keys(data),
        timestamp: new Date().toISOString()
      });
      
      return data;
      
    } catch (err) {
      clearTimeout(timeoutId);
      console.error('‚ùå –û—à–∏–±–∫–∞ API:', {
        endpoint,
        error: err.message,
        timestamp: new Date().toISOString()
      });
      
      let userFriendlyMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É';
      
      if (err.name === 'TypeError' && err.message.includes('Failed to fetch')) {
        userFriendlyMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
      } else if (err.message.includes('timeout')) {
        userFriendlyMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      } else if (err.message.includes('400')) {
        userFriendlyMessage = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞';
      } else if (err.message.includes('404')) {
        userFriendlyMessage = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
      } else if (err.message.includes('500')) {
        userFriendlyMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (err.message) {
        userFriendlyMessage = err.message;
      }
      
      setError(userFriendlyMessage);
      throw new Error(userFriendlyMessage);
      
    } finally {
      setLoading(false);
    }
  }, []);

  // API –º–µ—Ç–æ–¥—ã
  const getHoroscope = useCallback((sign) => {
    if (!sign) {
      throw new Error('–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    return apiCall(`/api/horoscope?sign=${encodeURIComponent(sign)}`);
  }, [apiCall]);
  
  const getDayCard = useCallback(() => {
    return apiCall('/api/day-card', { method: 'POST' });
  }, [apiCall]);
  
  const getAdvice = useCallback(() => {
    return apiCall('/api/advice');
  }, [apiCall]);
  
  const getMoonData = useCallback(() => {
    return apiCall('/api/moon');
  }, [apiCall]);
  
  const calculateNumerology = useCallback((birthDate) => {
    if (!birthDate) {
      throw new Error('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }
    
    const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
    if (!dateRegex.test(birthDate)) {
      throw new Error('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD');
    }
    
    return apiCall('/api/numerology', {
      method: 'POST',
      body: JSON.stringify({ birthDate }),
    });
  }, [apiCall]);
  
  const checkCompatibility = useCallback((sign1, sign2) => {
    if (!sign1 || !sign2) {
      throw new Error('–û–±–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }
    
    return apiCall('/api/compatibility', {
      method: 'POST',
      body: JSON.stringify({ sign1, sign2 }),
    });
  }, [apiCall]);
  
  const getAstroEvents = useCallback(() => {
    return apiCall('/api/astro-events');
  }, [apiCall]);
  
  const getMercuryStatus = useCallback(() => {
    return apiCall('/api/mercury');
  }, [apiCall]);

  const checkAPIHealth = useCallback(() => {
    return apiCall('/');
  }, [apiCall]);

  const checkConnection = useCallback(async () => {
    try {
      await checkAPIHealth();
      return true;
    } catch (error) {
      console.warn('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }, [checkAPIHealth]);

  const getAPIVersion = useCallback(async () => {
    try {
      const health = await checkAPIHealth();
      return health.version || 'unknown';
    } catch (error) {
      return 'unavailable';
    }
  }, [checkAPIHealth]);

  return {
    loading,
    error,
    clearError,
    checkConnection,
    getAPIVersion,
    getHoroscope,
    getDayCard,
    getAdvice,
    getMoonData,
    calculateNumerology,
    checkCompatibility,
    getAstroEvents,
    getMercuryStatus,
    checkAPIHealth,
  };
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
export function useAPICache() {
  const [cache, setCache] = useState(new Map());
  
  const getCachedData = useCallback((key) => {
    const cached = cache.get(key);
    if (cached && Date.now() - cached.timestamp < 300000) { // 5 –º–∏–Ω—É—Ç
      return cached.data;
    }
    return null;
  }, [cache]);
  
  const setCachedData = useCallback((key, data) => {
    setCache(prev => new Map(prev.set(key, {
      data,
      timestamp: Date.now()
    })));
  }, []);
  
  const clearCache = useCallback(() => {
    setCache(new Map());
  }, []);
  
  return {
    getCachedData,
    setCachedData,
    clearCache
  };
}

export const API_ENDPOINTS = {
  HOROSCOPE: '/api/horoscope',
  DAY_CARD: '/api/day-card',
  ADVICE: '/api/advice',
  MOON: '/api/moon',
  NUMEROLOGY: '/api/numerology',
  COMPATIBILITY: '/api/compatibility',
  ASTRO_EVENTS: '/api/astro-events',
  MERCURY: '/api/mercury',
  HEALTH: '/'
};

export const ZODIAC_SIGNS = [
  '–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞',
  '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'
];

export default useAPI;
