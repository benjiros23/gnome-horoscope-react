const dayjs = require('dayjs');
const { getMoonIllumination } = require('lunarphase-js');
const cron = require('node-cron');

// –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—ç—à
let events = [];

/* ---------- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–ª—É–Ω–∏–π / –Ω–æ–≤–æ–ª—É–Ω–∏–π –Ω–∞ 30 –¥–Ω–µ–π ---------- */
function generateLunarEvents(daysAhead = 30) {
  const result = [];
  const today = dayjs().startOf('day');

  for (let i = 0; i < daysAhead; i++) {
    const d = today.add(i, 'day');
    const illum = getMoonIllumination(d.toDate());

    if (Math.abs(illum.phase - 0) < 0.02) {
      // –Ω–æ–≤–æ–ª—É–Ω–∏–µ
      result.push({
        id: `nm-${d.format('YYYY-MM-DD')}`,
        type: 'new_moon',
        exactDateUTC: d.toISOString(),
        title: 'üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ',
        shortText: '–í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ',
      });
    } else if (Math.abs(illum.phase - 0.5) < 0.02) {
      // –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ
      result.push({
        id: `fm-${d.format('YYYY-MM-DD')}`,
        type: 'full_moon',
        exactDateUTC: d.toISOString(),
        title: 'üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
        shortText: '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–∏–∫, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–ª–∞',
      });
    }
  }
  return result;
}

/* ---------- –ø—É–±–ª–∏—á–Ω—ã–π –≥–µ—Ç—Ç–µ—Ä ---------- */
function getEvents(range = 30) {
  // –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∫—ç—à –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
  const toDate = dayjs().add(range, 'day');
  return events.filter(e => dayjs(e.exactDateUTC).isBefore(toDate));
}

/* ---------- –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ ---------- */
function refreshCache() {
  events = generateLunarEvents(60); // –¥–µ—Ä–∂–∏–º –∑–∞–ø–∞—Å 60 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
  console.log(`üî≠ AstroEvents –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ: ${events.length}`);
}

// –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
refreshCache();

// —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:05 UTC
cron.schedule('5 3 * * *', refreshCache);

module.exports = { getEvents };
