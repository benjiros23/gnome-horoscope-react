// Enhanced API service with caching and error handling + Backend Integration
class ApiService {
  constructor() {
    // üßô‚Äç‚ôÇÔ∏è URL –≤–∞—à–µ–≥–æ FastAPI –±—ç–∫–µ–Ω–¥–∞
    this.baseURL = process.env.REACT_APP_API_URL || 'https://d-gnome-horoscope-miniapp-frontend.onrender.com';
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes
    
    // ü§ñ Telegram Bot Configuration
    this.telegramBotToken = process.env.REACT_APP_TELEGRAM_BOT_TOKEN;
    this.telegramApiUrl = `https://api.telegram.org/bot${this.telegramBotToken}`;
  }

  async request(endpoint, options = {}) {
    const cacheKey = `${endpoint}_${JSON.stringify(options)}`;
    
    // Check cache first for GET requests
    if (!options.method || options.method === 'GET') {
      if (this.cache.has(cacheKey)) {
        const cached = this.cache.get(cacheKey);
        if (Date.now() - cached.timestamp < this.cacheTimeout) {
          console.log('üßô‚Äç‚ôÇÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', endpoint);
          return cached.data;
        }
      }
    }

    try {
      const fullUrl = `${this.baseURL}${endpoint}`;
      console.log('üîÆ –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É:', fullUrl);
      
      const response = await fetch(fullUrl, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        ...options
      });

      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data);
      
      // Cache successful GET responses
      if (!options.method || options.method === 'GET') {
        this.cache.set(cacheKey, {
          data,
          timestamp: Date.now()
        });
      }

      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error);
      console.error('üîß URL:', `${this.baseURL}${endpoint}`);
      
      // Fallback to mock data for critical endpoints
      if (endpoint.includes('/api/horoscope')) {
        console.log('üßô‚Äç‚ôÇÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞');
        return this.getMockHoroscope();
      }
      
      throw error;
    }
  }

  // üßô‚Äç‚ôÇÔ∏è –û–°–ù–û–í–ù–´–ï API –ú–ï–¢–û–î–´ –î–õ–Ø –ë–≠–ö–ï–ù–î–ê
  
  // –ì–æ—Ä–æ—Å–∫–æ–ø (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –≤–∞—à–∏–º –±—ç–∫–µ–Ω–¥–æ–º)
  async getHoroscope(sign, date = null, userId = null) {
    const params = new URLSearchParams();
    params.append('sign', sign);
    if (date) params.append('date', date);
    if (userId) params.append('user_id', userId);
    
    return this.request(`/api/horoscope?${params.toString()}`);
  }

  // –ü—Ä–µ–º–∏—É–º –≥–æ—Ä–æ—Å–∫–æ–ø
  async getPremiumHoroscope(sign, initData) {
    try {
      return await this.request('/api/horoscope/premium', {
        method: 'POST',
        body: JSON.stringify({ sign, initData })
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', error);
      return this.getMockPremiumHoroscope(sign);
    }
  }

  // –ö–∞—Ä—Ç–∞ –¥–Ω—è
  async getDayCard(initData) {
    try {
      return await this.request('/api/day-card', {
        method: 'POST',
        body: JSON.stringify({ initData })
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
      return this.getMockDayCard();
    }
  }

  // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
  async addToFavorites(type, content, initData) {
    return this.request('/api/favorites', {
      method: 'POST',
      body: JSON.stringify({ type, content, initData })
    });
  }

  async getFavorites(initData) {
    return this.request(`/api/favorites?init_data=${encodeURIComponent(initData)}`);
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
  async saveUserSettings(settings, initData) {
    return this.request('/api/user/settings', {
      method: 'POST',
      body: JSON.stringify({ settings, initData })
    });
  }

  async getUserSettings(initData) {
    try {
      return await this.request(`/api/user/settings?init_data=${encodeURIComponent(initData)}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return {
        zodiac_sign: null,
        premium: false,
        language: 'ru',
        theme: 'light',
        notification_time: '09:00'
      };
    }
  }

  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
  async getUserAnalytics(initData) {
    try {
      return await this.request(`/api/analytics/user?init_data=${encodeURIComponent(initData)}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      return { action_statistics: {}, recent_actions: [], total_actions: 0 };
    }
  }

  // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  async shareContent(contentType, content, shareText, initData) {
    return this.request('/api/share', {
      method: 'POST',
      body: JSON.stringify({
        content_type: contentType,
        content,
        share_text: shareText,
        initData
      })
    });
  }

  async getSharedContent(shareId) {
    return this.request(`/api/shared/${shareId}`);
  }

  // üßô‚Äç‚ôÇÔ∏è LEGACY –ú–ï–¢–û–î–´ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  async getMoonData() {
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ, –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –±—ç–∫–µ–Ω–¥–æ–º –ø–æ–∑–∂–µ
    return this.getMockMoonData();
  }

  async getCompatibility(sign1, sign2) {
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ, –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –±—ç–∫–µ–Ω–¥–æ–º –ø–æ–∑–∂–µ
    return this.getMockCompatibility(sign1, sign2);
  }

  // üßô‚Äç‚ôÇÔ∏è MOCK –î–ê–ù–ù–´–ï –î–õ–Ø –û–§–§–õ–ê–ô–ù –†–ï–ñ–ò–ú–ê
  getMockHoroscope() {
    const horoscopes = [
      "–ó–≤–µ–∑–¥—ã —Å–æ–≤–µ—Ç—É—é—Ç –ø—Ä–æ—è–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É! –°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
      "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ - –æ–Ω–∞ –Ω–µ –ø–æ–¥–≤–µ–¥–µ—Ç –≤ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö.",
      "–î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.",
      "–í—Ä–µ–º—è –ø—Ä–æ—è–≤–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏! –ù–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å."
    ];
    
    return {
      sign: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
      date: new Date().toISOString().split('T')[0],
      text: horoscopes[Math.floor(Math.random() * horoscopes.length)],
      cached: false,
      source: "mock"
    };
  }

  getMockPremiumHoroscope(sign) {
    return {
      sign,
      date: new Date().toISOString().split('T')[0],
      premium_data: {
        detailed_forecast: "üßô‚Äç‚ôÇÔ∏è –ì–Ω–æ–º—ã —à–µ–ø—á—É—Ç –æ—Å–æ–±—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –∑–≤–µ–∑–¥ –¥–ª—è –≤–∞—Å...",
        love_compatibility: "üíï –ú–∞–≥–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è –ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—É—à–∏",
        career_advice: "üíº –ó–æ–ª–æ—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∂–¥—É—Ç —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
        health_tips: "üåø –õ–µ—Å–Ω—ã–µ —Ç—Ä–∞–≤—ã –∏ —á–∏—Å—Ç–∞—è –≤–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤—è—Ç —Å–∏–ª—ã",
        lucky_numbers: [7, 13, 21],
        lucky_colors: "–∑–æ–ª–æ—Ç–æ–π",
        moon_influence: "üåô –õ—É–Ω–∞ –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è–µ—Ç –≤–∞—à–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è"
      }
    };
  }

  getMockDayCard() {
    const cards = [
      {title: "–ì–Ω–æ–º-–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç", text: "–°–µ–≥–æ–¥–Ω—è –≤—Ä–µ–º—è –¥–ª—è —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π! –ù–µ –±–æ–π—Å—è —Ä–∏—Å–∫–Ω—É—Ç—å - —Ñ–æ—Ä—Ç—É–Ω–∞ –ª—é–±–∏—Ç —Ö—Ä–∞–±—Ä—ã—Ö."},
      {title: "–ì–Ω–æ–º-–ø–æ–≤–∞—Ä", text: "–î–µ–Ω—å –¥–ª—è –∑–∞–±–æ—Ç—ã –æ —Å–≤–æ–µ–º —Ç–µ–ª–µ –∏ –¥—É—à–µ. –ü—Ä–∏–≥–æ—Ç–æ–≤—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ –∏–ª–∏ –ø–æ–±–∞–ª—É–π —Å–µ–±—è."},
      {title: "–ì–Ω–æ–º-—Å–∞–¥–æ–≤–Ω–∏–∫", text: "–í—Ä–µ–º—è –ø–æ—Å–∞–¥–∏—Ç—å —Å–µ–º–µ–Ω–∞ –±—É–¥—É—â–∏—Ö —É—Å–ø–µ—Ö–æ–≤. –ù–µ–±–æ–ª—å—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–Ω–µ—Å—É—Ç –±–æ–ª—å—à–∏–µ –ø–ª–æ–¥—ã."},
      {title: "–ì–Ω–æ–º-–∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å", text: "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏–¥—É–º–∞–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–ª–∏ —Ä–µ—à–∏ –∑–∞–¥–∞—á—É –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º."}
    ];
    
    const card = cards[Math.floor(Math.random() * cards.length)];
    return {
      title: card.title,
      text: card.text,
      reused: false,
      date: new Date().toISOString().split('T')[0]
    };
  }

  getMockMoonData() {
    return {
      phase: "–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞",
      illumination: 67,
      age: 8.5,
      distance: 384400,
      nextNewMoon: "2024-01-15",
      nextFullMoon: "2024-01-28"
    };
  }

  getMockCompatibility(sign1, sign2) {
    return {
      compatibility: Math.floor(Math.random() * 50) + 50, // 50-100%
      description: `${sign1} –∏ ${sign2} –∏–º–µ—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å! –ó–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç —ç—Ç–æ–º—É —Å–æ—é–∑—É.`,
      advice: "–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–µ—Ä–¥—Ü–µ."
    };
  }

  // Clear cache
  clearCache() {
    this.cache.clear();
  }

  // Health check
  async healthCheck() {
    try {
      return await this.request('/health');
    } catch (error) {
      return { status: 'offline', error: error.message };
    }
  }

  // ü§ñ TELEGRAM BOT API METHODS
  
  // Send message via Telegram Bot API
  async sendTelegramMessage(chatId, text, options = {}) {
    if (!this.telegramBotToken) {
      console.warn('‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return { success: false, error: 'Bot token not configured' };
    }

    try {
      const response = await fetch(`${this.telegramApiUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: 'HTML',
          ...options
        })
      });

      const data = await response.json();
      
      if (data.ok) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', chatId);
        return { success: true, data: data.result };
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', data.description);
        return { success: false, error: data.description };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', error);
      return { success: false, error: error.message };
    }
  }

  // Send horoscope to user via Telegram
  async sendHoroscopeToTelegram(chatId, horoscopeData) {
    const message = `üîÆ <b>–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ${horoscopeData.sign}</b>

` +
                   `üìÖ <i>${horoscopeData.date}</i>

` +
                   `${horoscopeData.horoscope?.general || horoscopeData.text}

` +
                   `üé≤ <b>–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ:</b> ${horoscopeData.luckyNumber || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
` +
                   `üé® <b>–¶–≤–µ—Ç –¥–Ω—è:</b> ${horoscopeData.luckyColor || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

` +
                   `üßô‚Äç‚ôÇÔ∏è <i>–û—Ç –≤–∞—à–µ–≥–æ ${horoscopeData.gnome || '–ê—Å—Ç—Ä–æ –ì–Ω–æ–º–∞'}</i>`;

    return this.sendTelegramMessage(chatId, message);
  }

  // Send daily card to user via Telegram
  async sendDayCardToTelegram(chatId, cardData) {
    const message = `üÉè <b>–ö–∞—Ä—Ç–∞ –¥–Ω—è</b>

` +
                   `üßô‚Äç‚ôÇÔ∏è <b>${cardData.title}</b>

` +
                   `${cardData.text}

` +
                   `üìÖ <i>${cardData.date}</i>`;

    return this.sendTelegramMessage(chatId, message);
  }

  // Set webhook for bot
  async setWebhook(webhookUrl) {
    if (!this.telegramBotToken) {
      return { success: false, error: 'Bot token not configured' };
    }

    try {
      const response = await fetch(`${this.telegramApiUrl}/setWebhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          url: webhookUrl,
          allowed_updates: ['message', 'callback_query']
        })
      });

      const data = await response.json();
      return { success: data.ok, data: data.result };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  // Get webhook info
  async getWebhookInfo() {
    if (!this.telegramBotToken) {
      return { success: false, error: 'Bot token not configured' };
    }

    try {
      const response = await fetch(`${this.telegramApiUrl}/getWebhookInfo`);
      const data = await response.json();
      return { success: data.ok, data: data.result };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  // Get bot info
  async getBotInfo() {
    if (!this.telegramBotToken) {
      return { success: false, error: 'Bot token not configured' };
    }

    try {
      const response = await fetch(`${this.telegramApiUrl}/getMe`);
      const data = await response.json();
      return { success: data.ok, data: data.result };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  // Send notification to user about new features
  async sendFeatureNotification(chatId, featureName, description) {
    const message = `üéÜ <b>–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è!</b>

` +
                   `‚ú® <b>${featureName}</b>

` +
                   `${description}

` +
                   `üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!`;

    return this.sendTelegramMessage(chatId, message);
  }

  // üìä Analytics: Track user actions via bot
  async trackUserAction(userId, action, data = {}) {
    try {
      return await this.request('/api/analytics/track', {
        method: 'POST',
        body: JSON.stringify({
          user_id: userId,
          action: action,
          data: data,
          timestamp: new Date().toISOString(),
          source: 'telegram_bot'
        })
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞:', error);
      return { success: false, error: error.message };
    }
  }
}

export default new ApiService();