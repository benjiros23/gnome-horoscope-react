// src/services/telegramBot.js
import apiService from './api';

class TelegramBotService {
  constructor() {
    this.botToken = process.env.REACT_APP_TELEGRAM_BOT_TOKEN;
    this.botUsername = process.env.REACT_APP_TELEGRAM_BOT_USERNAME;
    this.webAppUrl = process.env.REACT_APP_TELEGRAM_WEBAPP_URL;
    this.isInitialized = false;
  }

  // üöÄ Initialize bot integration
  async initialize() {
    if (!this.botToken) {
      console.warn('‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    try {
      const botInfo = await apiService.getBotInfo();
      if (botInfo.success) {
        console.log('‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', botInfo.data);
        this.isInitialized = true;
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', botInfo.error);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API:', error);
      return false;
    }
  }

  // üì± Get current Telegram user from WebApp
  getCurrentTelegramUser() {
    const tg = window.Telegram?.WebApp;
    if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
      return tg.initDataUnsafe.user;
    }
    return null;
  }

  // üì§ Send current horoscope to user's Telegram
  async shareHoroscopeToTelegram(horoscopeData) {
    const user = this.getCurrentTelegramUser();
    if (!user) {
      console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    try {
      const result = await apiService.sendHoroscopeToTelegram(user.id, horoscopeData);
      
      if (result.success) {
        // Show success feedback in WebApp
        this.showSuccessFeedback('üì§ –ì–æ—Ä–æ—Å–∫–æ–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç!');
        
        // Track the action
        await apiService.trackUserAction(user.id, 'horoscope_shared', {
          sign: horoscopeData.sign,
          method: 'telegram'
        });
        
        return true;
      } else {
        this.showErrorFeedback('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', error);
      this.showErrorFeedback('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return false;
    }
  }

  // üÉè Send day card to user's Telegram
  async shareDayCardToTelegram(cardData) {
    const user = this.getCurrentTelegramUser();
    if (!user) {
      console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    try {
      const result = await apiService.sendDayCardToTelegram(user.id, cardData);
      
      if (result.success) {
        this.showSuccessFeedback('üì§ –ö–∞—Ä—Ç–∞ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç!');
        
        await apiService.trackUserAction(user.id, 'day_card_shared', {
          card_title: cardData.title,
          method: 'telegram'
        });
        
        return true;
      } else {
        this.showErrorFeedback('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã:', error);
      this.showErrorFeedback('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      return false;
    }
  }

  // üîî Set up daily horoscope notifications
  async setupDailyNotifications(sign, time = '09:00') {
    const user = this.getCurrentTelegramUser();
    if (!user) {
      return false;
    }

    try {
      // Save notification settings to backend
      const result = await apiService.request('/api/notifications/setup', {
        method: 'POST',
        body: JSON.stringify({
          user_id: user.id,
          notification_type: 'daily_horoscope',
          zodiac_sign: sign,
          time: time,
          enabled: true
        })
      });

      if (result.success) {
        this.showSuccessFeedback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
        
        // Send confirmation message to user
        await apiService.sendTelegramMessage(
          user.id,
          `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!</b>\n\n` +
          `–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ ${time} –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ ${sign}.\n\n` +
          `–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –≤ –±–æ—Ç–µ.`
        );
        
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return false;
    }
  }

  // üìä Get user statistics from bot
  async getUserStatistics() {
    const user = this.getCurrentTelegramUser();
    if (!user) {
      return null;
    }

    try {
      const stats = await apiService.getUserAnalytics(user.id);
      return stats;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return null;
    }
  }

  // üéØ Share app with friends
  async shareApp() {
    const tg = window.Telegram?.WebApp;
    if (!tg) {
      return false;
    }

    try {
      const shareText = `üîÆ –ê—Å—Ç—Ä–æ –ì–Ω–æ–º - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –æ—Ç –º—É–¥—Ä—ã—Ö –≥–Ω–æ–º–æ–≤!\\n\\n` +
                       `‚ú® –ü–æ–ª—É—á–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\\n` +
                       `üé¥ –ö–∞—Ä—Ç—ã –¥–Ω—è –æ—Ç –≥–Ω–æ–º–æ–≤-–º—É–¥—Ä–µ—Ü–æ–≤\\n` +
                       `üí´ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ –≤—Å–µ–º–∏ –∑–Ω–∞–∫–∞–º–∏\\n\\n` +
                       `–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

      const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(this.webAppUrl)}&text=${encodeURIComponent(shareText)}`;
      
      // Open share dialog
      if (tg.openTelegramLink) {
        tg.openTelegramLink(shareUrl);
      } else if (tg.openLink) {
        tg.openLink(shareUrl);
      } else {
        window.open(shareUrl, '_blank');
      }

      // Track sharing action
      const user = this.getCurrentTelegramUser();
      if (user) {
        await apiService.trackUserAction(user.id, 'app_shared', {
          method: 'telegram_share'
        });
      }

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —à–µ—Ä–∏–Ω–≥–∞:', error);
      return false;
    }
  }

  // üí¨ Open bot chat
  openBotChat() {
    if (!this.botUsername) {
      console.warn('‚ö†Ô∏è Bot username –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    const tg = window.Telegram?.WebApp;
    const botUrl = `https://t.me/${this.botUsername}`;
    
    try {
      if (tg && tg.openTelegramLink) {
        tg.openTelegramLink(botUrl);
      } else if (tg && tg.openLink) {
        tg.openLink(botUrl);
      } else {
        window.open(botUrl, '_blank');
      }
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞:', error);
      return false;
    }
  }

  // üéâ Show success feedback in WebApp
  showSuccessFeedback(message) {
    const tg = window.Telegram?.WebApp;
    
    // Haptic feedback
    if (tg?.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
      try {
        tg.HapticFeedback.notificationOccurred('success');
      } catch (e) {
        // Ignore version errors
      }
    }

    // Show popup if supported
    if (tg?.showPopup && typeof tg.showPopup === 'function') {
      try {
        tg.showPopup({
          title: '–£—Å–ø–µ—à–Ω–æ!',
          message: message,
          buttons: [{type: 'ok'}]
        });
      } catch (e) {
        // Fallback to alert
        if (tg?.showAlert) {
          tg.showAlert(message);
        }
      }
    } else if (tg?.showAlert) {
      tg.showAlert(message);
    }
  }

  // ‚ùå Show error feedback in WebApp
  showErrorFeedback(message) {
    const tg = window.Telegram?.WebApp;
    
    // Haptic feedback
    if (tg?.HapticFeedback && typeof tg.HapticFeedback.notificationOccurred === 'function') {
      try {
        tg.HapticFeedback.notificationOccurred('error');
      } catch (e) {
        // Ignore version errors
      }
    }

    // Show popup if supported
    if (tg?.showPopup && typeof tg.showPopup === 'function') {
      try {
        tg.showPopup({
          title: '–û—à–∏–±–∫–∞',
          message: message,
          buttons: [{type: 'ok'}]
        });
      } catch (e) {
        // Fallback to alert
        if (tg?.showAlert) {
          tg.showAlert(message);
        }
      }
    } else if (tg?.showAlert) {
      tg.showAlert(message);
    }
  }

  // üîß Debug: Test bot connection
  async testBotConnection() {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É...');
    
    if (!this.botToken) {
      console.error('‚ùå Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return false;
    }

    try {
      const botInfo = await apiService.getBotInfo();
      console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botInfo);

      const webhookInfo = await apiService.getWebhookInfo();
      console.log('üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', webhookInfo);

      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:', error);
      return false;
    }
  }
}

export default new TelegramBotService();