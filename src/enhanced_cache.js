// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å TTL, –∫–æ–º–ø—Ä–µ—Å—Å–∏–µ–π –∏ –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
const CACHE_PREFIX = 'gnome_cache_';
const MAX_CACHE_SIZE = 5 * 1024 * 1024; // 5MB
const DEFAULT_TTL = 6 * 60 * 60 * 1000; // 6 —á–∞—Å–æ–≤
const CLEANUP_INTERVAL = 60 * 60 * 1000; // 1 —á–∞—Å

// TTL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
const TTL_CONFIG = {
  MOON_DATA: 6 * 60, // 6 —á–∞—Å–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö
  HOROSCOPE: 24 * 60, // 24 —á–∞—Å–∞
  API_RESPONSE: 30, // 30 –º–∏–Ω—É—Ç
  USER_PREFERENCES: 7 * 24 * 60, // 7 –¥–Ω–µ–π
  STATIC_DATA: 30 * 24 * 60 // 30 –¥–Ω–µ–π
};

// ===== –£–¢–ò–õ–ò–¢–´ =====
class CacheUtils {
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç–∞—Ö
  static getByteSize(str) {
    return new Blob([str]).size;
  }

  // –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–æ–µ base64)
  static compress(data) {
    try {
      const jsonString = JSON.stringify(data);
      return btoa(encodeURIComponent(jsonString));
    } catch (error) {
      console.warn('Cache compression failed:', error);
      return JSON.stringify(data);
    }
  }

  // –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  static decompress(compressedData) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∂–∞—Ç—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
      if (typeof compressedData === 'string' && !compressedData.startsWith('{')) {
        const decompressed = decodeURIComponent(atob(compressedData));
        return JSON.parse(decompressed);
      }
      return JSON.parse(compressedData);
    } catch (error) {
      console.warn('Cache decompression failed:', error);
      return null;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  static generateKey(type, identifier, params = {}) {
    const paramString = Object.keys(params).length > 0 
      ? '_' + Object.entries(params)
          .sort(([a], [b]) => a.localeCompare(b))
          .map(([k, v]) => `${k}-${v}`)
          .join('_')
      : '';
    
    return `${type}_${identifier}${paramString}`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ localStorage
  static isStorageAvailable() {
    try {
      const test = '__cache_test__';
      localStorage.setItem(test, test);
      localStorage.removeItem(test);
      return true;
    } catch (error) {
      return false;
    }
  }
}

// ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ö–ï–®–ê =====
export class EnhancedCache {
  static _instance = null;
  static _cleanupInterval = null;
  static _storageAvailable = null;

  // Singleton pattern
  static getInstance() {
    if (!this._instance) {
      this._instance = new EnhancedCache();
    }
    return this._instance;
  }

  constructor() {
    this._initCleanup();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ storage
  get storageAvailable() {
    if (EnhancedCache._storageAvailable === null) {
      EnhancedCache._storageAvailable = CacheUtils.isStorageAvailable();
    }
    return EnhancedCache._storageAvailable;
  }

  // –ë–∞–∑–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
  saveToCache(key, data, options = {}) {
    if (!this.storageAvailable) {
      console.warn('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }

    try {
      const {
        ttlMinutes = 360,
        compress = false,
        metadata = {}
      } = options;

      const now = Date.now();
      const item = {
        data: compress ? CacheUtils.compress(data) : data,
        timestamp: now,
        ttl: ttlMinutes * 60 * 1000,
        expiresAt: now + (ttlMinutes * 60 * 1000),
        compressed: compress,
        metadata: {
          version: '1.0',
          size: 0,
          ...metadata
        }
      };

      const serializedItem = JSON.stringify(item);
      item.metadata.size = CacheUtils.getByteSize(serializedItem);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      if (this._checkCacheSize(serializedItem)) {
        const fullKey = `${CACHE_PREFIX}${key}`;
        localStorage.setItem(fullKey, serializedItem);
        
        console.log(`üíæ –ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${key} (${item.metadata.size} bytes, TTL: ${ttlMinutes} –º–∏–Ω)`);
        return true;
      }

      return false;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à:', error);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ
      if (error.name === 'QuotaExceededError') {
        this.cleanExpiredCache();
        console.log('üßπ –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –≤ –∫–µ—à–µ...');
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        try {
          const fullKey = `${CACHE_PREFIX}${key}`;
          localStorage.setItem(fullKey, JSON.stringify({
            data,
            timestamp: Date.now(),
            ttl: options.ttlMinutes * 60 * 1000 || DEFAULT_TTL,
            expiresAt: Date.now() + (options.ttlMinutes * 60 * 1000 || DEFAULT_TTL)
          }));
          return true;
        } catch (retryError) {
          console.error('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', retryError);
        }
      }
      
      return false;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫–µ—à–∞
  loadFromCache(key, options = {}) {
    if (!this.storageAvailable) {
      return null;
    }

    try {
      const fullKey = `${CACHE_PREFIX}${key}`;
      const item = localStorage.getItem(fullKey);
      
      if (!item) {
        console.log(`üì≠ –ö–µ—à –ø—É—Å—Ç: ${key}`);
        return null;
      }

      const parsedItem = JSON.parse(item);
      const { data, timestamp, ttl, expiresAt, compressed, metadata } = parsedItem;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏
      const now = Date.now();
      const expired = expiresAt ? now > expiresAt : (now - timestamp > ttl);

      if (expired) {
        console.log(`‚è∞ –ö–µ—à –∏—Å—Ç–µ–∫: ${key}`);
        localStorage.removeItem(fullKey);
        return null;
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      const remainingMinutes = Math.round((expiresAt - now) / (1000 * 60));
      const size = metadata?.size ? `, ${metadata.size} bytes` : '';
      console.log(`üì¶ –ö–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω: ${key} (${remainingMinutes} –º–∏–Ω${size})`);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      return compressed ? CacheUtils.decompress(data) : data;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫–µ—à–∞:', error);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      try {
        localStorage.removeItem(`${CACHE_PREFIX}${key}`);
      } catch (removeError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–µ—à–∞:', removeError);
      }
      
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–µ—à–∞
  _checkCacheSize(newItem) {
    try {
      const currentSize = this.getCurrentCacheSize();
      const newItemSize = CacheUtils.getByteSize(newItem);
      
      if (currentSize + newItemSize > MAX_CACHE_SIZE) {
        console.warn(`‚ö†Ô∏è –ö–µ—à –±–ª–∏–∑–æ–∫ –∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—é: ${Math.round(currentSize / 1024)}KB`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.cleanExpiredCache();
        this._cleanOldestItems(0.3); // –£–¥–∞–ª—è–µ–º 30% —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        return this.getCurrentCacheSize() + newItemSize <= MAX_CACHE_SIZE;
      }
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∫–µ—à–∞:', error);
      return true; // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–µ—à–∞
  getCurrentCacheSize() {
    try {
      const keys = Object.keys(localStorage).filter(key => key.startsWith(CACHE_PREFIX));
      return keys.reduce((total, key) => {
        const item = localStorage.getItem(key);
        return total + CacheUtils.getByteSize(item);
      }, 0);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–µ—à–∞:', error);
      return 0;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  _cleanOldestItems(percentage = 0.2) {
    try {
      const keys = Object.keys(localStorage).filter(key => key.startsWith(CACHE_PREFIX));
      const items = keys.map(key => {
        const item = localStorage.getItem(key);
        try {
          const parsed = JSON.parse(item);
          return { key, timestamp: parsed.timestamp || 0 };
        } catch (error) {
          return { key, timestamp: 0 };
        }
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
      items.sort((a, b) => a.timestamp - b.timestamp);
      
      const itemsToRemove = Math.floor(items.length * percentage);
      let removed = 0;

      for (let i = 0; i < itemsToRemove && i < items.length; i++) {
        try {
          localStorage.removeItem(items[i].key);
          removed++;
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–µ—à–∞:', error);
        }
      }

      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${removed}`);
      return removed;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', error);
      return 0;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏
  _initCleanup() {
    if (typeof window !== 'undefined' && !EnhancedCache._cleanupInterval) {
      // –ù–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        this.cleanExpiredCache();
      }, 1000);

      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
      EnhancedCache._cleanupInterval = setInterval(() => {
        this.cleanExpiredCache();
      }, CLEANUP_INTERVAL);
    }
  }

  // ===== –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ =====

  // –õ—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  saveMoonData(date, data) {
    const dateKey = date.toISOString().split('T')[0];
    const key = CacheUtils.generateKey('moon', dateKey);
    
    return this.saveToCache(key, data, {
      ttlMinutes: TTL_CONFIG.MOON_DATA,
      compress: true,
      metadata: {
        type: 'moon_data',
        date: dateKey
      }
    });
  }

  loadMoonData(date) {
    const dateKey = date.toISOString().split('T')[0];
    const key = CacheUtils.generateKey('moon', dateKey);
    return this.loadFromCache(key);
  }

  // –ì–æ—Ä–æ—Å–∫–æ–ø—ã
  saveHoroscope(zodiacSign, data) {
    const today = new Date().toISOString().split('T')[0];
    const key = CacheUtils.generateKey('horoscope', `${zodiacSign}_${today}`);
    
    return this.saveToCache(key, data, {
      ttlMinutes: TTL_CONFIG.HOROSCOPE,
      metadata: {
        type: 'horoscope',
        sign: zodiacSign,
        date: today
      }
    });
  }

  loadHoroscope(zodiacSign) {
    const today = new Date().toISOString().split('T')[0];
    const key = CacheUtils.generateKey('horoscope', `${zodiacSign}_${today}`);
    return this.loadFromCache(key);
  }

  // API –æ—Ç–≤–µ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  saveApiResponse(endpoint, data, params = {}) {
    const key = CacheUtils.generateKey('api', endpoint, params);
    
    return this.saveToCache(key, data, {
      ttlMinutes: TTL_CONFIG.API_RESPONSE,
      compress: true,
      metadata: {
        type: 'api_response',
        endpoint,
        params
      }
    });
  }

  loadApiResponse(endpoint, params = {}) {
    const key = CacheUtils.generateKey('api', endpoint, params);
    return this.loadFromCache(key);
  }

  // ===== –£–¢–ò–õ–ò–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
  getCacheStats() {
    try {
      const keys = Object.keys(localStorage).filter(key => key.startsWith(CACHE_PREFIX));
      let totalSize = 0;
      let activeItems = 0;
      let expiredItems = 0;
      const typeStats = {};

      keys.forEach(key => {
        const item = localStorage.getItem(key);
        totalSize += CacheUtils.getByteSize(item);

        try {
          const parsed = JSON.parse(item);
          const { expiresAt, timestamp, ttl, metadata } = parsed;
          const now = Date.now();
          const expired = expiresAt ? now > expiresAt : (now - timestamp > (ttl || DEFAULT_TTL));

          if (expired) {
            expiredItems++;
          } else {
            activeItems++;
          }

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
          const type = metadata?.type || 'unknown';
          if (!typeStats[type]) {
            typeStats[type] = { count: 0, size: 0 };
          }
          typeStats[type].count++;
          typeStats[type].size += metadata?.size || CacheUtils.getByteSize(item);

        } catch (e) {
          activeItems++;
        }
      });

      return {
        totalKeys: keys.length,
        activeItems,
        expiredItems,
        totalSizeKB: Math.round(totalSize / 1024),
        maxSizeKB: Math.round(MAX_CACHE_SIZE / 1024),
        usagePercentage: Math.round((totalSize / MAX_CACHE_SIZE) * 100),
        typeStats,
        cacheKeys: keys.map(key => key.replace(CACHE_PREFIX, '')),
        storageAvailable: this.storageAvailable
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞:', error);
      return null;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  cleanExpiredCache() {
    try {
      const keys = Object.keys(localStorage).filter(key => key.startsWith(CACHE_PREFIX));
      let cleaned = 0;

      keys.forEach(key => {
        const item = localStorage.getItem(key);
        
        try {
          const parsed = JSON.parse(item);
          const { expiresAt, timestamp, ttl } = parsed;
          const now = Date.now();
          const expired = expiresAt ? now > expiresAt : (now - timestamp > (ttl || DEFAULT_TTL));

          if (expired) {
            localStorage.removeItem(key);
            cleaned++;
          }

        } catch (e) {
          // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          localStorage.removeItem(key);
          cleaned++;
        }
      });

      if (cleaned > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–µ—à–∞: ${cleaned}`);
      }
      
      return cleaned;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∫–µ—à–∞:', error);
      return 0;
    }
  }

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  clearAllCache() {
    try {
      const keys = Object.keys(localStorage).filter(key => key.startsWith(CACHE_PREFIX));
      let cleared = 0;

      keys.forEach(key => {
        try {
          localStorage.removeItem(key);
          cleared++;
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞:', key, error);
        }
      });

      console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫–µ—à: ${cleared} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      return cleared;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
      return 0;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ —Ç–∏–ø—É
  clearCacheByType(type) {
    try {
      const keys = Object.keys(localStorage).filter(key => key.startsWith(CACHE_PREFIX));
      let cleared = 0;

      keys.forEach(key => {
        try {
          const item = localStorage.getItem(key);
          const parsed = JSON.parse(item);
          
          if (parsed.metadata?.type === type) {
            localStorage.removeItem(key);
            cleared++;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
      });

      console.log(`üóëÔ∏è –û—á–∏—â–µ–Ω –∫–µ—à —Ç–∏–ø–∞ "${type}": ${cleared} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      return cleared;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø–æ —Ç–∏–ø—É:', error);
      return 0;
    }
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====
const cache = EnhancedCache.getInstance();

export function saveToCache(key, data) {
  return cache.saveToCache(key, data, { ttlMinutes: 1440 }); // 24 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

export function loadFromCache(key) {
  return cache.loadFromCache(key);
}

export function clearCache(key) {
  try {
    localStorage.removeItem(`${CACHE_PREFIX}${key}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:', error);
  }
}

export function saveWithTTL(key, data, ttlMinutes = 360) {
  return cache.saveToCache(key, data, { ttlMinutes });
}

export function loadWithTTL(key) {
  return cache.loadFromCache(key);
}

export function saveMoonData(date, data) {
  return cache.saveMoonData(date, data);
}

export function loadMoonData(date) {
  return cache.loadMoonData(date);
}

export function saveHoroscope(zodiacSign, data) {
  return cache.saveHoroscope(zodiacSign, data);
}

export function loadHoroscope(zodiacSign) {
  return cache.loadHoroscope(zodiacSign);
}

export function getCacheStats() {
  return cache.getCacheStats();
}

export function cleanExpiredCache() {
  return cache.cleanExpiredCache();
}

// ===== DEBUG –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
  window.cacheDebug = {
    stats: () => cache.getCacheStats(),
    clean: () => cache.cleanExpiredCache(),
    clear: () => cache.clearAllCache(),
    saveMoon: (date, data) => cache.saveMoonData(date, data),
    loadMoon: (date) => cache.loadMoonData(date),
    cache // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É
  };
  
  console.log('üîß Enhanced Cache debug tools –¥–æ—Å—Ç—É–ø–Ω—ã –≤ window.cacheDebug');
}

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default {
  saveToCache,
  loadFromCache,
  clearCache,
  saveWithTTL,
  loadWithTTL,
  saveMoonData,
  loadMoonData,
  saveHoroscope,
  loadHoroscope,
  getCacheStats,
  cleanExpiredCache,
  EnhancedCache
};
