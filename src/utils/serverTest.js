// src/utils/serverTest.js - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
import apiService from '../services/api';

class ServerTester {
  constructor() {
    this.serverUrl = process.env.REACT_APP_API_URL || 'https://d-gnome-horoscope-miniapp-frontend.onrender.com';
  }

  // –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async testConnection() {
    console.log('üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
    console.log('üåê URL —Å–µ—Ä–≤–µ—Ä–∞:', this.serverUrl);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ /health
      const response = await fetch(`${this.serverUrl}/`);
      console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      if (response.ok || response.status === 404) {
        // 200 –∏–ª–∏ 404 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
        return { success: true, status: response.status };
      } else {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.statusText);
        return { success: false, error: response.statusText };
      }
    } catch (error) {
      console.log('üî¥ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      return { success: false, error: error.message };
    }
  }

  // –¢–µ—Å—Ç API –≥–æ—Ä–æ—Å–∫–æ–ø–∞
  async testHoroscopeAPI() {
    console.log('üîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≥–æ—Ä–æ—Å–∫–æ–ø–∞...');
    
    try {
      const testSign = '–û–≤–µ–Ω';
      const horoscope = await apiService.getHoroscope(testSign);
      console.log('‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—É—á–µ–Ω:', horoscope);
      return { success: true, data: horoscope };
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞:', error);
      return { success: false, error: error.message };
    }
  }

  // –¢–µ—Å—Ç API –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async testUserSettingsAPI() {
    console.log('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    try {
      const initData = window.Telegram?.WebApp?.initData || 'test_data';
      const settings = await apiService.getUserSettings(initData);
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', settings);
      return { success: true, data: settings };
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return { success: false, error: error.message };
    }
  }

  // –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö API
  async runFullTest() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...');
    
    const results = {
      connection: await this.testConnection(),
      horoscope: await this.testHoroscopeAPI(),
      userSettings: await this.testUserSettingsAPI()
    };

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
    
    const successCount = Object.values(results).filter(r => r.success).length;
    const totalTests = Object.keys(results).length;
    
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalTests} —Ç–µ—Å—Ç–æ–≤`);
    
    if (successCount === totalTests) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ.');
    }
    
    return results;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  async checkEndpoints() {
    const endpoints = [
      '/health',
      '/api/horoscope',
      '/api/user/settings',
      '/api/premium/horoscope',
      '/api/share',
      '/api/analytics'
    ];

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
    
    const results = {};
    
    for (const endpoint of endpoints) {
      try {
        const response = await fetch(`${this.serverUrl}${endpoint}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        
        results[endpoint] = {
          available: response.status < 500,
          status: response.status,
          statusText: response.statusText
        };
        
        console.log(`${results[endpoint].available ? '‚úÖ' : '‚ùå'} ${endpoint}: ${response.status}`);
      } catch (error) {
        results[endpoint] = {
          available: false,
          error: error.message
        };
        console.log(`‚ùå ${endpoint}: ${error.message}`);
      }
    }
    
    return results;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
const serverTester = new ServerTester();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if (process.env.NODE_ENV === 'development') {
  setTimeout(() => {
    serverTester.runFullTest();
  }, 2000);
}

export default serverTester;